#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import pickle
import datetime, time
import os, sys, re
#from conf.CylcGlobals import central_regdb_dir, local_regdb_dir

# NOTE:ABSPATH (see below)
#   dir = os.path.abspath( dir )
# On GPFS os.path.abspath() returns the full path with fileset
# prefix which can make filenames (for files stored under the 
# cylc suite directory) too long for hardwired limits in the
# UM, which then core dumps. Manual use of $PWD to absolutize a relative
# path, on GPFS, results in a shorter string ... so I use this for now.

# local and central suite registration

class RegistrationError( Exception ):
    """
    Attributes:
        message - what the problem is. 
    """
    def __init__( self, msg ):
        self.msg = msg
    def __str__( self ):
        return repr(self.msg)

class RegistrationTakenError( RegistrationError ):
    def __init__( self, suite, owner=None ):
        self.msg = "ERROR: Another suite is registered as " + suite
        if owner:
            self.msg += ' (' + owner + ')'

class SuiteNotRegisteredError( RegistrationError ):
    def __init__( self, suite ):
        self.msg = "ERROR: Suite not found " + suite

class GroupNotFoundError( RegistrationError ):
    def __init__( self, group, owner=None ):
        self.msg = "ERROR: group not found " + group
        if owner:
            self.msg += ' (' + owner + ')'

class GroupAlreadyExistsError( RegistrationError ):
    def __init__( self, group, owner=None ):
        self.msg = "ERROR: group already exists " + group
        if owner:
            self.msg += ' (' + owner + ')'

class RegistrationNotValidError( RegistrationError ):
    pass

class DatabaseLockedError( RegistrationError ):
    pass

class regdb(object):
    """
    A simple suite registration database.
    """
    def __init__( self, dir ):
        self.dir = dir
        # items[one][two]...[name] = (dir,description)
        self.items = {}
        # create initial database directory if necessary
        if not os.path.exists( self.dir ):
            try:
                os.makedirs( self.dir )
            except Exception,x:
                print "ERROR: failed to create directory:", self.dir
                print x
                sys.exit(1)
        #self.user = os.environ['USER']
        self.mtime_at_load = None
        self.lockfile = os.path.join( self.dir, 'lock' )

    def lock( self ):
        if os.path.exists( self.lockfile ):
            print "lock file:", self.lockfile
            raise DatabaseLockedError, 'ERROR: ' + self.file + ' is locked'
        print "Locking database " + self.file
        lockfile = open( self.lockfile, 'wb' )
        lockfile.write( self.user + '\n' )
        lockfile.write( str(datetime.datetime.now()))
        lockfile.close()

    def unlock( self ):
        print "Unlocking database " + self.file
        try:
            os.unlink( self.lockfile )
        except OSError, x:
            print x

    def changed_on_disk( self ):
        # use to detect ONE change in database since we read it,
        # while we have read-only access.
        try:
            st_mtime = os.stat( self.file ).st_mtime 
        except OSError:
            # file not found => no suites registered.
            return False

        if st_mtime != self.mtime_at_load:
            return True
        else:
            return False
        
    def load_from_file( self ):
        try:
            self.mtime_at_load = os.stat(self.file).st_mtime
        except OSError:
            # no file: no suites registered  yet
            self.mtime_at_load = time.time()
            return
        input = open( self.file, 'rb' )
        self.items = pickle.load( input )
        input.close()

    def dump_to_file( self ):
        output = open( self.file, 'w' )
        pickle.dump( self.items, output )
        output.close()

    def register( self, suite, dir, des='(no description supplied)' ):
        # remove trailing '/'
        dir = dir.rstrip( '/' )
        # remove leading './'
        dir = re.sub( '^\.\/', '', dir )
        # Also strip / off name in case of registering same name as dir 
        # whilst sitting one level up from the suite dir itself, using
        # tab completion, and getting the args the wrong way around.
        suite = suite.rstrip( '/' )
        # make registered path absolute # see NOTE:ABSPATH above

        regpath = suite.split(':')

        if not re.search( '^/', dir ):
            dir = os.path.join( os.environ['PWD'], dir )
        try:
            xdir, xdes = self.get( suite )
        except SuiteNotRegisteredError:
            # register it
            nest2 = self.items
            for key in regpath[:-1]:
                if key not in nest2:
                    nest2[key] = {}
                nest2 = nest2[key]
            nest2[regpath[-1]] = dir, des
        else:
            if xdir == dir:
                print 'Already registered:', suite
            else:
                raise RegistrationTakenError, suite

    def get( self, suite ):
        regpath = suite.split(':')
        nest2 = self.items
        for key in regpath[:-1]:
            try:
                nest2 = nest2[key]
            except KeyError:
                raise SuiteNotRegisteredError, "Suite not registered: " + suite
        try:
            dir, des = nest2[regpath[-1]]
        except KeyError:
            raise SuiteNotRegisteredError, "Suite not registered: " + suite
        except ValueError:
            # sub-path
            raise RegistrationTakenError, suite
        else:
            return dir, des

    def unregister( self, suite ):
        # LOCKING HANDLED BY CALLERS
        print 'UNREGISTERING', suite 
        regpath = suite.split(':')
        nest2 = self.items
        for key in regpath[:-1]:
            try:
                 nest2 = nest2[key]
            except KeyError:
                raise SuiteNotRegisteredError, "Suite note registered: " + suite
        del nest2[regpath[-1]]
        self.prune( regpath[:-1] )

    def prune( self, path ):
        print 'PRUNE:', self.items, path
        nest2 = self.items
        for key in path[:-1]:
            try:
                 nest2 = nest2[key]
            except KeyError:
                break
        if nest2 == {}:
            return
        if nest2[path[-1]] == {}:
            del nest2[path[-1]]
            self.prune( path[:-1] )

    def reregister( self, srce, targ, title=None ):
        # LOCKING HANDLED BY CALLERS
        #if srce == targ and title == None:
        #    return
        #dir, des = self.get( srce )
        regpath = srce.split(':')
        nest2 = self.items
        for key in regpath[:-1]:
            try:
                nest2 = nest2[key]
            except KeyError:
                raise SuiteNotRegisteredError, "Suite not registered: " + suite
        try:
            dir, des = nest2[regpath[-1]]
             # sub-path
            raise RegistrationTakenError, suite
        else:
            return dir, des


a/b/c/d
a/b/f
c/d
        self.unregister( srce )
        if title:
            self.register( targ, dir, title )
        else:
            self.register( targ, dir, des )
        return True

    def unregister_all_fast( self ):
        print 'UNREGISTERING ALL REGISTRATIONS!'
        self.items = {}
 
    def unregister_all( self, verbose=False ):
        my_suites = self.get_list( ownerfilt=self.user )
        for suite, dir, descr in my_suites:
            self.unregister( suite, verbose=verbose )

    def unregister_multi( self, ownerfilt=None, groupfilt=None,
            namefilt=None, verbose=False, invalid=False ):
        changed = False
        owners = self.items.keys()
        owners.sort()
        owner_done = {}
        group_done = {}
        for owner in owners:
            owner_done[owner] = False
            if ownerfilt:
                if not re.match( ownerfilt, owner):
                    continue
            groups = self.items[owner].keys()
            groups.sort()
            for group in groups:
                group_done[group] = False
                if groupfilt:
                    if not re.match( groupfilt, group):
                        continue
                names = self.items[owner][group].keys()
                names.sort()
                for name in names:
                    if namefilt:
                        if not re.match( namefilt, name):
                            continue
                    if verbose:
                        if not owner_done[owner]:
                            print 'OWNER', owner + ':'
                            owner_done[owner] = True
                        if not group_done[group]:
                            print '  GROUP', group + ':'
                            group_done[group] = True
                    suite = owner + ':' + group + ':' + name
                    if invalid:
                        # unregister only if not valid
                        try:
                            self.check_valid( suite )
                        except RegistrationNotValidError, x:
                            print x
                        else:
                            continue
                    self.unregister( suite, verbose )
                    changed = True
        return changed

    def get_list( self, ownerfilt=None, groupfilt=None, namefilt=None, name_only=False ):
        # return filtered list of tuples:
        # [( suite, dir, descr ), ...]
        regs = []
        owners = self.items.keys()
        owners.sort()
        #print ownerfilt
        #print groupfilt
        #print namefilt
        for owner in owners:
            if ownerfilt:
                if not re.match( ownerfilt, owner ):
                    continue
            groups = self.items[owner].keys()
            groups.sort()
            for group in groups:
                if groupfilt:
                    if not re.match( groupfilt, group ):
                        continue
                names = self.items[owner][group].keys()
                names.sort()
                for name in names:
                    if namefilt:
                        if not re.match( namefilt, name ):
                            continue
                    dir,descr = self.items[owner][group][name]
                    if name_only:
                        regs.append( (self.suiteid(owner,group,name)))
                    else:
                        regs.append( (self.suiteid(owner,group,name), dir, descr))
        return regs

    def check_valid( self, suite ):
        owner, group, name = regsplit( suite ).get()
        # raise an exception if the registration is not valid
        dir,descr = self.get( suite )
        if not os.path.isdir( dir ):
            raise RegistrationNotValidError, 'Directory not found: ' + dir
        file = os.path.join( dir, 'suite.rc' )
        if not os.path.isfile( file ): 
            raise RegistrationNotValidError, 'File not found: ' + file
        # OK

class localdb( regdb ):
    """
    Local (user-specific) suite registration database.
    Internally, registration uses 'owner:group:name' 
    as for the central suite database, but for local
    single-user use, owner is stripped off.
    """
    def __init__( self, file=None ):
        if file:
            # use for testing
            self.file = file
            self.dir = os.path.dirname( file )
        else:
            # file in which to store suite registrations
            self.dir = local_regdb_dir
            self.file = os.path.join( self.dir, 'db' )
        regdb.__init__(self)

class centraldb( regdb ):
    """
    Central registration database for sharing suites between users.
    """
    def __init__( self, file=None ):
        if file:
            # use for testing
            self.file = file
            self.dir = os.path.dirname( file )
        else:
            # file in which to store suite registrations
            self.dir = central_regdb_dir
            self.file = os.path.join( self.dir, 'db' )
        regdb.__init__(self)

        # ...FORWARD...
        owner, group, name = regsplit( suite ).get()
        if owner != self.user and not safe:
            raise RegistrationError, 'You cannot register as another user'
        try:
            regdir, descr = self.items[owner][group][name]
        except KeyError:
            # not registered  yet, do it below.
            pass
        else:
            if regdir == dir:
                # OK, this suite is already registered
                self.print_reg( suite, prefix='(ALREADY REGISTERED)' )
                return
            else:
                # ERROR, another suite is already using this registration
                raise RegistrationTakenError( suite )

def getdb( suite ):
        type = None
        if re.match( '^(\w+):(\w+):(\w+)$', suite ):
            # owner:group:name
            type = 'central'
        elif re.match( '^(\w+):(\w+)$', suite ): 
            # group:name
            type = 'local'
        elif re.match('^(\w+):(\w+):$', suite ):
            # owner:group:
            type = 'central'
        elif re.match('^(\w+):$', suite ):
            # group:
            type = 'local'
        else:
            raise RegistrationError, 'Illegal suite GROUP:NAME: ' + suite

        if type == 'central':
            return centraldb()
        else:
            return localdb()

if __name__ == '__main__':
    foo = regdb('DB')
    foo.register( 'a:d', '/a/d',  'ad' )
    foo.register( 'a:b:c', '/a/b/c', 'abc' )
    foo.register( 'a:b:d', '/a/b/d', 'abd' )
    print foo.items
    #print foo.get( 'a:b:c' )
    #print foo.get( 'a:d' )
    foo.reregister( 'a:b', 'c:d' )
    print foo.items
    #foo.unregister( 'a:d' )
    #print foo.items
    #print foo.get( 'a:d' )
    #print foo.get( 'a:b:c' )
    #print foo.items

    #try:
    #    print foo.get( 'a:f:c' )
    #except SuiteNotRegisteredError:
    #    print foo.items
    #    sys.exit(1)
    #print foo.get( 'a:x:c' )

