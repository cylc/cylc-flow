#>______________________________________________________________________
#> This is a ConfigObj configspec for cylc site and user configuration.
#> All legal configuration items and default values are defined below. 
#>----------------------------------------------------------------------
#> HOW TO CUSTOMIZE SETTINGS FOR YOUR SITE:
#>   *** Do not modify this configspec file ***
#>   (1) Run "cylc get-global-config --write-site" to generate the file
#>       $CYLC_DIR/conf/site.rc with all default settings commented out.
#>   (2) UNCOMMENT and modify specific configuration items as required.
#>----------------------------------------------------------------------
#> HOW TO CUSTOMIZE SETTINGS FOR A USER (this overrides the site file):
#>   *** Do not modify this configspec file ***
#>   (1) Run "cylc get-global-config --write-user" to generate the file 
#>       $HOME/.cylc/cylc.rc with all default settings commented out.
#>   (2) UNCOMMENT and modify specific configuration items as required.
#>----------------------------------------------------------------------
#> Comments starting with "#>" are not passed on to generated .rc files.
#>----------------------------------------------------------------------
# Sections or items preceded by "# SITE ONLY" can not be set by users.
#> (trailing comments don't get passed on to generated config files)
#-----------------------------------------------------------------------
# For display items unset by default are commented out with value 'None'.
# To unset an item in reality, don't use 'None' - just comment it out.
#-----------------------------------------------------------------------

# A temporary directory is needed by a few cylc commands, and is cleaned
# automatically on exit. Leave unset for the default (usually $TMPDIR).
temporary directory = string( default=None )

# A rolling archive of suite state dumps is maintained for restarts.
state dump rolling archive length = integer( min=1, default=10 )

# Commands that intervene in running suites can ask for confirmation
# before acting. Some find this annoying and ineffective as a safety
# measure, however, so command prompts are disabled by default.
disable interactive command prompts = boolean( default=True )

# The suite run directory tree is created anew with every suite start
# (not restarts) but output from the most recent previous runs is
# retained in a rolling archive. Set length to 0 to keep no backups.
# *** THIS IS CURRENTLY INCOMPATIBLE WITH ROSE SUITE HOUSEKEEPING ***
# If not enabled (and without Rose) new logs overwrite existing ones.
enable run directory housekeeping = boolean( default=False )
run directory rolling archive length = integer( min=0, default=2 )

# Default polling intervals (in MINUTES) are used only for the polling
# task communications method (below), and only if more task-appropriate
# intervals have not been configured in the suite definition. For the
# other comms methods polling is not done by default (but is still done
# if configured under task [runtime]). A list of interval values is used
# in turn to poll running jobs with the last value used repeatedly until
# the task is finished, this allows more frequent polling near the
# beginning and end of the anticipated task run time. A single value 
# is probably sufficient for job submission polling. Multipliers can be
# used as shorthand: 1.0, 3*2.0, 1.0 == 1.0, 2.0, 2.0, 2.0, 1.0
submission polling intervals = force_list( default=list(1.0)) 
execution polling intervals = force_list( default=list(1.0))

# Task messaging settings affect task-to-suite communications.
[task messaging]
    # If a message send fails, retry after this delay:
    retry interval in seconds = float( min=1, default=5 )
    # If send fails after this many tries, give up trying:
    maximum number of tries = integer( min=1, default=7 )

    # This timeout is the same as --pyro-timeout for user commands. If
    # set to None (no timeout) message send to non-responsive suites
    # (e.g. suspended with Ctrl-Z) could hang indefinitely.
    connection timeout in seconds = float( min=1, default=30 )

# suites logs go under the suite run directory (see below)
[suite logging]
    roll over at start-up = boolean( default=True )
    rolling archive length = integer( min=1, default=5 )
    maximum size in bytes = integer( min=1000, default=1000000 )

# The "cylc doc" command and GUI Help menus need the following items.
[documentation]

    # Documentation files that come with the cylc release tarball.
# SITE ONLY
    [[files]]
        html index = string( default="$CYLC_DIR/doc/index.html" )
        pdf user guide = string( default="$CYLC_DIR/doc/pdf/cug-pdf.pdf" )
        multi-page html user guide = string( default="$CYLC_DIR/doc/html/multi/cug-html.html" )
        single-page html user guide = string( default="$CYLC_DIR/doc/html/single/cug-html.html" )

    # Documentation URLs:
    [[urls]]

        # The cylc homepage links to documentation for the latest release.
# SITE ONLY
        internet homepage = string( default="http://cylc.github.com/cylc/" )

        # You may want to copy the docs for access via a local web server.
        local index = string( default=None )

# PDF and HTML viewers can be launched by cylc to view documentation.
[document viewers]
    pdf  = string( default="evince" )
    html = string( default="firefox" )

# Configure your favourite text editor for editing suite definitions.
[editors]
    # Examples:
    #  + vim           # vim in-terminal
    #  + gvim -f       # (-f is required for "cylc edit --inline")
    #  + xterm -e vim  # in-terminal as a proxy for a GUI editor
    #  + emacs         # emacs GUI
    #  + emacs -nw     # emacs in-terminal 
    terminal = string( default="vim" )
    gui      = string( default="gvim -f" )

# Pyro is required for communications between cylc clients and servers
# (i.e. between suite-connecting commands and guis, and running suite
# server processes).
[pyro]

    # Each suite listens on a dedicated network port.
    # Servers bind on the first port available from the base port up:
# SITE ONLY
    base port = integer( default=7766 )

    # This sets the maximum number of suites that can run at once.
# SITE ONLY
    maximum number of ports = integer( default=100 )

    # Port numbers are recorded in this directory, by suite name.
    ports directory = string( default="$HOME/.cylc/ports/" )

# The [hosts] section configures host-specific settings for the suite
# host ('localhost') and remote task hosts (site/user settings on the
# suite host determine remote task behaviour). Local settings are used
# as defaults for task hosts (for directory paths the local home
# directory will be replaced with literal '$HOME' for evaluation on the
# remote host) so specific task hosts only need to be mentioned here if
# you need to override the defaults.
[hosts]

    # The default task host is the suite host, i.e. localhost:
    # Add task host sections if local defaults are not sufficient.
    [[localhost]]

        # Top level for suite output logs of various kinds:
        run directory  = string( default="$HOME/cylc-run" )

        # Top level for suite work and share directories:
        work directory = string( default="$HOME/cylc-run" )

        # Method of communication of task progress back to the suite:
        #   1) pyro - direct client-server RPC via network ports
        #   2) ssh  - re-invoke pyro messaging commands on suite server
        #   3) poll - the suite polls for status of passive tasks
        # Pyro RPC is still required in all cases *on the suite host*
        # for cylc clients (commands etc.) to communicate with suites. 
        # See above for default polling intervals for the poll method.
        task communication method = option( "pyro", "ssh", "poll", default="pyro" ) 

        # How to invoke commands on this host; default shown (not used
        # on localhost unless you run tasks under another user account):
        remote shell template = string( default='ssh -oBatchMode=yes %s' )

        # Use a login shell or not for remote command invocation. By
        # default cylc submits remote ssh commands using a login shell,
        #   ssh user@host 'bash --login cylc ...'
        # which will source /etc/profile and ~/.profile to set up the
        # user environment.  However, for security reasons some
        # institutions do not allow unattended commands to start login
        # shells, so you can turn off this behaviour to get,
        #   ssh user@host 'cylc ...'
        # this will use the default shell on the remote machine,
        # sourcing ~/.bashrc (or ~/.cshrc) to set up the environment.
        # In either case the PATH environment variable on the remote
        # machine should include $CYLC_DIR/bin in order for the cylc
        # executable to be found.
        # NOTE: this setting does not currently apply to job submission
        # commands (executing on the suite host to submit remote tasks).
        use login shell = boolean( default=True )

    #> Here's the __many__ configspec for available remote task hosts:
    [[__many__]]
        run directory  = string( default=None )
        work directory = string( default=None)
        task communication method = option( "pyro", "ssh", "poll", default=None ) 
        remote shell template = string( default=None )
        use login shell = boolean( default=True )

# SUITE HOST SELF-IDENTIFICATION: The suite host's identity, by NAME or
# IP ADDRESS, must be determined locally by cylc and passed to task
# execution environments as $CYLC_SUITE_HOST so that tasks can send
# messages back.  If name is used, the host name determined on the suite
# host must resolve, on the task host, to the external IP address of the
# suite host. Otherwise the external IP address of the suite host, as
# seen by the task host, must be determined on the suite host, which is
# not always easy to do.  Cylc requires a special "target address" to do
# this; see documentation in $CYLC_DIR/lib/cylc/suite_host.py for why.
# (TO DO: is it conceivable that different remote task hosts at the same
# site might see the suite host differently? If so we would need to be
# able to override the target in suite definitions.)
[suite host self-identification]

    # Method: "name", "address", or "hardwired"
    method = option( "name", "address", "hardwired", default="name" ) 

    # Target: if your suite host sees the internet a common address such
    # as 'google.com' will do; otherwise choose a host on your intranet.
    target = string( default="google.com" )

    # For the hardwired method, put the host name or IP address here:
    host = string( default=None )

