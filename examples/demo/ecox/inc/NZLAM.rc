
    [[GEN]]
        inherit = NZLAM
    [[VAR]]
        inherit = GEN
    [[OPS]]
        inherit = GEN

    [[OPS_Satwind]]
        inherit = OPS
        description = "OPS Extract and Process Satwind observations"
        manual completion = True
        script = OPS-wrapper.sh
        [[[environment]]]
            OPSUI_JOB_DIR     = $OPS_SATWIND_JOBDIR
        [[[directives]]]
            # OPSUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[OPS_ATOVS]]
        inherit = OPS
        description = "OPS Extract and Process ATOVS observations"
        manual completion = True
        script = OPS-wrapper.sh
        [[[environment]]]
            OPSUI_JOB_DIR     = $OPS_ATOVS_JOBDIR
        [[[directives]]]
            # OPSUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[OPS_IASI]]
        inherit = OPS
        description = "OPS Extract and Process IASI observations"
        manual completion = True
        script = OPS-wrapper.sh
        [[[environment]]]
            OPSUI_JOB_DIR     = $OPS_IASI_JOBDIR
        [[[directives]]]
            # OPSUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[OPS_SurfaceScatt]]
        inherit = OPS
        description = "OPS Extract and Process Surface and Scatterometer observations"
        manual completion = True
        script = OPS-wrapper.sh
        [[[environment]]]
            OPSUI_JOB_DIR     = $OPS_SURFACESCATT_JOBDIR
        [[[directives]]]
            # OPSUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[OPS_GPSRO]]
        inherit = OPS
        description = "OPS Extract and Process GPSRO observations"
        manual completion = True
        script = OPS-wrapper.sh
        [[[environment]]]
            OPSUI_JOB_DIR     = $OPS_GPSRO_JOBDIR
        [[[directives]]]
            # OPSUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[OPS_AIRS]]
        inherit = OPS
        description = "OPS Extract and Process AIRS observations"
        manual completion = True
        script = OPS-wrapper.sh
        [[[environment]]]
            OPSUI_JOB_DIR     = $OPS_AIRS_JOBDIR
        [[[directives]]]
            # OPSUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[OPS_AircraftSonde]]
        inherit = OPS
        description = "OPS Extract and Process Aircraft and Sonde observations"
        manual completion = True
        script = OPS-wrapper.sh
        [[[environment]]]
            OPSUI_JOB_DIR     = $OPS_AIRCRAFTSONDE_JOBDIR
        [[[directives]]]
            # OPSUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL


    [[VarConfigureLS]]
        inherit = VAR
    [[VarAnalysePF]]
        inherit = VAR

    [[UM_NZtoNZ_recon]]
        inherit = NZLAM
        description = "Reconfigure the NZLAM model restart dump"
        manual completion = True
        script = """
export UMRECON_INPUTDUMP=$( cylc template -s 6 TEMPLATE_RESTART_DUMP ) 
export UMRECON_OUTPUTDUMP=$( cylc template -s 6 TEMPLATE_RECONFIGURED_RESTART_DUMP ) 
export UM_DATAMDIR=$(  cylc template TEMPLATE_DATAM_DIR  )
export UM_DATAWDIR=$(  cylc template TEMPLATE_DATAW_DIR  )
export UMRECON_LOGDIR=$( cylc template  TEMPLATE_LOGFILE_DIR )
UMrecon-wrapper.sh"""
        [[[environment]]]
            UMUI_JOBDIR   = $NZtoNZ_RECON_JOBDIR

    [[UM_GLtoNZ_recon]]
        inherit = NZLAM
        description = "Reconfigure the cold start dump for the NZLAM"
        manual completion = True
	script = """
export UMRECON_INPUTDUMP=$(  cylc template -s 6 TEMPLATE_GLOBAL_DUMP ) 
export UMRECON_OUTPUTDUMP=$( cylc template -s 6 TEMPLATE_RESTART_DUMP ) 
export UM_DATAMDIR=$(  cylc template TEMPLATE_DATAM_DIR  )
export UM_DATAWDIR=$(  cylc template TEMPLATE_DATAW_DIR  )
export UMRECON_LOGDIR=$(     cylc template      TEMPLATE_LOGFILE_DIR )
UMrecon-wrapper.sh"""
        [[[environment]]]
            UMUI_JOBDIR   = $GLtoNZ_RECON_JOBDIR

    [[UM_GLtoGL_recon]]
        inherit = NZLAM
        description = """Reconfigure a reduced UM global model dump to add
in global ancillary fields and generate a full sized UM global global
start dump."""
        manual completion = True
	script = """
export UMRECON_INPUTDUMP=$(  cylc template -s 6 TEMPLATE_REDUCED_GLOBAL_DUMP ) 
export UMRECON_OUTPUTDUMP=$( cylc template -s 6 TEMPLATE_GLOBAL_DUMP ) 
export UM_DATAMDIR=$(  cylc template TEMPLATE_DATAM_DIR  )
export UM_DATAWDIR=$(  cylc template TEMPLATE_DATAW_DIR  )
export UMRECON_LOGDIR=$(     cylc template      TEMPLATE_LOGFILE_DIR )
UMrecon-wrapper.sh"""
        [[[environment]]]
            UMUI_JOBDIR   = $GLtoGL_RECON_JOBDIR

    [[UM_nzlam]]
        inherit = NZLAM
        description = "NZLAM warm cycle forecast"
        manual completion = True
        script = """
export UM_PPVARFILE=$( cylc template TEMPLATE_PPVAR_FILE )
export UM_PP7CXFILE=$( cylc template TEMPLATE_PP7CX_FILE )
export UM_DATAMDIR=$(  cylc template TEMPLATE_DATAM_DIR  )
export UM_DATAWDIR=$(  cylc template TEMPLATE_DATAW_DIR  )
export UM_ALABCFILE=$( cylc template TEMPLATE_ALABC_FILE )
export UM_VARINCFILE=$( cylc template TEMPLATE_VAR_INCR_FILE )
if [[ $( cylc cycle-point --print-hour ) == 00 ]]; then
    export UM_STARTDUMP=$( cylc cycle-point --offset-hours=-6 --template=$TEMPLATE_RECONFIGURED_RESTART_DUMP )
else
    export UM_STARTDUMP=$( cylc cycle-point --offset-hours=-6 --template=$TEMPLATE_RESTART_DUMP )
fi
export UM_LOGDIR=$( cylc cycle-point --template=TEMPLATE_LOGFILE_DIR )
UM-wrapper.sh"""
         [[[environment]]]
            UMUI_JOBDIR   = $WARMSTART_JOBDIR
 
    [[UM_nzlam_coldstart]]
        inherit = NZLAM
        description = NZLAM initial forecast from global model start dump.
        manual completion = True
        script = """
export UM_STARTDUMP=$( cylc template -s 6 $TEMPLATE_RESTART_DUMP )
export UM_PPVARFILE=$( cylc template -s 6 TEMPLATE_PPVAR_FILE   )
export UM_PP7CXFILE=$( cylc template -s 6 TEMPLATE_PP7CX_FILE   )
export UM_DATAMDIR=$(  cylc template -s 6 TEMPLATE_DATAM_DIR    )
export UM_DATAWDIR=$(  cylc template -s 6 TEMPLATE_DATAW_DIR    )
export UM_ALABCFILE=$( cylc template      TEMPLATE_ALABC_FILE   )
export UM_LOGDIR=$(    cylc template      TEMPLATE_LOGFILE_DIR  )
UM-wrapper.sh"""
        [[[environment]]]
            UMUI_JOBDIR   = $COLDSTART_JOBDIR

    [[VAR_AnalysePF]]
        inherit = VAR
        description = "VAR Analysis"
        manual completion = True
        script = VAR-wrapper.sh
        [[[environment]]]
            VARUI_JOB_DIR    = $VAR_ANALYSEPF_JOBDIR
        [[[directives]]]
            # VARUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[VAR_ConfigureLS]]
        inherit = VAR
        description = "VAR Reconfiguration"
        manual completion = True
        script = VAR-wrapper.sh
        [[[environment]]]
            VARUI_JOB_DIR    = $VAR_CONFIGURELS_JOBDIR
        [[[directives]]]
            # VARUI <JOB>_init requires $LOGNAME within loadleveler
            environment = COPY_ALL

    [[get_um_output]]
        inherit = NZLAM
        description = """Move NZLAM forecast output from the UM output
directories to the suite output directory, renaming them appropriately."""
        script = get-um-output.sh $WARMSTART_RUNID pp0 pp1 pc pi

    [[nzlam_conv_met]]
        inherit = NZLAM
        description = "Converts the NZLAM UM met file to NetCDF format."
        script = um_conv_nc.sh
        [[[environment]]]
            FILEIN  = met_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12_*.um
            FILEIN_LOC  = ${HOME}/output/nzlam_12
            FILEOUT = met_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12_*.nc
            FILEOUT_LOC = ${HOME}/output/nzlam_12
            FILEATT = attribute_met_nzlam-12.txt
            FILEATT_LOC = /${SYS}/ecoconnect/nwp_${SYS}/control/nzlam_12/netcdf-attr
            MULTIFILE   = 1
            GUNZIP  = 0
            UM2NC_O = met_ 
            UM2NC_P = _nzlam_12
            UM2NC_CT    = ${CYLC_TASK_CYCLE_TIME}
            OPTIONS = -f -t -i -c
            FIELDS  = 23 24 33 409 3209 3210 3236 3245 3248 3281 3282 3283 4201 4203 5201 5205 5215 5216 5226 6203 8223 9203 9204 9205 9216 15229 15242 15243 15244 16202 16203 16222 16256
            SERVICE = nzlam_conv_met

    [[tn_llclean]]
        inherit = NZLAM
    # ONLY REQUIRED UNTIL WE CHANGE THE UM STASH GRID CUTOUT DEFINITION.
        description = "Clean NetCDF tn file."
        script = llclean.sh 
        [[[environment]]]
            FILEIN  = tn_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12.nc
            FILEIN_LOC  = ${HOME}/output/nzlam_12
            FILEOUT = tn_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12.nc
            FILEOUT_LOC = ${HOME}/output/nzlam_12
            SERVICE = tn_llclean

    [[nzlam_conv_sls]]
        inherit = NZLAM
        description = "Converts the NZLAM UM sls file to NetCDF format."
        script = um_conv_nc.sh
        [[[environment]]]
            FILEIN  = sls_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12.um
            FILEIN_LOC  = ${HOME}/output/nzlam_12
            FILEOUT = sls_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12.nc
            FILEOUT_LOC = ${HOME}/output/nzlam_12
            FILEATT = attribute_sls_nzlam-12.txt
            FILEATT_LOC = /${SYS}/ecoconnect/nwp_${SYS}/control/nzlam_12/netcdf-attr
            MULTIFILE = 0
            GUNZIP  = 0
            UM2NC_O = sls_
            UM2NC_P = _nzlam_12
            UM2NC_CT    = ${CYLC_TASK_CYCLE_TIME}
            OPTIONS = -f -t -i -c
            FIELDS  = All
            SERVICE = nzlam_conv_sls 

    [[nzlam_conv_tn]]
        inherit = NZLAM
        description = "Converts the NZLAM UM TN file to NetCDF format."
        script = um_conv_nc.sh
        [[[environment]]]
            FILEIN  = tn_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12.um
            FILEIN_LOC  = ${HOME}/output/nzlam_12
            FILEOUT = tn_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12.nc
            FILEOUT_LOC = ${HOME}/output/nzlam_12
            FILEATT = attribute_tn_nzlam-12.txt
            FILEATT_LOC = /${SYS}/ecoconnect/nwp_${SYS}/control/nzlam_12/netcdf-attr
            MULTIFILE   = 0
            GUNZIP  = 0
            UM2NC_O = tn_
            UM2NC_P = _nzlam_12
            UM2NC_CT    = ${CYLC_TASK_CYCLE_TIME}
            OPTIONS = -f -t -i -c
            FIELDS  = 33 409 1235 2207 3236 3209 3210 3245 5226
            SERVICE = nzlam_conv_tn

    [[nzlam_conv_escape]]
        inherit = NZLAM
        description = "Converts the NZLAM UM Energy Scape file to NetCDF format."
        script = um_conv_nc.sh
        [[[environment]]]
            FILEIN  = escape_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12*.um
            FILEIN_LOC  = ${HOME}/output/nzlam_12
            FILEOUT = escape_${CYLC_TASK_CYCLE_TIME}_utc_nzlam_12*.nc
            FILEOUT_LOC = ${HOME}/output/nzlam_12
            FILEATT = attribute_escape_nzlam-12.txt
            FILEATT_LOC = /${SYS}/ecoconnect/nwp_${SYS}/control/nzlam_12/netcdf-attr
            MULTIFILE = 1
            GUNZIP  = 0
            UM2NC_O = escape_
            UM2NC_P = _nzlam_12
            UM2NC_CT    = ${CYLC_TASK_CYCLE_TIME}
            OPTIONS = -f -t -i -c
            FIELDS  = All 
            SERVICE = nzlam_conv_escape

    [[nzlam_ncl]]
        inherit = NZLAM
        description = "NZLAM ncl postprocessing."
        script = /${SYS}/ecoconnect/vis_${SYS}/bin/vis_scripts/vis_nzlam.sh

    [[nzlam_products]]
        inherit = NZLAM
    # nzlam_products need not be sequential in principle, but the
    # product ingest gets overloaded when multiple cycles run at once in
    # catchup operation. 
        description = "NZLAM forecast product generation and ingestion."
        script = convert_ingest.sh
        [[[environment]]]
            PRODUCT_DIR   = ${HOME}/running/nzlam_12/product
            SERVICE     = nzlam_products
        [[[event hooks]]]
            execution timeout = 240
	[[[directives]]]
	    wall_clock_limit = "8:00:10,8:00:00"

    [[nzlam_housekeeping]]
        inherit = NZLAM
        description = "Archiving and cleanup for the NZLAM sub-system."
        script = cylc housekeeping --mode=0775 -b 4 /$SYS/ecoconnect/ecoconnect_$SYS/control/housekeeping/nzlam_housekeeping.conf
    	[[[directives]]]
	        wall_clock_limit = "4:00:10,4:00:00"
        [[[event hooks]]]
            execution timeout = 360

    [[make_alabc]]
        inherit = NZLAM
        description = "Convert NZLAM frames to an ALABC (boundary condition) file"
        script = """
# This is required for access to the standard makebc executable in
# the UM installation. UM jobs at NIWA, on the other hand, require
# this in $HOME/.profile, which gets sourced inside the secondary
# loadleveler submit.
. ~um_fcm/user-config/um.profile
make_alabc.sh --keep"""
        [[[directives]]]
            # serial job on fitzroy
            job_type    = serial
            class       = serial
            cluster_list = AIX-LL-Cluster1

    [[unpack_bgerr]]
        inherit = NZLAM
        description = "Check bgerr file for current cycle, unpack if necessary."
        script = check-nzlam-inputs.sh --bgerr

    [[unpack_frames]]
        inherit = NZLAM
        description = "Check frames files for the current cycle, unpack if necessary."
        script = check-nzlam-inputs.sh --frames

    [[unpack_obstores]]
        inherit = NZLAM
        description = "Check obstore files for current cycle, unpack if necessary."
        script = check-nzlam-inputs.sh --obstore
