#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TO DO: consider sending cylc WARNING messages on target check
# failures,  which presumably indicate an archiving failure.

import os, sys
import datetime
from optparse import OptionParser
from cylc.housekeeping import config_file, config_line

usage = """1/ cylc [util] housekeeping [OPTIONS] SOURCE MATCH OPER OFFSET [TARGET]
Usage: 2/ cylc [util] housekeeping [options] FILE

Parallel archiving and cleanup of files or directories with names
that contain a cycle time. Matched items are grouped into batches in 
which members are processed in parallel, by spawned sub-processes. 
Once all batch members have completed, the next batch is processed.

OPERATE ('delete', 'move', or 'copy') on items (files or directories)
matching a Python-style regular expression MATCH in directory SOURCE
whose names contain a cycle time (as YYYYMMDDHH, or YYYYMMDD and HH
separately) more than OFFSET (integer hours) earlier than a base cycle
time (which can be $CYLC_TASK_CYCLE_TIME if called by a cylc task, or
otherwise specified on the command line). 

FILE is a housekeeping config file containing one or more of lines of:

   VARNAME=VALUE
   # comment
   SOURCE    MATCH    OPERATION   OFFSET   [TARGET]

(example: $CYLC_DIR/conf/housekeeping.eg)

MATCH must be a Python-style regular expression (NOT A SHELL GLOB
EXPRESSION!) to match the names of items to be operated on AND to
extract the cycle time from the names via one or two parenthesized
sub-expressions - '(\d{10})' for YYYYMMDDHH, '(\d{8})' and '(\d{2})'
for YYYYMMDD and HH in either order. Partial matching can be used
(partial: 'foo-(\d{10})'; full: '^foo-(\d{10})$'). Any additional
parenthesized sub-expressions, e.g. for either-or matching, MUST
be of the (?:...) type to avoid creating a new match group.

SOURCE and TARGET must be on the local filesystem and may contain
environment varables such as $HOME or ${FOO} (e.g. as defined in the
suite.rc file for suite housekeeping tasks). Variables defined in 
the housekeeping file itself can also be used, as above. 

TARGET may contain the strings YYYYMMDDHH, YYYY, MM, DD, HH; these 
will be replaced with the extracted cycle time for each matched item,
e.g. $ARCHIVE/oper/YYYYMM/DD. 

If TARGET is specified for the 'delete' operation, matched items in
SOURCE will not be deleted unless an identical item is found in
TARGET. This can be used to check that important files have been
successfully archived before deleting the originals.

The 'move' and 'copy' operations are aborted if the TARGET/item already
exists, but a warning is emitted if the source and target items are not
identical. 

To implement a simple ROLLING ARCHIVE of cycle-time labelled files or
directories: just use 'delete' with OFFSET set to the archive length.

SAFE ARCHIVING: The 'move' operation is safe - it uses Python's
shutils.move() which renames files on the local disk partition and
otherwise copies before deleting the original. But for extra safety
consider two-step archiving and cleanup: 
1/ copy files to archive, then
2/ delete the originals only if identicals are found in the archive."""

parser = OptionParser( usage )

parser.add_option( "--cycletime",
        metavar='YYYYMMDDHH',
        help="Cycle time, defaults to $CYLC_TASK_CYCLE_TIME",
        action="store", dest="ctime" )

#parser.add_option( "--dry-run",
#        help="print what would be done, but don't do it.",
#        action="store_true", dest="dry_run", default=False )

#parser.add_option( "-f", "--force",
#        help="copy or move even if the target already exists",
#        action="store_true", dest="force", default=False )

parser.add_option( "--mode", 
        help="Octal umask for creating new destination directories. "
        "E.g. 0775 for drwxrwxr-x",
        metavar='MODE',
        action="store", dest="mode", default=None )

parser.add_option( "--only", "-o",
        help="Only action config file lines matching any member of a "
        "comma-separated list of regular expressions.",
        metavar='LIST', action="store", dest="only", default=None )

parser.add_option( "--except", "-e",
        help="Only action config file lines NOT matching any member of a "
        "comma-separated list of regular expressions.",
        metavar='LIST', action="store", dest="excpt", default=None )

parser.add_option( "--verbose", "-v",
        help="print the result of every action",
        action="store_true", dest="verbose", default=False )

parser.add_option( "--debug", "-d",
        help="print item matching output.",
        action="store_true", dest="debug", default=False )

parser.add_option( "--cheapdiff", "-c",
        help="Assume source and target identical if the same size",
        action="store_true", dest="cheap", default=False )

parser.add_option( "--batchsize", "-b",
        help="Batch size for parallel processing of matched files. "
        "Members of each batch (matched items) are processed in parallel; "
        "when a batch completes, the next batch starts. Defaults to a "
        "batch size of 1, i.e. sequential processing.",
        metavar='INT', action="store", dest="batchsize", default=1 )

( options, args ) = parser.parse_args()

if len(args) != 1  and len( args ) != 4 and len(args) != 5:
    parser.error( "Wrong number of arguments" ) 

if options.ctime:
    ctime = options.ctime
elif 'CYLC_TASK_CYCLE_TIME' in os.environ:
    ctime = os.environ[ 'CYLC_TASK_CYCLE_TIME' ]
else:
    parser.error( "Use --cycletime or define $CYLC_TASK_CYCLE_TIME" )

batchsize = options.batchsize
try:
    batchsize = int( batchsize )
except ValueError:
    parser.error( "Batch size must be integer: " + batchsize )

print "START: ", datetime.datetime.now()

if len(args) == 0 or len(args) > 5:
    parser.usage()
    sys.exit(1)

if len(args) == 1:
    file = args[0]
    config_file( file, ctime,
            verbose=options.verbose, debug=options.debug,
            only=options.only, excpt=options.excpt, mode=options.mode,
            cheap=options.cheap ).action( batchsize )
else:
    source = args[0]
    match  = args[1]
    opern  = args[2]
    offset = args[3]
    destn  = None
    if len(args) == 5:
        destn = args[4]

    config_line( source, match, opern, ctime, offset, destn, 
            verbose=options.verbose, debug=options.debug, 
            mode=options.mode, cheap=options.cheap ).action( batchsize )
    
print '\nFINISH: ', datetime.datetime.now()
