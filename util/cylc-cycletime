#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys, re
from cylc.cycle_time import ct, CycleTimeError
from cylc.cycling.Monthly import Monthly
from cylc.cycling.Yearly import Yearly
from optparse import OptionParser

parser = OptionParser( usage = """cylc [util] cycletime [OPTIONS] [CYCLE]

Arithmetic cycle time offset computation, and filename templating.

Examples:

1) print offset from an explicit cycle time:
  % cylc [util] cycletime --offset-hours=6 2010082318
  2010082400

2) print offset from $CYLC_TASK_CYCLE_TIME (as in suite tasks):
  % export CYLC_TASK_CYCLE_TIME=2010082318
  % cylc cycletime --offset-hours=-6 
  2010082312

3) cycle time filename templating, explicit template:
  % export CYLC_TASK_CYCLE_TIME=201008
  % cylc cycletime --offset-years=2 --template=foo-YYYYMM.nc
  foo-201208.nc

4) cycle time filename templating, template in a variable:
  % export CYLC_TASK_CYCLE_TIME=201008
  % export MYTEMPLATE=foo-YYYYMM.nc
  % cylc cycletime --offset-years=2 --template=MYTEMPLATE
  foo-201208.nc

Arguments:
   [CYCLE]    YYYY[MM[DD[HH[mm[ss]]]]], default $CYLC_TASK_CYCLE_TIME""" )

parser.add_option( "--offset-hours", metavar="HOURS",
        help="Add N hours to CYCLE (may be negative)", 
        action="store", dest="offsethours" )

parser.add_option( "--offset-days", metavar="DAYS",
        help="Add N days to CYCLE (N may be negative)", 
        action="store", dest="offsetdays" )

parser.add_option( "--offset-months", metavar="MONTHS",
        help="Add N months to CYCLE (N may be negative)", 
        action="store", dest="offsetmonths" )

parser.add_option( "--offset-years", metavar="YEARS",
        help="Add N years to CYCLE (N may be negative)", 
        action="store", dest="offsetyears" )

parser.add_option( "--template", metavar="TEMPLATE",
        help="Filename template string or variable", 
        action="store", dest="template" )

parser.add_option( "--print-year", help="Print only YYYY of result",
        action="store_true", default=False, dest="print_year" )

parser.add_option( "--print-month", help="Print only MM of result",
        action="store_true", default=False, dest="print_month" )

parser.add_option( "--print-day", help="Print only DD of result",
        action="store_true", default=False, dest="print_day" )

parser.add_option( "--print-hour", help="Print only HH of result",
        action="store_true", default=False, dest="print_hour" )

(options, args) = parser.parse_args()

if len( args ) == 0:
    # input cycle time must be definied in the environment.
    if 'CYLC_TASK_CYCLE_TIME' not in os.environ:
        parser.error( "Provide CYCLE arg, or define $CYLC_TASK_CYCLE_TIME" )
    else:
        try:
            cycle = ct(os.environ[ 'CYLC_TASK_CYCLE_TIME' ])
        except CycleTimeError, x:
            raise SystemExit(x)
    # DONE (no args)

elif len( args ) == 1:
    # must be cycle time
    try:
        cycle = ct(args[0])
    except CycleTimeError, x:
        raise SystemExit(x)
else:
    parser.error( "Wrong number of arguments!" )

# template string
template = None
if options.template:
    if options.print_month or options.print_year or \
            options.print_day or options.print_hour:
                parser.error( '"print only" options are incompatible with templating' )
    tmp = options.template
    if tmp in os.environ:
        # name of a variable that contains a template
        template = os.environ[ tmp ]
    else:
        # or a raw template string
        template = tmp

n_chosen = 0

#hours = int( cycle.hour ) 

offset_hours  = False
offset_days   = False
offset_months = False
offset_years  = False

if options.offsethours:
    offset_hours = True
    n_chosen += 1
    try:
        hours = int( options.offsethours )
    except ValueError:
        parser.error( 'ERROR: offset must be integer' )

if options.offsetdays:
    offset_days = True
    n_chosen += 1
    try:
        days = int( options.offsetdays )
    except ValueError:
        parser.error( 'ERROR: offset must be integer' )

if options.offsetmonths:
    offset_months = True
    n_chosen += 1
    try:
        months = int( options.offsetmonths )
    except ValueError:
        parser.error( 'ERROR: offset must be integer' )

if options.offsetyears:
    offset_years = True
    n_chosen += 1
    try:
        years = int( options.offsetyears )
    except ValueError:
        parser.error( 'ERROR: offset must be integer' )

# (can chose to offset months and years, for example)
#if n_chosen > 1:
#    parser.error( "Choose ZERO or ONE of subtract, add, or offset" )

n_chosen = 0
print_year = False
print_month = False
print_day = False
print_hour = False

if options.print_year:
    n_chosen +=1
    print_year = True

if options.print_month:
    n_chosen +=1
    print_month = True

if options.print_day:
    n_chosen +=1
    print_day = True

if options.print_hour:
    n_chosen +=1
    print_hour = True

if n_chosen != 0 and n_chosen != 1:
    parser.error( "Choose NONE or ONE of print_(year|month|day|hour)" )

if offset_hours:
    cycle.increment( hours=hours )

if offset_days:
    cycle.increment( days=days )

if offset_months:
    cycle = ct( Monthly.offset( cycle.get(), -months ) )

if offset_years:
    cycle = ct( Yearly.offset( cycle.get(), -years ) )

if template:
    string = template
    # replace YYYYMMDDHH
    string = re.sub( "YYYYMMDDHH", cycle.get(), string )
    # replace YYYYMM
    string = re.sub( "YYYYMM", cycle.year + cycle.month, string )
    # replace YYYY, MM, DD, HH
    string = re.sub( 'YYYY', cycle.year,  string )
    string = re.sub( 'MM',   cycle.month,  string )
    string = re.sub( 'DD',   cycle.day,  string )
    string = re.sub( 'HH',   cycle.hour, string )
    # replace YY
    string = re.sub( 'YY',   cycle.year[2:4],  string )
    print string
elif print_year:
    print cycle.year
elif print_month:
    print cycle.month
elif print_day:
    print cycle.day
elif print_hour:
    print cycle.hour
else:
    print cycle.get()
