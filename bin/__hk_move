#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

from optparse import OptionParser
from cylc.housekeeping import HousekeepingError, NonIdenticalTargetError
from cylc.mkdir_p import mkdir_p
from cylc.hkdiff import diff
from shutil import move
import subprocess
import os, sys

class hk_move:
    """
        Move a source item (file or directory) into a target directory.
         + Move only if the target item does not already exist.
         + Do not move if the target item already exists.
         + Warn if the target item exists but differs from the source.
    """
    def __init__( self, src, tdir, mode=None, cheap=False ):
        self.cheap = cheap
        self.src = src
        self.tdir = tdir

        # source file/dir must exist
        if not os.path.exists( src ):
            raise HousekeepingError, "File not found: " + src

        # create target dir if necessary
        if not os.path.exists( tdir ):
            mkdir_p( tdir, mode )
        elif not os.path.isdir( tdir ):
            raise HousekeepingError, "Destination dir is a file: " + tdir

        # construct target
        self.target = os.path.join( tdir, os.path.basename(src))

    def execute( self ):
        print "Move:"
        print " + source: " + self.src
        print " + target: " + self.target

        if os.path.exists( self.target ):
            # target already exists, check if identical
            try:
                diff( self.src, self.target, cheap=self.cheap ).execute()
            except NonIdenticalTargetError, x:
                print >> sys.stderr, 'WARNING: NOT MOVING, target exists and differs from source!'
                return
            else:
                # target is identical, job done.
                print "NOT MOVING: target exists"
                return

        # target does not exist yet; OK to move.

        # shutil.move() is SAFE, docs say:
        #   Recursively move a file or directory to another location.
        #   If the destination is on the current filesystem, then simply
        #   use rename. Otherwise, copy src (with copy2()) to the dst
        #   and then remove src.
        move( self.src, self.tdir )
        print "SUCCEEDED"
        return
                
if __name__ == "__main__":
    # THE CYLC HOUSEKEEPING UTILITY PROGRAM USES THIS COMMAND
    parser = OptionParser( """__hk_move [options] SRC DIR
    
Arguments:
  SRC    - source item (directory or file) to move
  DIR    - destination directory""")

    parser.add_option( "-c", "--cheap-diff", 
            help="assume that files with the same size are identical",
            action="store_true", default=False, dest="cheapdiff" )

    parser.add_option( "-m", "--mode",
            help="file mode for directory creation",
            action="store", default=None, dest="mode" )

    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.error( "Wrong number of arguments" )

    hk_move( args[0], args[1], 
            mode=options.mode,
            cheap=options.cheapdiff ).execute()
