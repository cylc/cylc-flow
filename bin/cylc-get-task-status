#!/bin/bash

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage() {
    cat <<eof
USAGE: cylc [control] get-task-status [OPTIONS] STATUS-FILE QUEUED RUNNING

This command is normally invoked automatically by cylc, to poll for task
status. To determine the current or final state of a task known to have
been submitted previously, the automatically generated task status file
must be interpreted after interrogating the batch queue (or similar)
to see if it is currently waiting, running, or gone (finished or failed).

Options:
  -h, --help   Print this help message and exit.

Arguments:
  STATUS_FILE - the task status file (written to the task log directory).
  QUEUED - set to 'true' if the task is waiting or running, else 'false'.
  RUNNING - set to 'true' if the task is now running, else 'false'.
eof
}

# DEBUGGING: with 'set -x' output will be printed to cylc stderr in
# debug mode (the poll succeeded hook prints command stderr output to
# suite stderr).

# handle long --help
if [[ $@ == *\-\-help ]]; then
    usage
    exit 0
fi

while getopts "h" opt; do
    case $opt in 
        h )
            usage
            exit 0
            ;;
    esac
done

if [[ $# != 3 ]]; then
    echo "ERROR: wrong number of args!" 1>&2
    exit 1
fi

STATUS_FILE=$1
TASKID=$( basename ${STATUS_FILE%.*.status} )
QUEUED=$2   # boolean
RUNNING=$3  # boolean

# QUEUED=true => polled in batch queue (may be running or not)
# RUNNING=true => polled as running

if $QUEUED && ! $RUNNING; then
    # not running yet (so no status file)
    RESULT="submitted"

else
    # running, or no longer running, or never ran
    if [[ ! -f $STATUS_FILE ]]; then
        # job did not start running
        RESULT="submission failed"
    else
        # LOAD STATUS FILE
        for LINE in $( cat $STATUS_FILE ); do
            eval $LINE
        done

        if $RUNNING; then
            RESULT="started at $CYLC_JOB_INIT_TIME"
            # TODO - checkout status file for internal outputs

        else
            # not queued and not running
            if [[ -z $CYLC_JOB_EXIT ]]; then
                # did not exit cleanly
                RESULT="failed at unknown-time"
            else
                if [[ $CYLC_JOB_EXIT == "SUCCEEDED" ]]; then
                    RESULT="succeeded at $CYLC_JOB_EXIT_TIME"
                else
                    RESULT="failed at $CYLC_JOB_EXIT_TIME"
                fi
            fi
        fi
    fi
fi

# echo standard task message form with "polled" added:
echo "polled $TASKID $RESULT"

