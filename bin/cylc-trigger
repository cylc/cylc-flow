#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc import cylc_pyro_client
from cylc.TaskID import TaskID, TaskIDError
from cylc.CylcOptionParsers import PromptOptionParser
from cylc.port_scan import SuiteIdentificationError
from cylc.CylcError import CylcError
from cylc.registration import dbgetter, RegistrationError
from cylc.version import compat

parser = PromptOptionParser( """cylc [control] trigger [options] SUITE TASK

Get a task to trigger immediately (unless the suite is paused, 
in which case it will trigger when normal operation is resumed).
This is effected by setting the task to the 'ready' state (all
prerequisites satisfied) and, for clock-triggered tasks, ignoring
the designated trigger time.""",
[ 'TASK                 The target task.'] )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "Suite name and task ID required." )

task_id = args[1]

try:
    tid = TaskID( task_id )
except TaskIDError,x:
    raise SystemExit(x)
else:
    task_id = tid.id

reg = parser.get_suite_name()
dbg = dbgetter()
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

compat( suite, suiterc ).execute( sys.argv )

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Trigger task ' + task_id + ' in'):
    sys.exit(0)

result = proxy.trigger_task( task_id )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
