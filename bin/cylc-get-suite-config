#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import re
from cylc.config import config, SuiteConfigError
from cylc.CylcOptionParsers import cop
import cylc.flags

parser = cop( usage = """cylc [info] get-suite-config [OPTIONS] ARGS

Print parsed suite configuration items, after runtime inheritance.

By default all settings are printed. For specific sections or items
use -i/--item and wrap sections in square brackets, e.g.:
   cylc get-suite-config --item '[scheduling]initial cycle time'
Multiple items can be retrieved at once.

By default, unset values are printed as an empty string, or (for
historical reasons) as "None" with -o/--one-line. These defaults
can be changed with the -n/--null-value option.

Example:
  |# SUITE.RC
  |[runtime]
  |    [[modelX]]
  |        [[[environment]]]
  |            FOO = foo
  |            BAR = bar

$ cylc get-suite-config --item=[runtime][modelX][environment]FOO SUITE
foo

$ cylc get-suite-config --item=[runtime][modelX][environment] SUITE 
FOO = foo
BAR = bar

$ cylc get-suite-config --item=[runtime][modelX] SUITE
...
[[[environment]]]
    FOO = foo
    BAR = bar
...""", jset=True, prep=True )

parser.add_option( "-i", "--item", metavar="[SEC...]ITEM", 
        help="Item or section to print (multiple use allowed).",
        action="append", dest="item", default=[] )

parser.add_option( "-r", "--sparse",
        help="Only print items explicitly set in the config files.",
        action="store_true", default=False, dest="sparse" )

parser.add_option( "-p", "--python",
        help="Print native Python format.",
        action="store_true", default=False, dest="pnative" )

parser.add_option( "-a", "--all-tasks",
        help="For [runtime] items (e.g. --item='command scripting') report "
        "values for all tasks prefixed by task name.",
        action="store_true", default=False, dest="alltasks" )

parser.add_option( "-n", "--null-value",
        help="The string to print for unset values (default nothing).",
        metavar="STRING", action="store", default='', dest="none_str" )

parser.add_option( "-m", "--mark-up",
        help="Prefix each line with '!cylc!'.",
        action="store_true", default=False, dest="markup" )

parser.add_option( "-o", "--one-line",
        help="Print multiple single-value items at once.",
        action="store_true", default=False, dest="oneline" )

parser.add_option( "-t", "--tasks",
        help="Print the suite task list "
        "[DEPRECATED: use 'cylc list SUITE'].",
        action="store_true", default=False, dest="tasks" )

( options, args ) = parser.parse_args()

# TODO - check db owner still is (or should be?) passed through to taskdefs:
owner = options.db_owner

suite, suiterc, junk = parser.get_suite()

if options.markup:
    prefix = '!cylc!'
else:
    prefix = ''

try:
    config = config( suite, suiterc, 
            template_vars=options.templatevars,
            template_vars_file=options.templatevars_file,
            owner=owner )
    if options.tasks:
        for task in config.get_task_name_list():
            print prefix + task
    elif options.alltasks:
        for task in config.get_task_name_list():
            items = [ '[runtime]['+task+']'+i for i in options.item ]
            print prefix+task,
            config.pcfg.idump( items, options.sparse, options.pnative, prefix, options.oneline, none_str=options.none_str )
    else:
        config.pcfg.idump( options.item, options.sparse, options.pnative, prefix, options.oneline, none_str=options.none_str )

except Exception,x:
    if cylc.flags.debug:
        raise
    raise SystemExit(x)

