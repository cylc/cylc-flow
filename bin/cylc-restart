#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from datetime import datetime
import os, re
from cylc.config import TaskNotDefinedError
from cylc.CylcOptionParsers import cop
from cylc.cycle_time import ct
from cylc.scheduler import scheduler
from cylc.task_state import task_state
from cylc.run import main
from cylc.command_prep import prep_file
from cylc.TaskID import TaskID

class restart( scheduler ):
    def __init__( self ):
        usage = """cylc [control] restart [OPTIONS] ARGS

Restart a suite from a previous state. To start from scratch see the
'cylc run' command.

Suites run in daemon mode unless -n/--no-detach or --debug is used.

The most recent previous state is loaded by default, but other states
can be specified on the command line (cylc writes special state dumps
and logs their filenames before actioning intervention commands).

Tasks recorded as 'submitted' or 'running' will be polled to determine
where they got to while the suite was down."""

        self.parser = cop( usage, jset=True, argdoc=[("REG", "Suite name"),
   ( "[FILE]", """Optional state dump file, assumed to reside in the
                        suite state dump directory unless an absolute path
                        is given. Defaults to the most recent suite state.""")])

        self.parser.add_option( "--non-daemon",
                help="(deprecated: use --no-detach)",
                action="store_true", default=False, dest="no_detach" )

        self.parser.add_option( "-n", "--no-detach",
                help="Do not daemonize the suite",
                action="store_true", default=False, dest="no_detach" )

        self.parser.add_option( "--profile",
                help="Output profiling (performance) information",
                action="store_true", default=False, dest="profile_mode" )

        self.parser.add_option( "--ignore-final-cycle",
            help="Ignore the final cycle time in the state dump. If one is"
            "specified in the suite definition it will be used, however.",
            action="store_true", default=False, dest="ignore_stopcycle" )

        self.parser.add_option( "--ignore-initial-cycle",
            help="Ignore the initial cycle time in the state dump. If one is "
            "specified in the suite definition it will be used, however. In a "
            "restart this is only used to set $CYLC_SUITE_INITIAL_CYCLE_TIME.",
            action="store_true", default=False, dest="ignore_startcycle" )

        scheduler.__init__( self, is_restart=True )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()

        self.suite, self.suiterc = prep_file( self.args[0], self.options ).execute()

        self.suite_dir = os.path.dirname( self.suiterc )

        # For user-defined job submission methods:
        sys.path.append( os.path.join( self.suite_dir, 'python' ))

        self.restart_from = None
        if len( self.args ) == 2:
            self.restart_from = self.args[1]
            try:
                ct( self.restart_from )
            except:
                pass
            else:
                # user must have meant to cold or warm start, not restart.
                sys.exit("ERROR: restart dump filename is a valid cycle time!")

        scheduler.parse_commandline( self )

    def load_tasks( self ):

        # FIND THE INITIAL STATE DUMP FILE
        base_name = self.state_dumper.BASE_NAME
        file_name = base_name
        dir_name = self.state_dumper.dir_name
        if self.restart_from:
            file_name = self.restart_from
        if not os.path.isfile(file_name) and not os.path.isabs(file_name):
            file_name = os.path.join(dir_name, file_name)
        if not os.path.isfile(file_name):
            raise Exception("state dump file not found: " + file_name)

        file_name = os.path.realpath(file_name)
        self.log.info( 'Restart ' + file_name )
        src_name = file_name
        if os.path.realpath(dir_name) == os.path.dirname(file_name):
            src_name = os.path.basename(file_name)
        now_str = datetime.utcnow().strftime("%Y%m%dT%H%M%S.%fZ")
        lnk_name = os.path.join(dir_name, base_name + "-restart." + now_str)
        os.symlink(src_name, lnk_name)

        # The state dump file format is:
        # run mode : <mode> 
        # time : <time>
        # class <classname>: item1=value1, item2=value2, ...
        # <task_id> : <state>
        # <task_id> : <state>
        #   ...
        # task <state> format is defined by task_state.dump()

        try:
            FILE = open( file_name, 'r' )
        except IOError,x:
            print >> sys.stderr, x
            raise Exception( "ERROR, cannot open suite state dump: " + file_name )
        lines = FILE.readlines()
        FILE.close()

        nlines = len(lines)
        if nlines == 0:
            raise Exception( "ERROR, empty suite state dump: " + file_name )
        elif nlines < 3:
            print >> sys.stderr, "ERROR, The suite state dump contains only", nlines, "lines:"
            for l in lines:
                print ' ', l.rstrip()
            raise Exception( "ERROR, incomplete suite state dump: " + file_name )

        index = 0
        # run mode : <mode>
        line0 = lines[index].rstrip()
        if line0.startswith( 'suite time' ):
            # backward compatibility for pre-5.4.11 state dumps
            old_run_mode = 'live'
        elif line0.startswith( 'simulation time' ):
            # backward compatibility for pre-5.4.11 state dumps
            old_run_mode = 'simulation'
        else:
            # current state dumps
            old_run_mode = line0.split(' : ')[1]
            index += 1
            # time : <time> (not used here)

        if self.run_mode == 'live' and old_run_mode != 'live':
            raise Exception("ERROR: cannot RESTART in " + self.run_mode + " from a " + old_run_mode + " state dump")
  
        index += 1
        line2 = lines[index]
        line2 = line2.rstrip()
        try:
            label, oldstartcycle = line2.split(' : ')
        except ValueError, x:
            print >> sys.stderr, 'ERROR, Illegal state dump line 2 (initial cycle):'
            print >> sys.stderr, ' ', line2
            raise Exception("ERROR: corrupted state dump")
        if oldstartcycle == '(none)':
            # then we take whatever the suite.rc file gives us
            pass
        else:
            # the state dump prescribes a start cycle
            try:
                ct( oldstartcycle )
            except:
                raise Exception("ERROR, Illegal start cycle in state dump line 2: " + oldstartcycle)
            if self.options.ignore_startcycle:
                # ignore it and take whatever the suite.rc file gives us
                if self.start_tag:
                    print >> sys.stderr, """WARNING: I'm ignoring the old initial cycle as requested, but I
  can't ignore the one set in the suite definition."""
            elif self.start_tag:
                # a start cycle was given in the suite.rc file
                if self.start_tag != oldstartcycle:
                    # the state dump doesn't lie about start cycles
                    if self.options.ignore_startcycle:
                        print >> sys.stderr, "WARNING: ignoring old initial cycle", oldstartcycle, "; using suite.rc", self.start_tag
                    else:
                        print >> sys.stderr, "WARNING: old initial cycle", oldstartcycle, "overriding suite.rc", self.start_tag
                        self.start_tag = oldstartcycle
            else:
                # reinstate the former start cycle
                self.start_tag = oldstartcycle

        index += 1
        line3 = lines[index]
        line3 = line3.rstrip()
        try:
            label, oldstopcycle = line3.split(' : ')
        except ValueError, x:
            print >> sys.stderr, 'ERROR, Illegal state dump line 3 (final cycle):'
            print >> sys.stderr, ' ', line3
            raise Exception("ERROR: corrupted state dump")

        if oldstopcycle == '(none)':
            # then we take whatever the command line or suite.rc file gives us
            pass
        else:
            # the state dump prescribes a stop cycle
            try:
                ct( oldstopcycle )
            except:
                raise Exception("ERROR, Illegal stop cycle in state dump line 3: " + oldstopcycle)
            if self.options.ignore_stopcycle:
                # ignore it and take whatever the command line or suite.rc file gives us
                if self.stop_tag:
                    print >> sys.stderr, """WARNING: I'm ignoring the old final cycle as requested, but I
  can't ignore the one set on the command line or in the suite definition."""
            elif self.stop_tag:
                # a stop cycle was given on the restart command line or suite.rc file
                if self.stop_tag != oldstopcycle:
                    print >> sys.stderr, "WARNING: overriding the old stop cycle", oldstopcycle, "with", self.stop_tag
            else:
                # reinstate the old stop cycle
                self.stop_tag = oldstopcycle

        # broadcast variables (universal):
        index += 1

        pickled = ""
        while True:
            pickled += lines[index]
            if pickled.endswith(".\n"):
                # every pickle stream ends with a period
                break
            index += 1
        self.wireless.load( pickled )

        index += 1
        line = lines[index].rstrip()
        if line != 'Begin task states':
            raise Exception("ERROR, illegal state dump line (expected 'Begin task states'): " + line )

        index += 1

        # parse each line and create the task it represents
        tasknames = {}
        taskstates = {}
        for line in lines[index:]:
            # strip trailing newlines
            line = line.rstrip( '\n' )

            if re.match( '^class', line ):
                # class variables
                [ left, right ] = line.split( ' : ' )
                [ junk, classname ] = left.split( ' ' )
                cls = self.config.get_task_class( classname )
                pairs = right.split( ', ' )
                for pair in pairs:
                    [ item, value ] = pair.split( '=' )
                    cls.set_class_var( item, value )
                continue

            # instance variables
            try:
                ( id, state ) = line.split(' : ')
                ( name, tag ) = id.split(TaskID.DELIM)
            except:
                print >> sys.stderr, "ERROR, Illegal line in suite state dump:"
                print >> sys.stderr, " ", line
                raise Exception( "ERROR: corrupted state dump" )
            tasknames[name] = True
            if 'status=submitting,' in state:
                # backward compabitility for state dumps generated prior to #787
                state = state.replace('status=submitting,',
                                      'status=ready,', 1)
            try:
                task_state(state)
            except Exception as e:
                print >> sys.stderr, "ERROR: ", type(e).__name__, e
                raise Exception( "ERROR: corrupted state dump" )
            taskstates[id] = (name, tag, state )

        # RESURRECTING TASKS FROM A SUITE STATE DUMP FILE
        #
        # The current state of task prerequisites (satisfied or not) and
        # outputs (completed or not) is not recorded in the suite state
        # dump; we set them according task state (which is recorded).
        #
        # The default state of a new task proxy is 'waiting' with
        # prerequisites unsatisfied and no outputs completed.
        #
        # 'waiting'    - prerequisites and outputs unsatisified (the default)
        # 'held'       - ditto (only waiting tasks can be held)
        # 'runahead'   - ditto (runahead tasks are waiting tasks on hold)
        #
        # 'queued'     - prerequisites satisfied, outputs not completed
        #                 (only tasks ready to run can get queued)
        # 'ready'      - ditto
        # 'submitted'  - ditto (but see *)
        # 'submit-retrying' - ditto
        # 'running'    - ditto (but see *)
        # 'failed'     - ditto (tasks must run in order to fail)
        # 'retrying'   - ditto (tasks must fail in order to retry)
        # 'succeeded'  - prerequisites satisfied, outputs completed
        #
        # (*) HOWEVER, tasks reloaded with 'submitted' or 'running' are
        # now polled by cylc to determine what their current status is.
        # The two 'retrying' states are held states akin to 'queued'.

        initial_task_list = tasknames.keys()
        task_list = self.filter_initial_task_list( initial_task_list )

        print "RELOADING task proxies"

        for id in taskstates:
            name, tag, state = taskstates[id]
            if name not in task_list:
                continue

            print " +", id

            try:
                # startup is True only for a cold start
                itask = self.config.get_task_proxy( name, tag, state, stopctime=None, startup=False, submit_num=self.db.get_task_current_submit_num(name, tag), exists=self.db.get_task_state_exists(name, tag) )
            except TaskNotDefinedError, x:
                print >> sys.stderr, str(x)
                print >> sys.stderr, "WARNING: ignoring task", name, "from the suite state dump file"
                print >> sys.stderr, "(the task definition has probably been deleted from the suite)."
                continue
            except Exception, x:
                print >> sys.stderr, str(x)
                print >> sys.stderr, "ERROR: could not load task", name, "from the suite state dump file"
                # TODO: Is it safe to have "raise x" here?
                continue

            # see comments above on resurrecting tasks

            # TODO - we should probably use the task.reset_state()
            # methods here, to update the rundb too...

            print "  ", itask.state.get_status()

            if itask.state.is_currently('waiting', 'runahead'):
                pass

            elif itask.state.is_currently('held'):
                # Only waiting tasks get held. These need to be released
                # on restart to avoid the automatic shutdown criterion:
                # if all tasks are succeeded or held (e.g. because they
                # passed the final cycle time) shut down automatically.
                itask.state.set_status('waiting')

            elif itask.state.is_currently('submitted', 'running'):
                itask.prerequisites.set_all_satisfied()
                # get user_at_host from run-db
                user_at_host = None
                row = self.db.get_task_location(name, tag)
                if row and row[0]:
                    user_at_host = row[0]
                    self.old_user_at_host_set.add(str(user_at_host))
                else:
                    print >> sys.stderr, "WARNING:", id, "failed to read user@host from run-db!"

                # get submit_method_id and try_num from run-db
                submit_method_id = try_num = None
                row = self.db.get_task_sumbit_method_id_and_try(name, tag)
                if row and row[0]:
                    submit_method_id, try_num = row
                else:
                    print >> sys.stderr, "WARNING:", id, "failed to read submit_method_id and try_num from run-db!"

                if None in [ user_at_host, submit_method_id, try_num ]:
                    print >> sys.stderr, "WARNING: cannot determine what happened to " + id
                else:
                    # update the task proxy with submit ID etc.
                    itask.submit_method_id = submit_method_id
                    itask.try_number = try_num
                    itask.user_at_host = user_at_host
                    # poll the task
                    itask.poll()
                    # update poll timers in case regular polling is configured for itask
                    if '@' in user_at_host:
                        owner, host = user_at_host.split('@')
                    else:
                        host = user_at_host
                    itask.submission_poll_timer.set_host( host, set_timer=True )
                    itask.execution_poll_timer.set_host( host, set_timer=True )

            elif itask.state.is_currently( 'queued', 'ready','submit-retrying', 'submit-failed', 'retrying', 'failed'):
                itask.prerequisites.set_all_satisfied()
                if not itask.state.is_currently( 'failed', 'submit-failed' ):
                    # reset to waiting as these had not been submitted yet.
                    itask.state.set_status('waiting')

            elif itask.state.is_currently('succeeded'):
                itask.prerequisites.set_all_satisfied()
                itask.outputs.set_all_completed()

            else:
                raise Exception( 'ERROR: unknown task state for ' + itask.id )

            # check stop cycle in case the user has set a very quick stop
            if self.stop_tag and int( itask.tag ) > int( self.stop_tag ):
                # we've reached the stop cycle already: delete the new task
                itask.log( 'WARNING', "HOLDING at configured stop cycle " + self.stop_tag )
                itask.state.set_status('held')
            self.pool.add( itask )


if __name__ == '__main__':
    main("restart", restart)

