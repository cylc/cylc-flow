#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys, re
from cylc.CylcOptionParsers import NoPromptOptionParser
from cylc.cycle_time import ct, CycleTimeError
from cylc.scheduler import scheduler
from cylc.run import main, set_main_debug

class restart( scheduler ):
    def __init__( self ):
        usage = """cylc [control] restart [options] SUITE [FILE]

Restart a cylc suite from a previous state.
(To start a suite from a specific cycle time, see 'cylc run SUITE').

The most recent previous state is used by default but other state dumps
can be specified on the command line (e.g. cylc writes a special state
dump and logs its filename before actioning any intervention command).

By default:
 1/ 'submitted', 'running', or 'failed' states will be resubmitted.
     Use '--no-reset' to prevent this.
 2/ 'held' tasks will be released.
    Use '--no-release' to prevent this.
 3/ A final cycle time set prior to shutdown will be ignored on restart.
    Use '--keep-stopcycle' to prevent this.

NOTE: daemonize important suites with the POSIX nohup command:
    nohup cylc [con] restart SUITE > suite.out 2> suite.err &
    
NOTE: suites can be (re)started on remote hosts or other user accounts
if passwordless ssh is set up. The ssh tunnel will remain open to
receive the suite stdout and stderr streams. To control the running 
suite from the local host requires the suite passphrase to be installed.
If they exist /etc/profile and $HOME/.profile will be sourced on the
remote host prior to attempting to run the suite."""

        self.parser = NoPromptOptionParser( usage,
   ["""FILE                 Optional non-default state dump file (assumed to
                        reside in the suite state dump directory unless
                        you give the full path)."""]) 

        self.parser.add_option( "--no-reset", 
            help="Do not reset failed tasks to ready on restarting",
            action="store_true", default=False, dest="no_reset" )
        self.parser.add_option( "--no-release", 
            help="Do not release held tasks on restarting.",
            action="store_true", default=False, dest="no_release" )
        self.parser.add_option( "--keep-stopcycle", 
            help="Do not ignore a previously set final cycle time on restarting",
            action="store_true", default=False, dest="keep_stopcycle" )
 
        self.start_time = None  # used in scheduler.py:initialize_graph()
        scheduler.__init__( self, is_restart=True )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()
        self.no_reset = False
        #DISABLED if self.options.no_reset or self.options.practice_mode:
        if self.options.no_reset:
            self.no_reset = True
        self.restart_from = None
        if len( self.args ) == 2:
            self.restart_from = self.args[1]
            try:
                ct( self.restart_from )
            except:
                pass
            else:
                # user must have meant to cold or warm start, not restart.
                raise SystemExit("ERROR: restart dump filename is a valid cycle time!")

        scheduler.parse_commandline( self )

        set_main_debug( self.options.debug )

        if self.restart_from:
            self.banner['RESTART'] = self.restart_from
        else:
            self.banner['RESTART' ] = 'state'

    def load_tasks( self ):
        # FIND THE INITIAL STATE DUMP FILE
        #DISABLED if self.practice:
        #DISABLED     # in practice mode, we reset from the parent suite's state dump
        #DISABLED     state_dump_dir = re.sub( '-practice', '', self.state_dump_dir )
        #DISABLED     state_dump_file = re.sub( '-practice', '', self.state_dump_filename )
        #DISABLED else:
        state_dump_dir = self.state_dump_dir
        state_dump_file = self.state_dump_filename

        if self.restart_from:
            # user specified the initial state dump
            path = self.restart_from
            if os.path.exists( path ):
                # relative or full path was specified
                self.initial_state_dump = os.path.abspath( path )
            else:
                # check if the named file is in the suite state dump dir
                path = os.path.join( state_dump_dir, self.restart_from )
                if not os.path.exists( path ):
                    raise SystemExit( "state dump file not found: " + self.restart_from )
                self.initial_state_dump = os.path.abspath( path )
        else:
            # No state dump file specified, restart from the default file.
            if not os.path.exists( state_dump_file ):
                raise SystemExit( "state dump file not found: " + state_dump_file )
            self.initial_state_dump = state_dump_file

        self.log.info( 'Restart ' + self.initial_state_dump )

        # The state dump file format is:
        # suite time : <time>
        #   OR
        # simulation time : <time>,rate
        #   THEN
        # class <classname>: item1=value1, item2=value2, ... 
        # <task_id> : <state>
        # <task_id> : <state>
        #   ...
        # The time format is defined by the clock.reset()
        # task <state> format is defined by task_state.dump()

        try:
            FILE = open( self.initial_state_dump, 'r' )
        except IOError,x:
            print >> sys.stderr, x
            raise SystemExit( "ERROR, cannot open suite state dump: " + self.initial_state_dump )
        lines = FILE.readlines()
        FILE.close()

        nlines = len(lines)
        if nlines == 0:
            raise SystemExit( "ERROR, empty suite state dump: " + self.initial_state_dump )
        elif nlines < 3:
            print >> sys.stderr, "!!! The suite state dump contains only", nlines, "lines:"
            for l in lines:
                print ' ', l.rstrip()
            raise SystemExit( "ERROR, incomplete suite state dump: " + self.initial_state_dump )

        # RESET THE TIME TO THE LATEST DUMPED TIME
        # The state dump file first line is:
        # suite time : <time>
        #   OR
        # simulation time : <time>,rate
        line1 = lines[0]
        line1 = line1.rstrip()
        [ time_type, time_string ] = line1.split(' : ')
        if time_type == 'simulation time':
            if not self.simulation_mode:
                raise SystemExit("ERROR: cannot RESTART in live mode from a simulation mode state dump")
            [ time, rate ] = time_string.split( ',' )
            self.clock.reset( time, rate )
        elif time_type == 'suite time':
            if self.simulation_mode:
                raise SystemExit("ERROR: cannot RESTART in simulation mode from a live mode state dump")
        else:
            print >> sys.stderr, "!!! Illegal state dump line 1 (time):"
            print >> sys.stderr, ' ', line1
            raise SystemExit("ERROR: corrupted state dump")

        line2 = lines[1]
        line2 = line2.rstrip()
        try:
            label, oldstoptime = line2.split(' : ')
        except ValueError, x: 
            print >> sys.stderr, '!!! Illegal state dump line 2 (stop time):'
            print >> sys.stderr, ' ', line2
            raise SystemExit("ERROR: corrupted state dump")
        if oldstoptime == '(none)':
            pass
        else:
            try:
                ct( oldstoptime )
            except:
                raise SystemExit("ERROR, Illegal stop cycle in state dump line 2: " + oldstoptime)

            # the suite had a prescribed stop time when it shut down
            if self.stop_time:
                # a stop time was given on the restart command line
                if self.stop_time != oldstoptime:
                    # OK, override the old stop time with the new
                    if self.options.keep_stopcycle:
                        print >> sys.stderr, "ERROR: new stop time incompatible with --keep-stopcycle"
                        sys.exit(1)
            elif self.options.keep_stopcycle:
                    # reinstate the former stop time
                    self.stop_time = oldstoptime
        
        # parse each line and create the task it represents
        tasknames = {}
        taskstates = {}
        for line in lines[2:]:
            # strip trailing newlines
            line = line.rstrip( '\n' )

            if re.match( '^class', line ):
                # class variables
                [ left, right ] = line.split( ' : ' )
                [ junk, classname ] = left.split( ' ' ) 
                cls = self.config.get_task_class( classname )
                pairs = right.split( ', ' )
                for pair in pairs:
                    [ item, value ] = pair.split( '=' )
                    cls.set_class_var( item, value )
                continue

            # instance variables
            try:
                ( id, state ) = line.split(' : ')
                ( name, tag ) = id.split('%')
            except:
                print >> sys.stderr, "!!! Illegal line in suite state dump:"
                print >> sys.stderr, " ", line
                raise SystemExit( "ERROR: corrupted state dump" )
            tasknames[name] = True
            taskstates[id] = (name, tag, state )

        initial_task_list = tasknames.keys()
        task_list = self.filter_initial_task_list( initial_task_list )

        for id in taskstates:
            name, tag, state = taskstates[id]
            if name not in task_list:
                continue

            # startup=True only for cold start
            try:
                itask = self.config.get_task_proxy( name, tag, state, stopctime=None, startup=False )
            except Exception, x:
                print >> sys.stderr, x
                print >> sys.stderr, "!!! Unable to instantiate task", name, "from state dump."
                raise SystemExit( "ERROR: corrupted state dump" )

            if itask.state.is_succeeded():  
                # must have satisfied prerequisites and completed outputs
                itask.log( 'NORMAL', "starting in SUCCEEDED state" )
                itask.prerequisites.set_all_satisfied()
                itask.outputs.set_all_completed()

            elif itask.state.is_submitted() or itask.state.is_running():  
                # Must have satisfied prerequisites. These tasks may have
                # finished after the suite was shut down, but as we
                # can't know that for sure we have to re-submit them.
                itask.log( 'NORMAL', "starting in READY state" )
                itask.state.set_status( 'waiting' )
                itask.prerequisites.set_all_satisfied()

            elif itask.state.is_failed():
                # Re-submit these unless the suite operator says not to. 
                if self.no_reset:
                    itask.log( 'WARNING', "starting in FAILED state: manual reset required" )
                    itask.prerequisites.set_all_satisfied()
                else:
                    itask.log( 'NORMAL', "starting in READY state" )
                    itask.state.set_status( 'waiting' )
                    itask.prerequisites.set_all_satisfied()

            elif itask.state.is_held() and not self.options.no_release:
                # Release held tasks unless told not to do so. 
                itask.log( 'NORMAL', "releasing from HELD state" )
                itask.state.set_status( 'waiting' )
                itask.prerequisites.set_all_unsatisfied()

            # check stop time in case the user has set a very quick stop
            if self.stop_time and int( itask.tag ) > int( self.stop_time ):
                # we've reached the stop time already: delete the new task 
                itask.log( 'WARNING', "HOLDING at configured stop time " + self.stop_time )
                itask.state.set_status('held')
            self.pool.add( itask )

if __name__ == '__main__':
    main("restart", restart)
