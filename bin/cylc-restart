#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc [control] restart [OPTIONS] ARGS

Start a suite run from a previous state. To start from scratch (cold or warm
start) see the 'cylc run' command.

The scheduler runs in daemon mode unless you specify n/--no-detach or --debug.

The most recent previous suite state is loaded by default, but earlier state
files in the suite state directory can be specified on the command line.

Tasks recorded as 'submitted' or 'running' will be polled at start-up to
determine what happened to them while the suite was down."""

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os
import re
from datetime import datetime

from cylc.config import SuiteConfig, TaskNotDefinedError
from cylc.CylcOptionParsers import cop
from cylc.scheduler import scheduler
from cylc.suite_state_dumping import SuiteStateDumper
from cylc.task_state import task_state
from cylc.run import main
from cylc.get_task_proxy import get_task_proxy
from cylc.registration import localdb
from cylc.task_id import TaskID
from cylc.cycling.loader import get_point, DefaultCycler, ISO8601_CYCLING_TYPE
from cylc.wallclock import get_current_time_string
from cylc.network.suite_broadcast import BroadcastServer


class restart(scheduler):
    def __init__(self):

        self.parser = cop(
            __doc__, jset=True,
            argdoc=[
                ("REG", "Suite name"),
                ("[FILE]", """Optional state dump, assumed to reside in the
                        suite state dump directory unless an absolute path
                        is given. Defaults to the most recent suite state.""")
            ]
        )

        self.parser.add_option(
            "--non-daemon", help="(deprecated: use --no-detach)",
            action="store_true", default=False, dest="no_detach")

        self.parser.add_option(
            "-n", "--no-detach", help="Do not daemonize the suite",
            action="store_true", default=False, dest="no_detach")

        self.parser.add_option(
            "--profile", help="Output profiling (performance) information",
            action="store_true", default=False, dest="profile_mode")

        self.parser.add_option(
            "--ignore-final-cycle-point",
            help="Ignore the final cycle point in the state dump. If one is"
                 "specified in the suite definition it will be used, however.",
            action="store_true", default=False, dest="ignore_stop_point")

        self.parser.add_option(
            "--ignore-initial-cycle-point",
            help="Ignore the initial cycle point in the state dump. If one is "
                 "specified in the suite definition it will be used, however.",
            action="store_true", default=False, dest="ignore_start_point")

        scheduler.__init__(self, is_restart=True)

    def parse_commandline(self):
        (self.options, self.args) = self.parser.parse_args()
        self.suite = self.args[0]
        self.suiterc = localdb(self.options.db).get_suiterc(self.suite)
        self.suite_dir = os.path.dirname(self.suiterc)

        # For user-defined job submission methods:
        sys.path.append(os.path.join(self.suite_dir, 'python'))

        self.restart_from = None
        if len(self.args) == 2:
            self.restart_from = self.args[1]

        scheduler.parse_commandline(self)

    def get_state_initial_point_string(self):
        """Return the initial point string from the state file, if any."""
        return self.get_state_file_info()[0]

    def get_state_file_path(self):
        """Return the state file path that we are restarting from."""
        my_dumper = self.state_dumper
        if my_dumper is None:
            my_dumper = SuiteStateDumper(self.suite)
        base_name = my_dumper.BASE_NAME
        file_name = base_name
        dir_name = my_dumper.dir_name
        if self.restart_from and os.path.isabs(self.restart_from):
            file_name = self.restart_from
        elif self.restart_from:
            file_name = os.path.join(dir_name, self.restart_from)
        else:
            file_name = os.path.join(dir_name, file_name)
        if not os.path.isfile(file_name):
            raise Exception("state dump file not found: " + file_name)
        return os.path.realpath(file_name)

    def get_state_file_info(self):
        """Return the state file start & stop strings, broadcast, tasks.

        The state dump file format is:
        run mode : <mode>
        time : <time> (<unix time>)
        initial cycle : 2014050100
        final cycle : None
        (dp1   # (Broadcast pickle string)
        .      # (Broadcast pickle string)
        Begin task states
        <task_id> : <state>
        <task_id> : <state>
          ...
        task <state> format is defined by task_state.dump()

        """
        file_name = self.get_state_file_path()
        try:
            FILE = open(file_name, 'r')
        except IOError as exc:
            print >> sys.stderr, str(exc)
            raise Exception(
                "ERROR, cannot open suite state dump: %s" % file_name)
        lines = FILE.readlines()
        FILE.close()

        nlines = len(lines)
        if nlines == 0:
            raise Exception("ERROR, empty suite state dump: %s" % file_name)
        elif nlines < 3:
            print >> sys.stderr, (
                "ERROR, The suite state dump contains only %d lines" % nlines)
            for l in lines:
                print ' ', l.rstrip()
            raise Exception(
                "ERROR, incomplete suite state dump: %s" % file_name)

        index = 0
        # run mode : <mode>
        line0 = lines[index].rstrip()
        if line0.startswith('suite time'):
            # backward compatibility for pre-5.4.11 state dumps
            old_run_mode = 'live'
        elif line0.startswith('simulation time'):
            # backward compatibility for pre-5.4.11 state dumps
            old_run_mode = 'simulation'
        else:
            # current state dumps
            old_run_mode = line0.split(' : ')[1]
            index += 1
            # time : <time> (not used here)

        if self.run_mode == 'live' and old_run_mode != 'live':
            raise Exception(
                "ERROR: cannot RESTART in %s from a %s state dump" % (
                    self.run_mode, old_run_mode))

        state_start_string = None
        index += 1
        line2 = lines[index]
        line2 = line2.rstrip()
        try:
            label, oldstartcycle = line2.split(' : ')
        except ValueError, x:
            print >> sys.stderr, (
                'ERROR, Illegal state dump line 2 (initial cycle):')
            print >> sys.stderr, ' ', line2
            raise Exception("ERROR: corrupted state dump")
        if oldstartcycle != 'None':
            state_start_string = oldstartcycle

        state_stop_string = None
        index += 1
        line3 = lines[index]
        line3 = line3.rstrip()
        try:
            label, oldstopcycle = line3.split(' : ')
        except ValueError, x:
            print >> sys.stderr, (
                'ERROR, Illegal state dump line 3 (final cycle):')
            print >> sys.stderr, ' ', line3
            raise Exception("ERROR: corrupted state dump")

        if oldstopcycle != 'None':
            state_stop_string = oldstopcycle

        # broadcast variables (universal):
        index += 1

        pickled_broadcast = ""
        while True:
            pickled_broadcast += lines[index]
            if pickled_broadcast.endswith(".\n"):
                # every pickle stream ends with a period
                break
            index += 1

        index += 1
        line = lines[index].rstrip()
        if line != 'Begin task states':
            raise Exception(
                "ERROR, illegal state dump line " +
                "(expected 'Begin task states'): %s" % line
            )

        index += 1

        task_lines = []
        for line in lines[index:]:
            # strip trailing newlines
            task_lines.append(line.rstrip('\n'))
        return (state_start_string, state_stop_string,
                pickled_broadcast, task_lines)

    def load_tasks(self):

        # FIND THE INITIAL STATE DUMP FILE
        base_name = self.state_dumper.BASE_NAME
        dir_name = self.state_dumper.dir_name
        file_name = self.get_state_file_path()

        self.log.info('Restart ' + file_name)
        src_name = file_name
        if os.path.realpath(dir_name) == os.path.dirname(file_name):
            src_name = os.path.basename(file_name)
        now_str = get_current_time_string(use_basic_format=True)
        lnk_name = os.path.join(dir_name, base_name + "-restart." + now_str)
        os.symlink(src_name, lnk_name)

        state_start_string, state_stop_string, broadcast, task_lines = (
            self.get_state_file_info())

        if state_start_string is not None:
            # the state dump prescribes a start cycle
            # (else we take whatever the suite.rc file gives us)
            state_start_point = get_point(state_start_string)
            if self.options.ignore_start_point:
                # ignore it and take whatever the suite.rc file gives us
                if self.start_point is not None:
                    print >> sys.stderr, """WARNING: I'm ignoring the old initial cycle point as requested, but I
  can't ignore the one set in the suite definition."""
            elif self.start_point is not None:
                # a start cycle was given in the suite.rc file
                if self.start_point != state_start_point:
                    # the state dump doesn't lie about start cycles
                    if self.options.ignore_startcycle:
                        print >> sys.stderr, (
                            "WARNING: ignoring old initial cycle point" +
                            "%s; using suite.rc %s" % (
                                state_start_point, self.start_point)
                        )
                    else:
                        print >> sys.stderr, (
                            "WARNING: old initial cycle point" +
                            "%s, overriding suite.rc %s" % (
                                state_start_point, self.start_point)
                        )
                        self.start_point = state_start_point
            else:
                # reinstate the former start cycle
                self.start_point = state_start_point

        if state_stop_string is not None:
            # the state dump prescribes a stop cycle
            # (else take whatever the command line or suite.rc file gives us)
            state_stop_point = get_point(state_stop_string)
            if self.options.ignore_stop_point:
                # take whatever the command line or suite.rc file gives us
                if self.stop_point is not None:
                    print >> sys.stderr, (
                        """WARNING: I'm ignoring the old final cycle point as requested, but I
  can't ignore the one set on the command line or in the suite definition.""")
            elif self.stop_point is not None:
                # a stop cycle was given on the command line or suite.rc file
                if self.stop_point != state_stop_point:
                    print >> sys.stderr, (
                        "WARNING: overriding the old stop cycle point "
                        "%s with %s" % (state_stop_point, self.stop_point)
                    )
            else:
                # reinstate the old stop cycle
                self.stop_point = state_stop_point

        BroadcastServer.get_inst().load(broadcast)

        # parse each task line and create the task it represents
        tasknames = {}
        taskstates = {}
        task_point_strings = []
        for line in task_lines:
            # instance variables
            try:
                (id, state) = line.split(' : ')
                name, point_string = TaskID.split(id)
            except:
                print >> sys.stderr, "ERROR, Illegal line in suite state dump:"
                print >> sys.stderr, " ", line
                raise Exception("ERROR: corrupted state dump")
            if (point_string == "1" and
                    DefaultCycler.TYPE == ISO8601_CYCLING_TYPE):
                # A state file from a pre-cylc-6 with mixed-async graphing.
                point_string = str(self.start_point)
                new_id = TaskID.get(name, point_string)
                print >> sys.stderr, (
                    "WARNING: converting %s to %s" % (id, new_id))
                id = new_id
            tasknames[name] = True
            if 'status=submitting,' in state:
                # back compat for state dumps generated prior to #787
                state = state.replace('status=submitting,',
                                      'status=ready,', 1)
            if 'status=runahead,' in state:
                # backward compatibility for pre-cylc-6 state dumps.
                state = state.replace(
                    'status=runahead,', 'status=waiting,', 1)
            try:
                task_state(state)
            except Exception as e:
                print >> sys.stderr, "ERROR: ", type(e).__name__, e
                raise Exception("ERROR: corrupted state dump")
            taskstates[id] = (name, point_string, state)
            task_point_strings.append(point_string)

        task_point_strings = list(set(task_point_strings))

        print "LOADING data from suite db"

        task_states_data = self.pri_dao.select_task_states_by_cycles(
            ["submit_num", "try_num", "host"], task_point_strings)
        # RESURRECTING TASKS FROM A SUITE STATE DUMP FILE
        #
        # The state of task prerequisites (satisfied or not) and outputs
        # (completed or not) is determined by the recorded task state:
        #
        # 'waiting'    - prerequisites and outputs unsatisified (default)
        # 'held'       - ditto (only waiting tasks can be held)
        #
        # 'queued'     - prerequisites satisfied, outputs not completed
        #                 (only tasks ready to run can get queued)
        # 'ready'      - ditto
        # 'submitted'  - ditto (but see *)
        # 'submit-retrying' - ditto
        # 'running'    - ditto (but see *)
        # 'failed'     - ditto (tasks must run in order to fail)
        # 'retrying'   - ditto (tasks must fail in order to retry)
        # 'succeeded'  - prerequisites satisfied, outputs completed
        #
        # The two 'retrying' states are held states akin to 'queued'.
        #
        # (*) but tasks reloaded with 'submitted' or 'running' are
        # polled to determine what their current true status is.

        initial_task_list = tasknames.keys()
        task_list = self.filter_initial_task_list(initial_task_list)

        print "RELOADING task proxies"

        config = SuiteConfig.get_inst()
        for id in taskstates:
            name, point_string, state = taskstates[id]
            if name not in task_list:
                continue

            print " +", id
            task_states_datum = task_states_data.get((name, point_string))
            try:
                submit_num = task_states_datum.get("submit_num", 0)
                # startup is True only for a cold start
                itask = get_task_proxy(
                    name,
                    get_point(point_string),
                    state,
                    submit_num=submit_num,
                    is_reload=True
                )
            except TaskNotDefinedError, x:
                print >> sys.stderr, str(x)
                print >> sys.stderr, (
                    "WARNING: ignoring task %s " % name +
                    "from the suite state dump file")
                print >> sys.stderr, (
                    "(the task definition has probably been "
                    "deleted from the suite).")
                continue
            except Exception, x:
                print >> sys.stderr, str(x)
                print >> sys.stderr, (
                    "ERROR: could not load task %s " % name +
                    "from the suite state dump file"
                )
                # TODO: Is it safe to have "raise x" here?
                continue

            # see comments above on resurrecting tasks

            # TODO - we should probably use the task.reset_state()
            # methods here, to update the rundb too...

            print "  ", itask.state.get_status()

            if itask.state.is_currently('waiting'):
                pass

            elif itask.state.is_currently('held'):
                # Only waiting tasks get held. These need to be released
                # on restart to avoid the automatic shutdown criterion:
                # if all tasks are succeeded or held (e.g. because they
                # passed the final cycle point) shut down automatically.
                itask.state.set_status('waiting')

            elif itask.state.is_currently('submitted', 'running'):
                itask.prerequisites.set_all_satisfied()
                # update the task proxy with submit ID etc.
                itask.try_number = task_states_datum.get("try_num")
                itask.user_at_host = task_states_datum.get("host")
                self.old_user_at_host_set.add(itask.user_at_host)
                if itask.user_at_host is None:
                    itask.user_at_host = "localhost"
                # update timers in case regular polling is configured for itask
                if '@' in itask.user_at_host:
                    host = itask.user_at_host.split('@', 1)[1]
                else:
                    host = itask.user_at_host
                itask.submission_poll_timer.set_host(host, set_timer=True)
                itask.execution_poll_timer.set_host(host, set_timer=True)

            elif itask.state.is_currently('queued', 'ready', 'submit-retrying',
                                          'submit-failed', 'retrying',
                                          'failed'):
                itask.prerequisites.set_all_satisfied()
                if not itask.state.is_currently('failed', 'submit-failed'):
                    # reset to waiting as these had not been submitted yet.
                    itask.state.set_status('waiting')

            elif itask.state.is_currently('succeeded'):
                itask.prerequisites.set_all_satisfied()
                # TODO - just poll for outputs in the job status file.
                itask.outputs.set_all_completed()

            else:
                raise Exception(
                    'ERROR: unknown task state for %s' % itask.identity)

            self.pool.add_to_runahead_pool(itask)

        # Poll all submitted and running task jobs
        self.pool.poll_task_jobs()


if __name__ == '__main__':
    main("restart", restart)
