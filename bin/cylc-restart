#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os, re
from cylc.CylcOptionParsers import cop
from cylc.cycle_time import ct
from cylc.scheduler import scheduler
from cylc.run import main, set_main_debug
from cylc.command_prep import prep_file

class restart( scheduler ):
    def __init__( self ):
        usage = """cylc [control] restart [OPTIONS] ARGS

Restart a cylc suite from a previous state.
(To start a suite from a specific cycle time, see 'cylc run REG').

The most recent previous state is used by default but other state dumps
can be specified on the command line (e.g. cylc writes a special state
dump and logs its filename before actioning any intervention command).

By default any tasks recorded in the 'submitted', 'running', or 'failed'
states will be automatically resubmitted on restart; and any tasks in
the 'held' state will be released.

NOTE: daemonize important suites with the POSIX nohup command:
    nohup cylc [con] restart SUITE > suite.out 2> suite.err &
    
NOTE: suites can be (re)started on remote hosts or other user accounts
if passwordless ssh is set up. The ssh tunnel will remain open to
receive the suite stdout and stderr streams. To control the running 
suite from the local host requires the suite passphrase to be installed.
Both /etc/profile and $HOME/.profile, if they exist, will be sourced on
the remote host before starting the suite."""

        self.parser = cop( usage,
   argdoc=[("REG", "Suite name"),
   ( "[FILE]", """Optional state dump file, assumed to reside in the
                        suite state dump directory unless an absolute path
                        is given. Defaults to the most recent suite state.""")]) 

        self.parser.add_option( "--no-reset", 
            help="Do not reset failed tasks to ready on restarting",
            action="store_true", default=False, dest="no_reset" )

        self.parser.add_option( "--no-release", 
            help="Do not release held tasks on restarting.",
            action="store_true", default=False, dest="no_release" )

        self.parser.add_option( "--ignore-final-cycle", 
            help="Ignore the final cycle time in the state dump. If one is"
            "specified in the suite definition it will be used, however.",
            action="store_true", default=False, dest="ignore_stopcycle" )

        self.parser.add_option( "--ignore-initial-cycle", 
            help="Ignore the initial cycle time in the state dump. If one is "
            "specified in the suite definition it will be used, however. In a "
            "restart this is only used to set $CYLC_SUITE_INITIAL_CYCLE_TIME.",
            action="store_true", default=False, dest="ignore_startcycle" )

        self.parser.add_option( "--pyro-timeout", metavar='SEC',
                help="Set a Pyro network connection timeout for tasks "
                "submitted by the suite (this will override the suite "
                "default if one is configured).", action="store",
                default=None, dest="pyro_timeout" )

        self.start_tag = None  # used in scheduler.py:initialize_graph()
        scheduler.__init__( self, is_restart=True )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()

        self.suite, self.suiterc = prep_file( self.args[0], self.options ).execute()

        self.suite_dir = os.path.dirname( self.suiterc )

        self.no_reset = False
        if self.options.no_reset:
            self.no_reset = True
        self.restart_from = None
        if len( self.args ) == 2:
            self.restart_from = self.args[1]
            try:
                ct( self.restart_from )
            except:
                pass
            else:
                # user must have meant to cold or warm start, not restart.
                sys.exit("ERROR: restart dump filename is a valid cycle time!")

        scheduler.parse_commandline( self )
        self.verbose = self.options.verbose

        set_main_debug( self.options.debug )

    def load_tasks( self ):
        # FIND THE INITIAL STATE DUMP FILE
        state_dump_dir = self.state_dump_dir
        state_dump_file = self.state_dump_filename

        if self.restart_from:
            # user specified the initial state dump
            path = self.restart_from
            if os.path.exists( path ):
                # relative or full path was specified
                self.initial_state_dump = os.path.abspath( path )
            else:
                # check if the named file is in the suite state dump dir
                path = os.path.join( state_dump_dir, self.restart_from )
                if not os.path.exists( path ):
                    sys.exit( "state dump file not found: " + self.restart_from )
                self.initial_state_dump = os.path.abspath( path )
        else:
            # No state dump file specified, restart from the default file.
            if not os.path.exists( state_dump_file ):
                sys.exit( "state dump file not found: " + state_dump_file )
            self.initial_state_dump = state_dump_file

        self.log.info( 'Restart ' + self.initial_state_dump )

        # The state dump file format is:
        # suite time : <time>
        #   OR
        # simulation time : <time>,rate
        #   THEN
        # class <classname>: item1=value1, item2=value2, ... 
        # <task_id> : <state>
        # <task_id> : <state>
        #   ...
        # The time format is defined by the clock.reset()
        # task <state> format is defined by task_state.dump()

        try:
            FILE = open( self.initial_state_dump, 'r' )
        except IOError,x:
            print >> sys.stderr, x
            sys.exit( "ERROR, cannot open suite state dump: " + self.initial_state_dump )
        lines = FILE.readlines()
        FILE.close()

        nlines = len(lines)
        if nlines == 0:
            sys.exit( "ERROR, empty suite state dump: " + self.initial_state_dump )
        elif nlines < 3:
            print >> sys.stderr, "ERROR, The suite state dump contains only", nlines, "lines:"
            for l in lines:
                print ' ', l.rstrip()
            sys.exit( "ERROR, incomplete suite state dump: " + self.initial_state_dump )

        index = 0
        # RESET THE TIME TO THE LATEST DUMPED TIME
        # The state dump file first line is:
        # suite time : <time>
        #   OR
        # simulation time : <time>,rate
        line1 = lines[index]
        line1 = line1.rstrip()
        [ time_type, time_string ] = line1.split(' : ')
        if time_type == 'simulation time':
            if self.run_mode == 'live':
                sys.exit("ERROR: cannot RESTART in live mode from a non live mode state dump")
            [ time, rate ] = time_string.split( ',' )
            self.clock.reset( time, rate )
        elif time_type == 'suite time':
            if self.run_mode != 'live':
                sys.exit("ERROR: cannot RESTART in " + self.run_mode + " mode from a live mode state dump")
        else:
            print >> sys.stderr, "ERROR, Illegal state dump line 1 (time):"
            print >> sys.stderr, ' ', line1
            sys.exit("ERROR: corrupted state dump")

        index += 1
        line2 = lines[index]
        line2 = line2.rstrip()
        try:
            label, oldstartcycle = line2.split(' : ')
        except ValueError, x: 
            print >> sys.stderr, 'ERROR, Illegal state dump line 2 (initial cycle):'
            print >> sys.stderr, ' ', line2
            sys.exit("ERROR: corrupted state dump")
        if oldstartcycle == '(none)':
            # then we take whatever the suite.rc file gives us
            pass
        else:
            # the state dump prescribes a start cycle
            try:
                ct( oldstartcycle )
            except:
                sys.exit("ERROR, Illegal start cycle in state dump line 2: " + oldstartcycle)
            if self.options.ignore_startcycle:
                # ignore it and take whatever the suite.rc file gives us
                if self.start_tag:
                    print >> sys.stderr, """WARNING: I'm ignoring the old initial cycle as requested, but I 
  can't ignore the one set in the suite definition."""
            elif self.start_tag: 
                # a start cycle was given in the suite.rc file
                if self.start_tag != oldstartcycle:
                    # the state dump doesn't lie about start cycles
                    if self.options.ignore_startcycle:
                        print >> sys.stderr, "WARNING: ignoring old initial cycle", oldstartcycle, "; using suite.rc", self.start_tag
                    else:
                        print >> sys.stderr, "WARNING: old initial cycle", oldstartcycle, "overriding suite.rc", self.start_tag
            else:
                # reinstate the former start cycle
                self.start_tag = oldstartcycle
 
        self.ict = self.start_tag

        index += 1
        line3 = lines[index]
        line3 = line3.rstrip()
        try:
            label, oldstopcycle = line3.split(' : ')
        except ValueError, x: 
            print >> sys.stderr, 'ERROR, Illegal state dump line 3 (final cycle):'
            print >> sys.stderr, ' ', line3
            sys.exit("ERROR: corrupted state dump")

        if oldstopcycle == '(none)':
            # then we take whatever the command line or suite.rc file gives us
            pass
        else:
            # the state dump prescribes a stop cycle
            try:
                ct( oldstopcycle )
            except:
                sys.exit("ERROR, Illegal stop cycle in state dump line 3: " + oldstopcycle)
            if self.options.ignore_stopcycle:
                # ignore it and take whatever the command line or suite.rc file gives us
                if self.stop_tag:
                    print >> sys.stderr, """WARNING: I'm ignoring the old final cycle as requested, but I
  can't ignore the one set on the command line or in the suite definition."""
            elif self.stop_tag:
                # a stop cycle was given on the restart command line or suite.rc file
                if self.stop_tag != oldstopcycle:
                    print >> sys.stderr, "WARNING: overriding the old stop cycle", oldstopcycle, "with", self.stop_tag
            else:
                # reinstate the old stop cycle
                self.stop_tag = oldstopcycle
        
        # broadcast variables (universal):
        index += 1
        
        pickled = ""
        while True:
            pickled += lines[index]
            if pickled.endswith(".\n"):
                # every pickle stream ends with a period
                break
            index += 1
        self.wireless.load( pickled )

        index += 1
        line = lines[index].rstrip() 
        if line != 'Begin task states':
            sys.exit("ERROR, illegal state dump line (expected 'Begin task states'): " + line )

        index += 1

        # parse each line and create the task it represents
        tasknames = {}
        taskstates = {}
        for line in lines[index:]:
            # strip trailing newlines
            line = line.rstrip( '\n' )

            if re.match( '^class', line ):
                # class variables
                [ left, right ] = line.split( ' : ' )
                [ junk, classname ] = left.split( ' ' ) 
                cls = self.config.get_task_class( classname )
                pairs = right.split( ', ' )
                for pair in pairs:
                    [ item, value ] = pair.split( '=' )
                    cls.set_class_var( item, value )
                continue

            # instance variables
            try:
                ( id, state ) = line.split(' : ')
                ( name, tag ) = id.split('%')
            except:
                print >> sys.stderr, "ERROR, Illegal line in suite state dump:"
                print >> sys.stderr, " ", line
                sys.exit( "ERROR: corrupted state dump" )
            tasknames[name] = True
            taskstates[id] = (name, tag, state )

        initial_task_list = tasknames.keys()
        task_list = self.filter_initial_task_list( initial_task_list )

        for id in taskstates:
            name, tag, state = taskstates[id]
            if name not in task_list:
                continue

            # startup=True only for cold start
            try:
                itask = self.config.get_task_proxy( name, tag, state, stopctime=None, startup=False )
            except Exception, x:
                print >> sys.stderr, x
                print >> sys.stderr, "WARNING: ignoring task", name, "from the suite state dump file"
                print >> sys.stderr, "(the task definition has probably been deleted from the suite)."
                continue

            if itask.state.is_succeeded():  
                # must have satisfied prerequisites and completed outputs
                itask.log( 'NORMAL', "starting in SUCCEEDED state" )
                itask.prerequisites.set_all_satisfied()
                itask.outputs.set_all_completed()

            elif itask.state.is_submitted() or itask.state.is_running():  
                # Must have satisfied prerequisites. These tasks may have
                # finished after the suite was shut down, but as we
                # can't know that for sure we have to re-submit them.
                itask.log( 'NORMAL', "starting in READY state" )
                itask.state.set_status( 'waiting' )
                itask.prerequisites.set_all_satisfied()

            elif itask.state.is_failed():
                # Re-submit these unless the suite operator says not to. 
                if self.no_reset:
                    itask.log( 'WARNING', "starting in FAILED state: manual reset required" )
                    itask.prerequisites.set_all_satisfied()
                else:
                    itask.log( 'NORMAL', "starting in READY state" )
                    itask.state.set_status( 'waiting' )
                    itask.prerequisites.set_all_satisfied()

            elif itask.state.is_held() and not self.options.no_release:
                # Release held tasks unless told not to do so. 
                itask.log( 'NORMAL', "releasing from HELD state" )
                itask.state.set_status( 'waiting' )
                itask.prerequisites.set_all_unsatisfied()

            # check stop cycle in case the user has set a very quick stop
            if self.stop_tag and int( itask.tag ) > int( self.stop_tag ):
                # we've reached the stop cycle already: delete the new task 
                itask.log( 'WARNING', "HOLDING at configured stop cycle " + self.stop_tag )
                itask.state.set_status('held')
            self.pool.add( itask )

if __name__ == '__main__':
    main("restart", restart)
