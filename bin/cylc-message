#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from optparse import OptionParser
from cylc.task_message import message

usage = """cylc [task] message [OPTIONS] MESSAGE

This command is part of the cylc task messaging interface, used by
running tasks to communicate progress to their parent suite.

Suite and task identity are determined from the task execution
environment supplied by the suite (or by the single task 'submit'
command, in which case case the message is just printed to stdout).

See also:
    cylc [task] started
    cylc [task] succeeded
    cylc [task] failed"""

parser = OptionParser( usage )

parser.add_option( "-p",
        metavar="PRIORITY", type="choice", 
        choices=[ 'NORMAL', 'WARNING', 'CRITICAL' ],
        help="message priority: NORMAL, WARNING, or CRITICAL; default NORMAL.",
        action="store", dest="priority", default="NORMAL" )

parser.add_option( "--next-restart-completed",
        help="Report next restart file(s) completed",
        action="store_true", dest="next_restart_completed" )

parser.add_option( "--all-restart-outputs-completed", 
        help="Report all restart outputs completed at once.",
        action="store_true", dest="all_restarts_completed" )

parser.add_option( "--all-outputs-completed", 
        help="Report all internal outputs completed at once.",
        action="store_true", dest="all_outputs_completed" )

parser.add_option( "-v", "--verbose",
        help="Verbose output mode.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if options.next_restart_completed:
    message(verbose=options.verbose).shortcut_next_restart()
    sys.exit(0)

elif options.all_restarts_completed:
    message(verbose=options.verbose).shortcut_all_restarts()
    sys.exit(0)

elif options.all_outputs_completed:
    message(verbose=options.verbose).shortcut_all_outputs()
    sys.exit(0)

elif len( args ) == 0:
    parser.error( "No task message supplied" )

debug = False
try:
    # from task execution environment
    if os.environ['CYLC_DEBUG'] == 'True':
        debug = True
except KeyError:
    pass

msg = ' '.join( args )
try:
    message( msg=msg, priority=options.priority, verbose=options.verbose ).send()
except Exception, x:
    print >> sys.stderr, 'ERROR: task messaging failure.'
    if debug:
        raise
    raise SystemExit(x)

