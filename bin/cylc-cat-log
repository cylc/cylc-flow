#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import re
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_file
from cylc.suite_logging import suite_log
from cylc.suite_output import suite_output

parser = cop( """cylc [info] cat-log|log [OPTIONS] ARGS 
Print and filter cylc suite (not task) log files.""" )

parser.add_option( "-l", "--location", 
        help="Print the suite log file location and exit.",
        action="store_true", default=False, dest="print_location" )

parser.add_option( "-t", "--task", 
        help="Filter the log for messages from a specific task",
        metavar="TASK", action="store", default=None, dest="taskfilter" )

parser.add_option( "-f", "--filter", 
        help="Filter the log with a Python-style regular expression "
        "e.g. '\[(foo|bar).*(started|succeeded)'",
        metavar="RE", action="store", default=None, dest="regexfilter" )

parser.add_option( "-r", "--rotation", 
        help="Rotation number (to view older, rotated logs)",
        metavar="INT", action="store", default="0", dest="rotation" )

parser.add_option( "-o", "--stdout", 
        help="Print the suite stdout log (the default is the suite event log).",
        action="store_true", default=False, dest="print_stdout" )

parser.add_option( "-e", "--stderr", 
        help="Print the suite stderr log (the default is the suite event log).",
        action="store_true", default=False, dest="print_stderr" )

( options, args ) = parser.parse_args()

suite, suiterc = prep_file( args[0], options ).execute()
owner = options.db_owner

if options.print_stdout:
    filename = suite_output( suite ).get_path()
elif options.print_stderr:
    filename = suite_output( suite ).get_path(True)
else:
    filename = suite_log( suite ).get_path()
 
if options.rotation != "0":
    filename = filename + '.' + options.rotation

if options.print_location:
    print filename
    sys.exit(0)

filter = None
if options.taskfilter:
    filter = re.compile( '\\[' + options.taskfilter + '%\d+\\]' )
elif options.regexfilter:
    filter = re.compile( options.regexfilter )

# TO DO: exception handling for large files that exceed memory capacity?
# apparently readline() one line at a time is much slower than readlines()
try:
    LOG = open( filename )
except IOError:
    raise SystemExit( "ERROR: file not found: " + filename )

lines = LOG.readlines()
LOG.close()

if filter:
    filtered = []
    for line in lines:
        if re.search( filter, line ):
            filtered.append(line)
else:
    filtered = lines

for line in filtered:
    print line.rstrip()

