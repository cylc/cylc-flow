#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
from cylc.TaskID import TaskID
from subprocess import Popen, PIPE
if remrun().execute():
    sys.exit(0)

import re, os
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_file
from cylc.rundb import CylcRuntimeDAO
from cylc.suite_logging import suite_log
from cylc.suite_output import suite_output
from cylc.cfgspec.site import sitecfg
import cylc.flags

parser = cop( """cylc [info] cat-log|log [OPTIONS] ARGS
Print various log files for suites and tasks that are currently running,
or have previously finished.""",
    argdoc=[ ("REG", "Suite name"),
    ("[TASK-ID]", """Print the stdout or stderr log
of the identified task""" )])

parser.add_option( "-l", "--location",
        help="Just print the location of the requested log file.",
        action="store_true", default=False, dest="print_location" )

parser.add_option( "-r", "--rotation",
        help="Rotation number (to view older, rotated suite logs)",
        metavar="INT", action="store", default="0", dest="rotation" )

parser.add_option( "-o", "--stdout",
        help="Print suite or task stdout logs "
        "(for suites, the default is to print the event log; "
        " for tasks, the default is to print the job script).",
        action="store_true", default=False, dest="print_stdout" )

parser.add_option( "-e", "--stderr",
        help="Print suite or task stderr logs (see --stdout for defaults).",
        action="store_true", default=False, dest="print_stderr" )

parser.add_option( "-t", "--try-number",
        help="Task try number (default 1).",
        metavar='INT', action="store", default="1", dest="tryext" )

( options, args ) = parser.parse_args()

suite, suiterc = prep_file( args[0], options ).execute()
owner = options.db_owner

if len(args) == 2:
    # task log requested
    taskid = args[1]
    logname = taskid + '.' + options.tryext

    suite_run_dir = sitecfg.get_derived_host_item(suite, 'suite run directory')
    suite_run_dao = CylcRuntimeDAO(suite_run_dir)
    taskname, ctime = taskid.split(TaskID.DELIM)
    host = suite_run_dao.get_task_host(taskname, ctime)
    suite_run_dao.close()
    owner = None
    if host and '@' in host:
        owner, host = host.split('@', 1)

    # get job log directory path
    sjld = sitecfg.get_derived_host_item( suite, 'suite job log directory',
                                       host=host, owner=owner )
    if options.print_stdout:
        fpath = os.path.join( sjld, logname + '.out' )
    elif options.print_stderr:
        fpath = os.path.join( sjld, logname + '.err' )
    else:
        fpath = os.path.join( sjld, logname )

    if host or owner:
        if host and owner:
            url = owner + '@' + host
        elif host:
            url = host
        elif owner:
            url = owner + '@localhost'

        if options.print_location:
            print url + ':' + fpath
            sys.exit(0)

        cmd = ['ssh', '-oBatchMode=yes', url, 'cat ' + fpath]
        try:
            p = Popen( cmd, stdout=PIPE, stderr=PIPE )
        except OSError, x:
            if cylc.flags.debug:
                raise
            sys.exit( x )
        out, err, = p.communicate()
        if out:
            print out
        if err:
            print err
            sys.exit(1)
        sys.exit(0)

else:
    # suite log requested
    sld = sitecfg.get_derived_host_item( suite, 'suite log directory' )
    if options.print_stdout:
        fpath = os.path.join( sld, 'out' )
    elif options.print_stderr:
        fpath = os.path.join( sld, 'err' )
    else:
        fpath = os.path.join( sld, 'log' )
        if options.rotation != "0":
            fpath += '.' + options.rotation

if options.print_location:
    print fpath
    sys.exit(0)

try:
    LOG = open( fpath )
except IOError, x:
    if cylc.flags.debug:
        raise
    sys.exit( str(x) )

try:
    # read all lines at once - fast
    lines = LOG.readlines()
    for line in lines:
        print line.rstrip()
except:
    try:
        # very large file? read one line at a time
        for line in LOG.readline():
            print line.rstrip()
    except Exception, x:
        if cylc.flags.debug:
            raise
        sys.exit(x)

LOG.close()

