#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os
from shutil import rmtree
from cylc.CylcOptionParsers import cop
from cylc.registration import localdb, RegistrationError, DatabaseLockedError

parser = cop( usage = """cylc [db] unregister [OPTIONS] ARGS

Remove one or more suites from your suite database. The REGEX pattern
must match whole suite names to avoid accidental de-registration of
partial matches (e.g. 'bar.baz' will not match 'foo.bar.baz').

Associated suite definition directories will not be deleted unless the
'-d,--delete' option is used.""",
    argdoc=[('REGEX', 'Regular expression to match suite names.')] )

parser.add_option( "-d", "--delete",
        help="Delete the suite definition directory too (!DANGEROUS!).",
        action="store_true", default=False, dest="obliterate" )

parser.add_option( "-f", "--force",
        help="Don't ask for confirmation before deleting suite definitions.",
        action="store_true", default=False, dest="force" )

parser.add_option( "--dry-run",
        help="Just show what I would do.",
        action="store_true", default=False, dest="dryrun" )

( options, args ) = parser.parse_args()

arg = args[0]

db = localdb( file=options.db, verbose=options.verbose )

try:
    if not options.dryrun:
        db.lock()
    else:
        print "This is DRY RUN - reported actions will not take effect:\n"
    db.load_from_file()
    dirs = db.unregister( arg )
    if not options.dryrun:
        db.dump_to_file()
        db.unlock()

except DatabaseLockedError, x:
    if options.debug:
        raise
    raise SystemExit(x)
except RegistrationError, x:
    print >> sys.stderr, x
    if not options.dryrun:
        db.unlock()
    if options.debug:
        raise
    sys.exit(1)
except Exception, x:
    print >> sys.stderr, 'ERROR:', x
    if not options.dryrun:
        db.unlock()
    if options.debug:
        raise
    sys.exit(1)

n = len(dirs)
if n == 0:
    print 'No suites unregistered.'
    sys.exit(0)

print len(dirs), 'suites unregistered.'

for dir in dirs:
    if dir.startswith('->'):
        # this is an alias; don't delete the original directory.
        dirs.remove( dir )

if options.obliterate and len(dirs) > 0:
    for dir in dirs:
        print 'DELETE ', dir

    if options.dryrun:
        sys.exit(0)

    really_obliterate = False
    if options.force:
        really_obliterate = True
    else:
        if len(dirs) == 1:
            words = "THIS SUITE DEFINITION"
        else:
            words = "THESE SUITE DEFINITIONS"
        response = raw_input( "DO YOU REALLY WANT TO DELETE " + words + "? (y/n) " )
        if response == 'y':
            really_obliterate = True
    if really_obliterate and len(dirs)>0:
        for dir in dirs:
            try:
                rmtree(dir)
            except OSError, x:
                print >> sys.stderr, "ERROR, could not remove directory: " + dir
                #print >> sys.stderr, x
            # recursively remove empty superdirs
            tmp = dir
            while True:
                tmp = os.path.split(tmp)[0]
                try:
                    os.rmdir(tmp)
                except OSError:
                    break
                else:
                    print 'Removed empty directory:', tmp

