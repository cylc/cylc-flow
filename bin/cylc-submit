#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import re, os, sys, logging
from time import sleep
from optparse import OptionParser
from OrderedDict import OrderedDict
from cylc.mkdir_p import mkdir_p
from cylc.execute import execute
from cylc.job_submission.job_submit import job_submit
from cylc.config import config, SuiteConfigError, TaskNotDefinedError
from cylc.registration import dbgetter, RegistrationError
from cylc import pimp_my_logger
from cylc.TaskID import TaskID, TaskIDError
from cylc.locking.suite_lock import suite_lock
from cylc.locking.lockserver import lockserver
from cylc.task_types import task
from cylc.task_types import clocktriggered
from cylc import accelerated_clock
from cylc.hostname import hostname
from cylc.port_scan import SuiteIdentificationError
from cylc.version import compat
from cylc.regpath import RegPath

usage = """cylc [task] submit|single [options] SUITE TASK

Submit a single task to run exactly as it would be submitted by its 
parent suite, in terms of both execution environment and job submission
method. This can be used as an easy way to run single tasks for any
reason, but it is particularly useful during suite development.

If the parent suite is running at the same time and it has acquired an
exclusive suite lock (which means you cannot running multiple instances
of the suite at once, even under different registrations) then the
lockserver will let you 'submit' a task from the suite only under the
same registration, and only if the task is not locked (i.e. only if 
the same task, NAME%CYCLE, is not currently running in the suite). 

Arguments:
   SUITE           Registered name of the target suite.
   TASK            Identity of the task to run (NAME%CYCLE).""" 

def commandline_parser():
    parser = OptionParser( usage )

    parser.set_defaults( sched=False, dry_run=False )

    parser.add_option( "-d", "--dry-run",
            help="Generate the cylc task execution file for the "
            "task and report how it would be submitted to run.",
            action="store_true", dest="dry_run" )

    parser.add_option( "--scheduler",
            help="(EXPERIMENTAL) tell the task to run as a scheduler task, "
            "i.e. to attempt to communicate with a task proxy in a running "
            "cylc suite (you probably do not want to do this).",
            action="store_true", dest="sched" )

    return parser

# parse command line options and arguments-----------------------------
parser = commandline_parser()
( options, args ) = parser.parse_args()

if len( args ) != 2:
    parser.error( "suite name and task ID required." )

# get input args------------------------------------------------------
reg = args[0]
task_id = args[1]

# find location of the suite definition directory --------------------
dbg = dbgetter()
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError,x:
    raise SystemExit(x)

compat( suite, suiterc ).execute( sys.argv )

suite_dir = os.path.dirname(suiterc)
# For user-defined job submission methods:
sys.path.append( os.path.join( suite_dir, 'python' ))

# check task ---------------------------------------------------------
try:
    tid = TaskID( task_id )
except TaskIDError, x:
    raise SystemExit(x)
else:
    task_name = tid.name
    ctime = tid.tag

owner = os.environ['USER']

# load suite config item --------------------------------------------
try:
    config = config( suite, suiterc )
    config.create_directories( task_name )
except SuiteConfigError,x:
    raise SystemExit(x)

# modify logging dir for single task submit so as not to alter suite logs
logging_dir = os.path.join( config['cylc']['logging']['directory'], 'submit' ) 

# create logging dir if necessary
try:
    mkdir_p( logging_dir )
except Exception,x:
    print >> sys.stderr, x
    print >> sys.stderr, 'ERROR, illegal logging directory?', logging_dir
    sys.exit(1)

use_lockserver = False
if config['cylc']['lockserver']['enable']:
    use_lockserver = True
    try:
        lockserver_port = lockserver( hostname ).get_port()
    except SuiteIdentificationError, x:
        raise SystemExit( 'Lockserver not found. See \'cylc lockserver status\'')

    # Request suite access from the lock server. If the task's parent
    # suite has an exclusive lock, we can use submit only via the
    # same suite registration. submit does not need to call
    # release_suite_access()
    if not suite_lock( suite, suite_dir, hostname, lockserver_port, 'submit' ).request_suite_access():
        raise SystemExit( 'ERROR: failed to acquire a suite lock' )

# No TASK EVENT HOOKS are set for the submit command because there is
# no scheduler instance watching for task failure etc. 

# Running in UTC time? (else just use the system clock)
utc = config['cylc']['UTC mode']
dclock = accelerated_clock.clock( None, None, utc, False ) 

# CYLC EXECUTION ENVIRONMENT
cylcenv = OrderedDict()
cylcenv[ 'CYLC_DIR' ] = os.environ[ 'CYLC_DIR' ]
if options.sched:
    cylcenv[ 'CYLC_MODE' ] = 'scheduler'
else:
    cylcenv[ 'CYLC_MODE' ] = 'submit'
cylcenv[ 'CYLC_SUITE_HOST' ] = hostname
cylcenv[ 'CYLC_SUITE_PORT' ] = 'NONE'
cylcenv[ 'CYLC_SUITE_DEF_PATH' ] =  re.sub( os.environ['HOME'], '$HOME', suite_dir )
cylcenv[ 'CYLC_SUITE_REG_NAME' ] = suite
cylcenv[ 'CYLC_SUITE_REG_PATH' ] = RegPath( suite ).get_fpath()
cylcenv[ 'CYLC_SUITE_OWNER' ] = owner
cylcenv[ 'CYLC_USE_LOCKSERVER' ] = str( use_lockserver )
if use_lockserver:
    cylcenv[ 'CYLC_LOCKSERVER_PORT' ] = str( lockserver_port )
cylcenv[ 'CYLC_UTC' ] = str(utc)
ict = config['scheduling']['initial cycle time']
fct = config['scheduling']['final cycle time'  ]
if ict:
    cylcenv[ 'CYLC_SUITE_INITIAL_CYCLE_TIME' ] = str( ict )
if fct:
    cylcenv[ 'CYLC_SUITE_FINAL_CYCLE_TIME'   ] = str( fct )

# SCHEDULER ENVIRONMENT
# Access to the suite bin directory for alert scripts executed
# by the scheduler (probably not required for single submit).
os.environ['PATH'] = suite_dir + '/bin:' + os.environ['PATH'] 
# User-defined variables in the scheduler environment
senv = config['cylc']['environment']
for var in senv:
    os.environ[var] = os.path.expandvars(senv[var])
# Also put cylcenv variables in the scheduler environment
for var in cylcenv:
    os.environ[var] = cylcenv[var]

# nasty kludge to give the simulation mode clock to task classes:
task.task.clock = dclock
clocktriggered.clocktriggered.clock = dclock
task.task.suite = suite

# create the log
log = logging.getLogger( "main" )
pimp_my_logger.pimp_it( log, logging_dir, \
        config['cylc']['logging']['roll over at start-up'], \
        logging.INFO, dclock )

job_submit.cylc_env = cylcenv

# instantiate the task--------------------------------------------------
if task_name in config.get_asynchronous_task_name_list():
    tag = '1'  # asynchronous tasks always start with tag = 1
else:
    tag = ctime
try:
    # try to get a graphed task of the given name
    task_proxy = config.get_task_proxy( task_name, tag, 'waiting', stopctime=None, startup=True )
except TaskNotDefinedError, x:
    print >> sys.stderr, 'WARNING: "' + task_name + \
            '" type and validity are not constrained by the graph.'
    print >> sys.stderr, "Continuing under the assumption that the given task ID is valid."
    try:
        # try to get an ungraphed task of the given name
        task_proxy = config.get_task_proxy_raw( task_name, tag, 'waiting', stoptag=None, startup=True )
    except TaskNotDefinedError, y:
        raise SystemExit('ERROR: task "' + task_name + '" runtime is not defined either, aborting.')

# SUBMIT THE TASK TO RUN-----------------------------------------------
if not options.dry_run:
    print "Logging directory: " + logging_dir
    print
task_proxy.run_external_task( dry_run=options.dry_run )
print
