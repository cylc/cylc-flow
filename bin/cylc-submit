#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os
import subprocess
from time import sleep
from OrderedDict import OrderedDict
from cylc.execute import execute
from cylc.job_submission import jobfile
from cylc.config import config, SuiteConfigError, TaskNotDefinedError
from cylc.CylcOptionParsers import cop
from cylc.TaskID import TaskID, TaskIDError
from cylc.locking.suite_lock import suite_lock
from cylc.locking.lockserver import lockserver
from cylc.task_types import task
from cylc.task_types import clocktriggered
from cylc import accelerated_clock
from cylc.port_scan import SuiteIdentificationError
from cylc.regpath import RegPath
from cylc.command_prep import prep_file
from cylc.suite_logging import suite_log
from cylc.global_config import gcfg
from cylc.suite_owner import username

usage = """cylc [task] submit|single [OPTIONS] ARGS

Submit a single task to run exactly as it would be submitted by its 
parent suite, in terms of both execution environment and job submission
method. This can be used as an easy way to run single tasks for any
reason, but it is particularly useful during suite development.

If the parent suite is running at the same time and it has acquired an
exclusive suite lock (which means you cannot running multiple instances
of the suite at once, even under different registrations) then the
lockserver will let you 'submit' a task from the suite only under the
same registration, and only if the task is not locked (i.e. only if 
the same task, NAME.TAG, is not currently running in the suite)."""

def commandline_parser():
    parser = cop( usage, jset=True,
            argdoc=[ ("REG", "Suite name"),
                ("TASK", "Target task (NAME"+TaskID.DELIM+"TAG)")])

    parser.set_defaults( dry_run=False )

    parser.add_option( "-d", "--dry-run",
            help="Generate the cylc task execution file for the "
            "task and report how it would be submitted to run.",
            action="store_true", dest="dry_run" )

    return parser

# parse command line options and arguments-----------------------------
parser = commandline_parser()
( options, args ) = parser.parse_args()

suite, suiterc = prep_file( args[0], options ).execute()

suite_env = {}
suite_task_env = {}

task_id = args[1]

suite_dir = os.path.dirname(suiterc)
# For user-defined job submission methods:
sys.path.append( os.path.join( suite_dir, 'python' ))

# check task
try:
    tid = TaskID( task_id )
except TaskIDError, x:
    raise SystemExit(x)
else:
    task_name, ctime = tid.splitstr()

# load suite config
try:
    config = config( suite, suiterc,
            template_vars=options.templatevars,
            template_vars_file=options.templatevars_file,
            verbose=options.verbose )
except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

use_lockserver = False
lockserver_port = None
if config['cylc']['lockserver']['enable']:
    use_lockserver = True
    try:
        lockserver_port = lockserver( 'localhost' ).get_port()
    except SuiteIdentificationError, x:
        raise SystemExit( 'Lockserver not found. See \'cylc lockserver status\'')

    # Request suite access from the lock server. If the task's parent
    # suite has an exclusive lock, we can use submit only via the
    # same suite registration. submit does not need to call
    # release_suite_access()
    if not suite_lock( suite, suite_dir, 'localhost', lockserver_port, 'submit' ).request_suite_access():
        raise SystemExit( 'ERROR: failed to acquire a suite lock' )

# No TASK EVENT HOOKS are set for the submit command because there is
# no scheduler instance watching for task failure etc. 

# Running in UTC time? (else just use the system clock)
utc = config['cylc']['UTC mode']
dclock = accelerated_clock.clock( 0, 0, utc, 'live' ) 

# create log (after CYLC_MODE is exported)
os.environ['CYLC_MODE'] = 'submit'

gcfg.create_cylc_run_tree( suite, options.verbose )
slog = suite_log(suite)
suite_log_dir = slog.get_dir()
slog.pimp( clock=dclock )

task.task.clock = dclock
clocktriggered.clocktriggered.clock = dclock

ict = config['scheduling']['initial cycle time']
fct = config['scheduling']['final cycle time'  ]

# static cylc and suite-specific variables:
suite_env = {
        'CYLC_UTC'               : str(utc),
        'CYLC_MODE'              : 'submit',
        'CYLC_DEBUG'             : str( options.debug ),
        'CYLC_VERBOSE'           : str( options.verbose),
        'CYLC_USE_LOCKSERVER'    : str( use_lockserver ),
        'CYLC_LOCKSERVER_PORT'   : str( lockserver_port ), # "None" if not using lockserver
        'CYLC_DIR_ON_SUITE_HOST' : os.environ[ 'CYLC_DIR' ],
        'CYLC_SUITE_NAME'        : suite,
        'CYLC_SUITE_REG_NAME'    : suite, # DEPRECATED
        'CYLC_SUITE_HOST'        : 'localhost',
        'CYLC_SUITE_OWNER'       : username,
        'CYLC_SUITE_PORT'        : 'None',
        'CYLC_SUITE_REG_PATH'    : RegPath( suite ).get_fpath(), # DEPRECATED
        'CYLC_SUITE_DEF_PATH_ON_SUITE_HOST' : suite_dir,
        'CYLC_SUITE_INITIAL_CYCLE_TIME' : str( ict ), # may be "None"
        'CYLC_SUITE_FINAL_CYCLE_TIME'   : str( fct ), # may be "None"
        'CYLC_SUITE_LOG_DIR'     : suite_log_dir # needed by the test battery
        }

# Contact details for remote tasks, written to file on task
# hosts because the details can change on restarting a suite.
suite_contact_env = {
        'CYLC_SUITE_NAME'        : suite_env['CYLC_SUITE_NAME' ],
        'CYLC_SUITE_HOST'        : suite_env['CYLC_SUITE_HOST' ],
        'CYLC_SUITE_OWNER'       : suite_env['CYLC_SUITE_OWNER'],
        'CYLC_SUITE_PORT'        : suite_env['CYLC_SUITE_PORT' ],
        }

# Set local values of variables that are potenitally task-specific
# due to different directory paths on different task hosts. These 
# are overridden by tasks prior to job submission, but in
# principle they could be needed locally by event handlers:
suite_task_env = {
        'CYLC_SUITE_RUN_DIR'    : gcfg.get_derived_host_item( suite, 'suite run directory' ),
        'CYLC_SUITE_WORK_DIR'   : gcfg.get_derived_host_item( suite, 'suite work directory' ),
        'CYLC_SUITE_SHARE_DIR'  : gcfg.get_derived_host_item( suite, 'suite share directory' ),
        'CYLC_SUITE_SHARE_PATH' : '$CYLC_SUITE_SHARE_DIR', # DEPRECATED
        'CYLC_SUITE_DEF_PATH'   : suite_dir
        }
# (note gcfg automatically expands environment variables in local paths)

# Add to the scheduler environment for possible use by event handlers
for var,val in suite_env.items():
    os.environ[var] = val
for var,val in suite_task_env.items():
    os.environ[var] = val

# Pass these to the jobfile generation module.
# TODO - find a better, less back-door, way of doing this!
jobfile.jobfile.suite_env = suite_env
jobfile.jobfile.suite_task_env = suite_task_env
# And pass contact env to the task module
task.task.suite_contact_env = suite_contact_env

# Write suite contact environment variables.
# 1) local file (os.path.expandvars is called automatically for local)
suite_run_dir = gcfg.get_derived_host_item( suite, 'suite run directory')
env_file_path = os.path.join(suite_run_dir, "cylc-suite-env")
f = open(env_file_path, 'wb')
for key, value in suite_contact_env.items():
    f.write("%s=%s\n" % (key, value))
f.close()

# Suite bin directory for event handlers executed by the scheduler. 
os.environ['PATH'] = suite_dir + '/bin:' + os.environ['PATH'] 

# User defined local variables that may be required by event handlers
cenv = config['cylc']['environment']
for var in cenv:
    os.environ[var] = os.path.expandvars(cenv[var])

# instantiate the task--------------------------------------------------
if task_name in config.get_asynchronous_task_name_list():
    tag = '1'  # asynchronous tasks always start with tag = 1
else:
    tag = ctime
try:
    # try to get a graphed task of the given name
    task_proxy = config.get_task_proxy( task_name, tag, 'waiting', stopctime=None, startup=True )
except TaskNotDefinedError, x:
    print >> sys.stderr, 'WARNING: "' + task_name + \
            '" type and validity are not constrained by the graph.'
    print >> sys.stderr, "Continuing under the assumption that the given task ID is valid."
    try:
        # try to get an ungraphed task of the given name
        task_proxy = config.get_task_proxy_raw( task_name, tag, 'waiting', stoptag=None, startup=True )
    except TaskNotDefinedError, y:
        raise SystemExit('ERROR: task "' + task_name + '" runtime is not defined either, aborting.')

# SUBMIT THE TASK TO RUN-----------------------------------------------
if not options.dry_run:
    print "Logging directory: " + suite_log_dir
    print
task_proxy.submit( dry_run=options.dry_run, debug=options.debug )

