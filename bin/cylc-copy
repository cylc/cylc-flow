#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os, re
import shutil
from cylc.CylcOptionParsers import cop, db_optparse
from cylc.mkdir_p import mkdir_p
from cylc.registration import localdb, \
        RegistrationError, SuiteTakenError, DatabaseLockedError
from cylc.regpath import RegPath, IllegalRegPathError 

def unlock( transfer=False ):
    if transfer:
        targetdb.unlock()
    else:
        sourcedb.unlock()

parser = cop( usage = """cylc [db] copy|cp [OPTIONS] REG REG2 TOPDIR

Copy suite or group REG to TOPDIR, and register the copy as REG2.

Consider the following three suites:

% cylc db print '^foo'     # printed in flat form
foo.bag     | "Test Suite Zero" | /home/bob/zero
foo.bar.qux | "Test Suite Two"  | /home/bob/two
foo.bar.baz | "Test Suite One"  | /home/bob/one

% cylc db print -t '^foo'  # printed in tree from
foo      
 |-bag    "Test Suite Zero" | /home/bob/zero
 `-bar   
   |-baz  "Test Suite One"  | /home/bob/one
   `-qux  "Test Suite Two"  | /home/bob/two

These suites are stored in a flat directory structure under /home/bob,
but they are organised in the suite database as a group 'foo' that
contains the suite 'foo.bag' and a group 'foo.bar', which in turn
contains the suites 'foo.bar.baz' and 'foo.bar.qux'.

When you copy suites with this command, the target registration names
are determined by TARGET and the name structure underneath SOURCE, and
the suite definition directories are copied into a directory tree under
TOPDIR whose structure reflects the target registration names. If this
is not what you want, you can copy suite definition directories manually
and then register the copied directories manually with 'cylc register'.

To copy suites between different databases use one or both of the 
--db-to, --db-from options.  If only one is used the other database
(source or target) will be the default database, which may in turn 
be specified with the plain --db option.

EXAMPLES (using the three suites above):

% cylc db copy foo.bar.baz red /home/bob       # suite to suite
  Copying suite definition for red
% cylc db print "^red"
  red | "Test Suite One" | /home/bob/red

% cylc copy foo.bar.baz blue.green /home/bob   # suite to group
  Copying suite definition for blue.green
% cylc db pr "^blue"
  blue.green | "Test Suite One" | /home/bob/blue/green

% cylc copy foo.bar orange /home/bob           # group to group
  Copying suite definition for orange.qux
  Copying suite definition for orange.baz
% cylc db pr "^orange"
  orange.qux | "Test Suite Two" | /home/bob/orange/qux
  orange.baz | "Test Suite One" | /home/bob/orange/baz""",
  argdoc=[("REG", "Source suite name"),
          ("REG2", "Target suite name"), 
          ("TOPDIR", "Top level target directory.")] )

parser.add_option( "--db-from",
        help="Source suite database, specified as for --db. "
        "Use --db-to, or --db, or your default DB as the target.",
        metavar="DB", action="store", default=None, dest="dbfrom" )

parser.add_option( "--db-to",
        help="Target suite database, specified as for --db. "
        "Use --db-from, or --db', or your default DB as the source.",
        metavar="DB", action="store", default=None, dest="dbto" )

( options, args ) = parser.parse_args()

dbfrom = db_optparse( options.dbfrom ).get_db_location()
dbto = db_optparse( options.dbto ).get_db_location()
db = db_optparse( options.db ).get_db_location()

if dbfrom:
    if not dbto:
        dbto = db
else:
    dbfrom = db

if dbto:
    if not dbfrom:
        dbfrom = db
else:
    dbto = db

if dbfrom != dbto:
    transfer = True
else:
    transfer = False

try:
    arg_from = RegPath(args[0]).get()
    arg_to = RegPath(args[1]).get()
except IllegalRegPathError, x:
    if options.debug:
        raise
    raise SystemExit(x)
arg_dir = args[2]

sourcedb = localdb( file=dbfrom, verbose=options.verbose )
if transfer:
    targetdb = localdb( file=dbto, verbose=options.verbose )
else:
    targetdb = sourcedb

try:
    if transfer:
        sourcedb.load_from_file()
        targetdb.lock()
        targetdb.load_from_file()
    else:
        sourcedb.lock()
        sourcedb.load_from_file()

    flist = sourcedb.get_list( '^' + arg_from + r'\b' )
    if len(flist) == 0:
        raise RegistrationError, 'ERROR, no suites matched: ' + arg_from

    for item in flist:
        freg, fdir, ftitle = item
         # if freg is aliased, get the target suite definition dir
        fdir, junk = sourcedb.get( freg )

        treg = re.sub( r'\b' + arg_from + r'\b', arg_to, freg ) 

        tdir = RegPath(treg).get_fpath()
        tdir = os.path.join( arg_dir, tdir )

        if os.path.exists( tdir ):
            print >> sys.stderr, 'SKIPPING, directory already exists: ' + tdir
            continue

        tdir = os.path.abspath( tdir )
        #print 'Making directory ', tdir
        try:
            mkdir_p( os.path.dirname(tdir))
        except Exception,x:
            print >> sys.stderr, 'ERROR, illegal target directory?', tdir
            print >> sys.stderr, x
            continue

        print 'COPY', fdir, '\n  TO', tdir 
        try:
            shutil.copytree( fdir, tdir )
        except OSError, x:
            print >> sys.stderr,x
            continue
        except shutil.Error, x:
            # if one or more files could not be read
            print 'WARNINGS:'
            for e in x.args[0]:
                src, trg, err = e
                print >> sys.stderr, "  ", src, '-->', trg
                print >> sys.stderr, "     ", err
        try:
            targetdb.register( treg, tdir )
        except SuiteTakenError, x:
            print >> sys.stderr, 'ERROR, ' + str(x)
            continue

    #targetdb.dump()
    targetdb.dump_to_file()
    unlock(transfer)

except DatabaseLockedError, x:
    if options.debug:
        raise
    raise SystemExit(x)
except RegistrationError, x:
    print >> sys.stderr, x
    unlock()
    if options.debug:
        raise
    sys.exit(1)
except Exception, x:
    print >> sys.stderr, 'ERROR:', x
    unlock()
    if options.debug:
        raise
    sys.exit(1)
