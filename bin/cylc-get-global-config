#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from optparse import OptionParser
from cylc.version import cylc_version

parser = OptionParser( usage = """cylc [admin] get-global-config [OPTIONS] 

Print settings from the cylc site and user config files.

0) defaults (internal cylc config file spec)
1) $CYLC_DIR/conf/siterc/site.rc  # site file (overrides defaults)
2) $HOME/.cylc/user.rc            # user file (overrides site)

Without options, just validates combined site/user config files.

To create a new site or user config file, e.g.:
  % cylc get-global-config --print > $HOME/.cylc/user.rc
""" )

parser.add_option( "--print", help="Write parsed site/user "
        "settings to stdout.",
        action="store_true", default=False, dest="stdout" )

parser.add_option( "-v", "--verbose", help="Print extra information.",
        action="store_true", default=False, dest="verbose" )

parser.add_option( "--strict", help="Abort if either the site "
        "or user config file fails validation (otherwise carry "
        "on using default values).", action="store_true",
        default=False, dest="strict" )

parser.add_option( "--debug",
        help="Show exception tracebacks.",
        action="store_true", default=False, dest="debug" )

parser.add_option( "--print-run-dir",
        help="Display the site configured run directory",
        action="store_true", default=False, dest="run_dir" )

parser.add_option( "-i", "--item", metavar="[SEC...]ITEM", 
        help="The config item to print. Can be used multiple "
        "times on the same command line.",
        action="append", dest="item", default=[] )

parser.add_option( "-p", "--python",
        help="Write out the config data structure in Python native format.",
        action="store_true", default=False, dest="pnative" )

(options, args) = parser.parse_args()
if len(args) != 0:
    parser.error( "ERROR: wrong number of arguments" )

try:
    # import gcfg here to avoid aborting before command help is printed
    from cylc.global_config import get_global_cfg, print_global_cfg
    from parsec.util import printcfg
    gcfg = get_global_cfg(strict=options.strict, verbose=options.verbose)
    if options.stdout:
        print_global_cfg()
    elif options.run_dir:
        print gcfg.get_host_item('run directory')
    elif options.item:
        import re
        get_these = []
        for i in options.item:
            # construct lists in item nest ordering from --item inputs
            i = i.lstrip('[')
            i = i.rstrip(']')
            j = re.split( '\]\[*', i )
            get_these.append(j)
        for key in get_these:
            value = gcfg.cfg
            for element in key:
                if element in value:
                    value = value[element]
                else:
                    sys.exit( "Key not found: " + str(key))
            if isinstance( value, dict ):
                if options.pnative:
                    print value
                else:
                    printcfg( value, level=len(args[1:]) )
    else:
        print "Combined site/user config is valid for cylc-" + cylc_version

except Exception, x:
    if options.debug:
        raise
    sys.exit( str(x) )

