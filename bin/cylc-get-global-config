#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from optparse import OptionParser
from cylc.global_config import gcfg

parser = OptionParser( usage = """cylc [admin] get-global-config [OPTIONS] 

Print settings determined by the cylc site and user configuration files,
and auto-generate those files will all settings initially commented out.

1) $CYLC_DIR/conf/siterc/cfgspec  # legal items and default values
2) $CYLC_DIR/conf/siterc/site.rc  # site file (overrides defaults)
3) $HOME/.cylc/user.rc            # user file (overrides site)

Without options, this command prints all global settings to stdout.""" )

parser.add_option( "-s", "--write-site", help="Write a site "
        "configuration file to $CYLC_DIR/conf/site/site.rc. "
        "Uncomment and modify items in the file as required.",
        action="store_true", default=False, dest="writesite" )

parser.add_option( "-u", "--write-user", help="Write a user "
        "configuration file to $HOME/.cylc/user.rc. "
        "Uncomment and modify items in the file as required.",
        action="store_true", default=False, dest="writeuser" )

(options, args) = parser.parse_args()
if len(args) != 0:
    parser.error( "ERROR: wrong number of arguments" )

globals = gcfg

if options.writesite:
    globals.write_rc( 'site' )
elif options.writeuser:
    globals.write_rc( 'user' )
else:
    globals.dump()

