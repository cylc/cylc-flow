#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import datetime
import os
from cylc.CylcOptionParsers import cop
from cylc.scheduler import scheduler
from cylc.run import main
from cylc.command_prep import prep_file
from cylc.task_proxy import TaskProxySequenceBoundsError

class start( scheduler ):
    def __init__( self ):
        usage = """cylc [control] run|start [OPTIONS] ARGS

Start a suite run from scratch, wiping out any previous suite state. To
restart from a previous state see 'cylc restart --help'.

The scheduler runs in daemon mode unless you specify --no-detach or --debug.

Any dependence on cycle points earlier than the start cycle point is ignored.

A "cold start" (the default) starts from the suite's initial cycle point
(specified in the suite.rc or on the command line), and loads any special
one-off cold-start tasks (see below).

A "warm start" (-w/--warm) starts from a given cycle point that is later than
the initial cycle point (specified in the suite.rc), and loads any cold-start
tasks in the 'succeeded' state just to satisfy initial dependence on them.
The original suite initial cycle point is preserved, but all tasks and
dependencies before the given start cycle point are ignored.

Aside from the starting cycle point there is no difference between cold and
warm start unless you use special cold-start tasks. See "Suite Start-up" and
"Cold-Start Tasks" in the User Guide for more."""

        self.parser = cop( usage, jset=True, argdoc=[ ("REG", "Suite name"),
                ("[START_POINT]", """Initial cycle point or 'now'; overrides the
                         suite definition.""")])

        self.parser.add_option( "--non-daemon",
                help="(deprecated: use --no-detach)",
                action="store_true", default=False, dest="no_detach" )

        self.parser.add_option( "-n", "--no-detach",
                help="Do not daemonize the suite",
                action="store_true", default=False, dest="no_detach" )

        self.parser.add_option( "--profile",
                help="Output profiling (performance) information",
                action="store_true", default=False, dest="profile_mode" )

        self.parser.add_option( "-w", "--warm", help="Warm start the suite. "
                "The default is to cold start.",
                action="store_true", default=False, dest="warm" )

        self.parser.add_option( "--ict",
                help="Set $CYLC_SUITE_INITIAL_CYCLE_POINT to the initial "
                "cycle point even in a warm start (as for cold starts).",
                action="store_true", default=False, dest="set_ict" )

        scheduler.__init__( self )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()

        self.suite, self.suiterc = prep_file( self.args[0], self.options ).execute()

        self.suite_dir = os.path.dirname( self.suiterc )

        # For user-defined job submission methods:
        sys.path.append( os.path.join( self.suite_dir, 'python' ))

        if len( self.args ) == 2:
            start_point_string = self.args[1]
            if start_point_string == "now":
                start_point_string = (
                    datetime.datetime.utcnow().strftime("%Y%m%dT%H%MZ")
                )
            if self.options.warm:
                self._cli_start_point_string = start_point_string
            else:
                self._cli_initial_point_string = start_point_string
        elif self.options.warm:
            # No warm-start cycle point supplied.
            sys.exit(self.parser.get_usage())

        scheduler.parse_commandline( self )

    def load_tasks( self ):
        if self.start_point is not None:
            if self.options.warm:
                self.log.info( 'Warm Start %s' % self.start_point)
            else:
                self.log.info( 'Cold Start %s' % self.start_point )

        task_list = self.filter_initial_task_list( self.config.get_task_name_list() )
        coldstart_tasks = self.config.get_coldstart_task_list()

        for name in task_list:
            if self.start_point is None:
                # No start cycle point at which to load cycling tasks.
                continue
            try:
                itask = self.config.get_task_proxy(
                    name, self.start_point, 'waiting', is_startup=True)
            except TaskProxySequenceBoundsError as exc:
                self.log.debug(str(exc))
                continue
            if name in coldstart_tasks and self.options.warm:
                itask.state.set_status( 'succeeded' )
                itask.prerequisites.set_all_satisfied()
                itask.set_outputs()
            # Load task.
            self.pool.add_to_runahead_pool( itask )

if __name__ == '__main__':
    main("run", start)
