#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

from cylc.mkdir_p import mkdir_p
from copy import deepcopy
import os, sys, pwd, re
import socket, pickle
import logging, logging.handlers
from optparse import OptionParser
import Pyro.core, Pyro.errors, Pyro.naming
from Pyro.ext.daemonizer import Daemonizer
from ConfigParser import SafeConfigParser
from cylc.suite_id import identifier
from cylc.cfgspec.site import sitecfg
import logging

class ServerDaemon( Daemonizer ):
    def __init__( self, pid_file, log_file, state_file ):
        self.log_file = log_file
        self.state_file = state_file
        Daemonizer.__init__(self, pid_file)
        self.pid_file = pid_file

    def main_loop( self ):
        # NOTE THE PYRO SERVER BEING DAEMONIZED MUST BE STARTED HERE
        # OTHERWISE ITS SOCKET FILE DESCRIPTORS WILL BE CLOSED DOWN IN
        # Pyro's daemonizer.__init__() (a Pyro bug, I think).

        # for debugging in daemon mode, uncomment the following so that
        # exceptions will be written to log files.

        #foo = open( "/home/oliverh/cylc/foo.txt", "a" )
        #server = None
        #try:
        server = LServer( self.pid_file, self.log_file, self.state_file )
        #except Exception, x:
        #    foo.write( str(x) + "\n" )
        #else:
        #    pass

        #bar = open( "/home/oliverh/cylc/bar.txt", "a" )
        #try:
        server.start()
        #except Exception, x:
        #    bar.write( str(x) + "\n" )
        #else:
        #    pass

class LServer( object ):
    def __init__( self, pid_file, log_file, state_file ):
        self.log_file = log_file
        self.pid_file = pid_file
        self.state_file = state_file

        Pyro.config.PYRO_MULTITHREADED = 0
        # USE DNS NAMES INSTEAD OF FIXED IP ADDRESSES FROM /etc/hosts
        # (see the Userguide "Networking Issues" section).
        Pyro.config.PYRO_DNS_URI = True
        # UNCOMMENT THE FOLLOWING FOR LOGGING (goes to $PWD/Pyro_log)
        #Pyro.config.PYRO_STDLOGGING = True
        #Pyro.config.PYRO_TRACELEVEL = 3

        base = sitecfg.get( ['pyro','base port'] )
        range = sitecfg.get( ['pyro','maximum number of ports'] )

        # base (lowest allowed) Pyro socket number
        Pyro.config.PYRO_PORT = base
        # max number of sockets starting at base
        Pyro.config.PYRO_PORT_RANGE = range

        Pyro.core.initServer()

    def start( self ):
        # CREATE A PYRO pyro_daemon FOR THIS SUITE
        # (single threaded prob not necessary for lockserver
        # but it doesn't matter as few connections needed)

        self.owner = os.environ[ 'USER' ]
        self.pyro_daemon = Pyro.core.Daemon()
        port = self.pyro_daemon.port
        print "Listening on port", port
        locker = lockserver( port, self.pid_file, self.log_file, self.state_file )

        lockserver_id = identifier( 'lockserver', self.owner )
        self.pyro_daemon.connect( lockserver_id, 'cylcid' )

        #foo = open( "/home/oliverh/cylc/foo.txt", "a" )

        # connect to pyro with owner name as an added safeguard against
        # accessing lockservers owned by others.
        self.pyro_daemon.connect( locker, self.owner + '.lockserver' )

        while True:
            self.pyro_daemon.handleRequests()

class lockserver( Pyro.core.ObjBase ):
    def __init__( self, port, pid_file, log_file, state_file, loglevel=logging.INFO ):
        Pyro.core.ObjBase.__init__(self)

        # pid file is passed through to here purely so it can be
        # retrieved by user request, through 'cylc con lockclient -f'.
        self.port = port
        self.pid_file = pid_file
        self.log_file = log_file
        self.state_file = state_file

        self.configure_logging( log_file, loglevel )

        if self.load_state():
            self.log.info( 'Loaded initial state from ' + self.log_file )
        else:
            self.log.info( 'Starting with a clean slate' )
            # task locks
            self.locked = {}
            # suite locks
            self.exclusive = {}       # exclusive[ suite_dir ] = [ suite ]
            self.inclusive = {}       # inclusive[ suite_dir ] = [ suite, ... ]

    def dump_state( self ):
        output = open( self.state_file, 'w' )
        pickle.dump( ( self.exclusive, self.inclusive, self.locked ), output )
        output.close()

    def load_state( self ):
        if not os.path.exists( self.state_file ):
            print "File not found:", self.state_file
            print "(i.e. no previous state to load)"
            return False

        state = open( self.state_file, 'rb' )
        ( self.exclusive, self.inclusive, self.locked ) = pickle.load( state )
        state.close()
        return True

    def configure_logging( self, log_file, loglevel ):
        self.log = logging.getLogger( log_file )
        self.log.setLevel( loglevel )
        max_bytes = 1000000
        backups = 5
        if os.path.basename( log_file ) != log_file:
            logging_dir = os.path.dirname( log_file )
            if not os.path.exists( logging_dir ):
                try:
                    os.makedirs( logging_dir )
                except:
                    raise SystemExit( 'Failed to create logging directory ' + logging_dir + '!')

        h = logging.handlers.RotatingFileHandler( log_file, 'a', max_bytes, backups )
        # roll the log file if it already exists
        if os.path.getsize( log_file ) > 0:
            h.doRollover()

        f = logging.Formatter( '%(asctime)s %(levelname)-2s - %(message)s', '%Y/%m/%d %H:%M:%S' )
        h.setFormatter(f)
        self.log.addHandler( h )

    def get_lock_id( self, suite, task_id ):
        return suite + ':' + task_id

    def get_suite( self, lock_id ):
        (suite, task_id) = lock_id.split(':')
        return suite

    def get_suite_string( self, suite, suite_dir ):
        return suite + '-->' + suite_dir

    def acquire( self, task_id, suite ):
        id = self.get_lock_id( suite, task_id )
        if id not in self.locked:
            self.locked[ id ] = True
            self.log.info( "acquired task lock " + id )
            self.dump_state()
            return True
        else:
            self.log.warning( "refused task lock " + id )
            return False

    def release( self, task_id, suite ):
        id = self.get_lock_id( suite, task_id )
        if id in self.locked:
            del self.locked[ id ]
            self.log.info( "released task lock " + id )
            self.dump_state()
            return True
        else:
            self.log.warning( "failed to release task lock " + id )
            return False

    def get_filenames( self ):
         self.log.info( "Returning server filenames")
         return ( self.pid_file, self.log_file, self.state_file )

    def dump( self ):
         self.log.info( "Returning lock information")
         return ( self.locked.keys(), self.exclusive, self.inclusive )

    def clear( self ):
        # release all locks one at a time so each release gets logged
        self.log.info( "Releasing ALL locks" )

        # MUST USE .keys() here to avoid:
        # RuntimeError: dictionary changed size during iteration

        # ALSO: the deepcopy's below are required, as it appears that
        # foo in 'foo = bar[baz]' gets altered implicitly if bar[baz] is
        # altered.

        for suitedir in self.exclusive.keys():
            [ suite ] = deepcopy( self.exclusive[ suitedir ] )
            self.release_suite_access( suitedir, suite )

        for suitedir in self.inclusive.keys():
            suites = deepcopy( self.inclusive[ suitedir ] )
            for suite in suites:
                self.release_suite_access( suitedir, suite )

        # release task locks with no associated suite lock
        # (acquired manually, or through 'cylc task submit').
        for lock in self.locked.keys():
            ( suite, task_id ) = lock.split( ':' )
            self.release( task_id, suite )

        self.dump_state()
        return

    def is_locked( self, task_id, suite ):
        id = self.get_lock_id( suite, task_id )
        if id in self.locked:
            return True
        else:
            return False

    def get_suite_access( self, suite_dir, suite, cylc_mode, request_exclusive ):
        # EXCLUSIVE: one only named suite can use suite_dir at once
        #   - submit can attempt to get a task lock IF via the same name
        # INCLUSIVE: multiple named suites can use suite_dir at once
        #   - submit can attempt to get a task lock always

        suite_descr = self.get_suite_string( suite, suite_dir )

        result = True
        reason = "granted"

        if cylc_mode != 'submit':
            if ( request_exclusive and suite_dir in self.inclusive ) or \
                    ( not request_exclusive and suite_dir in self.exclusive ):
                result = False
                reason = "inconsistent exclusivity for " + suite_dir
                self.log.warning( reason )
                return ( False, reason )

        if request_exclusive:
            if suite_dir in self.exclusive:
                name = self.exclusive[ suite_dir ][0]
                already = self.get_suite_string( name, suite_dir )

                if cylc_mode == 'submit':
                    # grant access only if suite is the same
                    if suite == name:
                        pass
                    else:
                        result = False
                        reason = self.get_suite_string( name, suite_dir ) + " in exclusive use"
                else:
                    # no exclusive access to any suite already in use
                    result = False
                    reason = suite_descr + " in exclusive use"
            else:
                # suite dir not already in self.exclusive
                if cylc_mode == 'submit':
                    # grant access but don't set a lock
                    pass
                else:
                    # grant exclusive access
                    self.exclusive[ suite_dir ] = [ suite ]
        else:
            # inclusive access requested
            if suite_dir in self.inclusive:
                names = self.inclusive[ suite_dir ]

                if cylc_mode == 'submit':
                    # granted
                    pass
                else:
                    # grant access unless same name already in use
                    if suite in names:
                        result = False
                        reason =  suite + '-->' + suite_dir + " already in use"
                    else:
                        # granted
                        self.inclusive[ suite_dir ].append( suite )
            else:
                if cylc_mode == 'submit':
                    # granted
                    pass
                else:
                    # granted
                    self.inclusive[ suite_dir ] = [ suite ]

        if result:
            self.dump_state()
            if cylc_mode == 'submit':
                self.log.info( "granted suite access " + suite + " --> " + suite_dir )
            else:
                self.log.info( "acquired suite lock " + suite + " --> " + suite_dir )
        else:
            if cylc_mode == 'submit':
                self.log.warning( "refused suite access " + suite + " --> " + suite_dir )
            else:
                self.log.warning( "refused suite lock " + suite + " --> " + suite_dir )
            self.log.warning( " " + reason )

        return ( result, reason )


    def release_suite_access( self, suite_dir, suite ):
        # first release any task locks held by the suite
        for id in self.locked.keys():
            if self.get_suite( id ) == suite:
                del self.locked[ id ]
                self.log.info( "released task lock " + id )

        result = True
        if suite_dir in self.exclusive:
            if suite not in self.exclusive[ suite_dir ]:
                self.log.warning( "suite release error" )
                result = False
            else:
                del self.exclusive[ suite_dir ]
                result = True
        elif suite_dir in self.inclusive:
            names = self.inclusive[ suite_dir ]
            if suite not in names:
                self.log.warning( "suite release error" )
                result = False
            elif len( names ) == 1:
                del self.inclusive[ suite_dir ]
                result = True
            else:
                self.inclusive[ suite_dir ].remove( suite )
                result = True
        else:
            self.log.warning( "erroneous suite release request: lock not found" )
            result = False
        if result:
            self.dump_state()
            self.log.info( "released suite lock " + suite + " --> " + suite_dir )
        else:
            self.log.warning( "failed to release suite lock " + suite + " --> " + suite_dir )

        return result

if __name__ == "__main__":

    cylcdir = os.environ[ 'CYLC_DIR' ]
    configfile =  os.path.join( cylcdir, 'conf/lockserver.conf' )

    usage = """Usage: cylc [util] lockserver [-f CONFIG] ACTION

The cylc lockserver daemon brokers suite and task locks for a single
user. These locks are analogous to traditional lock files, but they work
even for tasks that start and finish executing on different hosts. Suite
locks prevent multiple instances of the same suite from running at the
same time (even if registered under different names) unless the suite
allows that. Task locks do the same for individual tasks (even if
submitted outside of their suite using 'cylc submit').

The command line user interface for interrogating the daemon, and
for manual lock management, is 'cylc lockclient'.

Use of the lockserver is optional (see suite.rc documentation).

The lockserver reads a config file that specifies the location of the
daemon's process ID, state, and log files. The default config file
is '$CYLC_DIR/conf/lockserver.conf'. You can specify an alternative
config file on the command line, but then all subsequent interaction
with the daemon via the lockclient command must also specify the same
file (this is really only for testing purposes). The default process ID,
state, and log files paths are relative to $HOME so this should be
sufficient for all users.

The state file records currently held locks and, if it exists at
startup, is used to initialize the lockserver (i.e. suite and task locks
are not lost if the lockserver is killed and restarted). All locking
activitiy is recorded in the log file.

Arguments:
  ACTION   -  'start', 'stop', 'status', 'restart', or 'debug'
               In debug mode the server does not daemonize so its
               the stdout and stderr streams are not lost."""

    parser = OptionParser( usage )

    parser.set_defaults( config = configfile )

    parser.add_option( "-c", "--config-file",
            help="Config file (default $CYLC_DIR/lockserver.conf",
            metavar="CONFIGFILE", action="store", dest="config" )

    ( options, args ) = parser.parse_args()

    if len( args ) != 1:
        parser.error( "Wrong number of arguments" )
    if args[0] not in [ 'start', 'stop', 'status', 'restart', 'debug' ]:
        parser.error(  "Illegal argument: " + args[0] )

    # load config file
    config = SafeConfigParser()
    config_file = options.config
    if os.path.exists( config_file ):
            print "Loading Config File: " + config_file
            config.read( config_file )
    else:
        raise SystemExit( "File not found: " + config_file )

    # extract config items
    pid_file   = config.get( 'main', 'pid file' )
    log_file   = config.get( 'main', 'log file' )
    state_file = config.get( 'main', 'state file' )
    #type = options.type

    # interpolate environment variables (e.g. $HOSTNAME in the default
    # lockserver config file $CYLC_DIR/conf/lockserver.conf).
    pid_file = os.path.expandvars( pid_file )
    log_file = os.path.expandvars( log_file )
    state_file = os.path.expandvars( state_file )

    # make absolute if necessary
    home = os.environ['HOME']
    if not os.path.isabs( pid_file ):
        pid_file = os.path.join( home, pid_file )
    if not os.path.isabs( log_file ):
        log_file = os.path.join( home, log_file )
    if not os.path.isabs( state_file ):
        state_file = os.path.join( home, state_file )

    for f in pid_file, log_file, state_file:
        # make parent directory if necessary
        pdir = os.path.dirname( f )
        #print pdir
        if not os.path.isdir(pdir):
            #print 'creating it'
            try:
                mkdir_p(pdir)
            except Exception, x:
                print >> sys.stderr, x
                print >> sys.stderr, 'ERROR, illegal dir?', pdir
                sys.exit(1)

    print "PID File:        ", pid_file
    print "Logging To:      ", log_file
    print "Persistent State:", state_file
    #print "Lockserver Type: ", type

    server_daemon = ServerDaemon( pid_file, log_file, state_file )
    server_daemon.process_command_line( [ sys.argv[0] ] + args )
