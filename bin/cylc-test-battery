#!/bin/bash

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e; trap "echo 'TEST BATTERY FAILED'" ERR

usage() {
    echo "USAGE: cylc [admin] test-battery [options] [TOPDIR]"
    echo ""
    echo "This command runs a battery of self-diagnosing test-suites. "
    echo "See documention of \"Reference Tests\" in the User Guide."
    echo "Test batteries should be kept in a directory tree; use TOPDIR to "
    echo "target all the contained suites, or a sub-tree, or a single "
    echo "one of them. TOPDIR defaults to \$CYLC_DIR/tests/, the location"
    echo "of the official cylc reference tests."
    echo ""
    echo "Directory paths containing the word 'hidden' will be ignored."
    echo "This can be used to hide sub-suites that are not intended run"
    echo "as standalone tests (this is how to handle tests that are "
    echo "supposed to cause a suite to fail: put them in a hidden sub-suite"
    echo "and have the calling task in the main suite check the result)."
    echo ""
    echo "Some of the official test suites submit test jobs to a task host"
    echo "and user account taken from the environment:"
    echo "  \$CYLC_TEST_TASK_HOST"
    echo "  \$CYLC_TEST_TASK_OWNER"
    echo "If these are not defined they default to localhost and \$USER"
    echo "Passwordless ssh must be configured to the task host account"
    echo "(even if it is local)."
    echo ""
    echo "Options:"
    echo "  -h, --help   Print this help message and exit."
}

if [[ $# > 1 ]]; then
    usage
    exit 1
elif [[ $# == 1 ]]; then
    if [[ $1 == "--help" ]]; then
        usage
        exit 0
    else
        SOURCE_DIR=$1
        if [[ $SOURCE_DIR != /* ]]; then
            # abs path:
            SOURCE_DIR=$PWD/$SOURCE_DIR
        fi
    fi
else
    SOURCE_DIR=$CYLC_DIR/tests
fi

export CYLC_TEST_TASK_HOST=${CYLC_TEST_TASK_HOST:-localhost}
export CYLC_TEST_TASK_OWNER=${CYLC_TEST_TASK_OWNER:-$USER}

ACCOUNT=${CYLC_TEST_TASK_OWNER}@${CYLC_TEST_TASK_HOST}

echo -n "Testing ssh to ${ACCOUNT}..."
if ! ssh -oBatchmode=yes $ACCOUNT /bin/true > /dev/null 2>&1; then
    echo FAILED
    echo "ERROR: ssh test to $ACCOUNT failed"
    exit 1
else
    echo "  OK"
fi

MY_TMPDIR=${CYLC_TMPDIR:-${TMPDIR:-/tmp}}
mkdir -p $MY_TMPDIR

TARGET_DIR=$(mktemp -d)
REG_GROUP=$( basename $SOURCE_DIR )

echo
echo ">> COPYING test suites to $TARGET_DIR... "
cp -r $SOURCE_DIR $TARGET_DIR

echo
echo ">> UNREGISTERING previous test suites... "
cylc unreg -df ${REG_GROUP}'.*' > /dev/null

echo
echo ">> REGISTERING test suites... "
CWD=$PWD
cd $TARGET_DIR
for RC in $( find . -name 'suite.rc' ); do
    # ignore paths containing 'hidden/'
    echo $RC | grep 'hidden/' > /dev/null && continue
    DIR=$(dirname $RC)
    NAME=${DIR#./}
    NAME=$(echo $NAME | tr '/' '.')
    cylc db reg $NAME $DIR > /dev/null
done

echo
echo ">> RUNNING test suites now... "
set +e
cd ..
N_FAILED=0
N_PASSED=0
N_TOTAL=0
FAILED=""
PASSED=""
for REG in $( cylc db pr -xy $REG_GROUP ); do
    N_TOTAL=$(( N_TOTAL + 1 ))
    LOG=$PWD/${REG}.log
    echo -n "$REG (see $LOG)..."
    if $( cylc run --reference-test --debug $REG > $LOG 2>&1 ); then
        echo PASSED
        N_PASSED=$(( N_PASSED + 1 ))
        PASSED="$PASSED $REG"
    else
        echo FAILED
        N_FAILED=$(( N_FAILED + 1 ))
        FAILED="$FAILED $REG"
    fi
done

set -e; trap "echo 'TEST BATTERY FAILED'" ERR

echo
echo "SUMMARY:"
echo "  $N_PASSED of $N_TOTAL tests passed"
echo "  $N_FAILED of $N_TOTAL tests failed"
if (( N_FAILED != 0 )); then
    for REG in $FAILED; do
        echo "  - $REG"
    done
fi

echo
echo ">> UNREGISTERING successful test suites..."
for REG in $PASSED; do
    cylc unreg -df $REG > /dev/null
done

if (( N_FAILED != 0 )); then
    echo
    echo "ERROR: $N_FAILED test suites FAILED"
    exit 1
else
    echo
    echo ">> DONE: all test suites passed."
fi

