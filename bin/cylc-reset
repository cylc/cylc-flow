#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro

parser = cop( """cylc [control] reset [OPTIONS] ARGS

Force a task's state to:
 1/ 'ready' .... (default)   ...... all prerequisites satisfied (default) 
 2/ 'waiting' .. (--waiting) ...... prerequisites not satisfied yet
 3/ 'succeeded'  (--succeeded) .... all outputs completed
 4/ 'failed' ... (--failed) 
 Or:
 5/ force it to spawn if it hasn't done so already (--spawn)
 
Resetting a task to 'ready' will cause it to trigger immediately unless
the suite is held, in which case the task will trigger when normal
operation is resumed.

Forcing a task to spawn a successor may be necessary in the case of a 
failed "sequential task" that cannot be re-run successfully after fixing
the problem, because sequential tasks do not spawn until they succeed. 
Alternatively, you could force the failed task to the succeeded state, 
or insert a new instance into the suite at the next cycle time.""",
    pyro=True,
    argdoc=[ ('REG', 'Suite name'), ('TASK', 'Target task ID')])

parser.add_option( "--ready", 
        help="Force task to the 'ready' state.",
        action="store_true", default=False, dest="ready" )

parser.add_option( "--waiting", 
        help="Force task to the 'waiting' state.",
        action="store_true", default=False, dest="waiting" )

parser.add_option( "--succeeded", 
        help="Force task to 'succeeded' state.", 
        action="store_true", default=False, dest="succeeded" )

parser.add_option( "--failed", 
        help="Force task to 'failed' state.", 
        action="store_true", default=False, dest="failed" )

parser.add_option( "--spawn", 
        help="Force a task to spawn its successor if it hasn't already.", 
        action="store_true", default=False, dest="spawn" )

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

count = [ options.waiting, options.succeeded, options.failed, options.ready, options.spawn ].count( True )
if count != 0 and count != 1:
    parser.error( "Specify none or one of --ready, --waiting, --succeeded, --failed, or --spawn" )

if options.waiting:
    state = 'waiting'
elif options.succeeded:
    state = 'succeeded'
elif options.failed:
    state = 'failed'
elif options.spawn:
    state = 'spawn'
else:
    state = 'ready'

task_id = args[1]

try:
    tid = TaskID( task_id )
except TaskIDError,x:
    if options.debug:
        raise
    raise SystemExit(x)
else:
    task_id = tid.getstr()

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'command-interface' )
except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)

prompt( 'Reset task ' + task_id + ' in ' + suite, options.force )
result = proxy.put( 'reset task state', task_id, state )

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )

