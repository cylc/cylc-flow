#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, re
from cylc.cycle_time import ct, CycleTimeError
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import PromptOptionParser
from cylc.port_scan import SuiteIdentificationError
from cylc.registration import dbgetter, RegistrationError
from cylc.version import compat

parser = PromptOptionParser( """cylc [control] remove|kill [options] SUITE TARGET

Remove a single task, or all tasks with a common TAG (cycle time or
asynchronous 'a:INT'), from a running suite. 

Target tasks will be forced to spawn successors before being removed if
they have not done so already, unless you use '--no-spawn'.""",
["""TARGET      NAME%CYCLE or NAME%a:TAG to remove a single task;
               CYCLE or a:TAG to remove all tasks with the same tag."""])

parser.add_option( "--no-spawn", 
        help="Do not spawn successors before removal.",
        action="store_true", default=False, dest="no_spawn" )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "Task ID or cycle time required" )

reg = parser.get_suite_name()
dbg = dbgetter()
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

compat( suite, suiterc ).execute( sys.argv )

target = args[1]

kill_tag = False
kill_task = False

try:
    # is target a task ID
    tid = TaskID(target)
except TaskIDError:
    # no
    kill_tag = True
    # is target a valid cycle time or asynchronous ID?
    if re.match( '^a:', target ):
        target = target[2:]
    else:
        try:
            ct(target)
        except CycleTimeError,x:
            raise SystemExit(x)
else:
    # yes
    kill_task = True
    target = tid.id

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if kill_tag:
    if not parser.prompt( 'Kill ALL tasks with tag ' + target + ' in' ):
        sys.exit(0)
    if options.no_spawn:
        result = proxy.die_cycle( target )
    else:
        result = proxy.spawn_and_die_cycle( target )

if kill_task:
    if not parser.prompt( 'Kill task ' + target + ' in'):
        sys.exit(0)
    if options.no_spawn:
       result = proxy.die( target )
    else:
       result = proxy.spawn_and_die( target )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
