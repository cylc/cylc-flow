#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop, multitask_usage
from cylc.command_prep import prep_pyro

parser = cop( """cylc [control] remove [OPTIONS] ARGS

Remove one or more tasks, or all tasks with a common TAG (cycle time or
integer tag) from a running suite. 

Tasks will spawn successors first if they have not done so already.
""" + multitask_usage, pyro=True, multitask=True,
    argdoc=[("REG", "Suite name"), 
        ('[MATCH]', 'Task or family name matching regular expression'),
        ('TAG', 'Task cycle time or integer tag') ])

parser.add_option( "--no-spawn", 
        help="Do not spawn successors before removal.",
        action="store_true", default=False, dest="no_spawn" )

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

if len(args) == 3:
    name = args[1]
    tag = args[2]
    remove_tag = False
else:
    tag = args[1]
    remove_tag = True

spawn = not options.no_spawn

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'command-interface' )
    if remove_tag:
        prompt( 'remove ALL tasks at ' + tag + ' in ' + suite, options.force )
        result = proxy.put( 'remove cycle', tag, spawn )
    else:
        prompt( 'remove task(s) ' + name + ' at ' + tag + ' in ' + suite, options.force )
        result = proxy.put( 'remove task', name, tag, options.is_family, spawn )

except Exception, x:
    if options.debug:
        raise
    sys.exit(x)

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )

