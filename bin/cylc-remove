#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc.cycle_time import ct, CycleTimeError
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro

parser = cop( """cylc [control] remove|kill [OPTIONS] ARGS

Remove a single task, or all tasks with a common TAG (cycle time or
integer) from a running suite. 

Target tasks will be forced to spawn successors before being removed if
they have not done so already, unless you use '--no-spawn'.""",
    pyro=True,
    argdoc=[("REG", "Suite name"), 
            ("TARGET", """NAME%TAG to remove a single task;
               CYCLE or INT to remove all tasks with the same tag.""")])

parser.add_option( "--no-spawn", 
        help="Do not spawn successors before removal.",
        action="store_true", default=False, dest="no_spawn" )

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

target = args[1]

kill_tag = False
kill_task = False

try:
    # is target a task ID
    tid = TaskID(target)
except TaskIDError:
    # no
    kill_tag = True
    try:
        # is it a cycle time?
        ct(target)
    except CycleTimeError,x:
        # nope: is it an async integer tag?
        try:
            int( target )
        except ValueError:
            # nope: not task ID, date time, or TAG
            raise SystemExit( "ERROR, invalid kill target: " + target )
        else:
            # is probably an async TAG
            pass
    else:
        # is a cycle time
        pass
else:
    # is a task id
    kill_task = True
    target = tid.getstr()

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'command-interface' )
except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)

if kill_tag:
    prompt( 'Kill ALL tasks with tag ' + target + ' in ' + suite, options.force )
    if options.no_spawn:
        result = proxy.put( 'kill cycle', False, target ) # die_cycle( target )
    else:
        result = proxy.put( 'kill cycle', True, target ) # spawn_and_die_cycle( target )

if kill_task:
    prompt( 'Kill task ' + target + ' in ' + suite, options.force )
    if options.no_spawn:
       result = proxy.put( 'kill task', False, target ) # die( target )
    else:
       result = proxy.put( 'kill task', True, target ) # spawn_and_die( target )

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )

