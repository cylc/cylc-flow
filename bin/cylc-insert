#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc.cycle_time import ct, CycleTimeError
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro

parser = cop( """cylc [control] insert [OPTIONS] ARGS

Insert a task into a running suite. Inserted tasks will spawn successors
as normal unless they are 'one-off' tasks.
See also 'cylc [task] submit', for running single tasks without the scheduler.""",
    pyro=True,
    argdoc=[ ('REG', 'Suite name' ), 
            ('TASK[%STOP]', 'Task to insert (NAME%TAG)[%STOPTAG]' )])

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

target = args[1]

try:
    # name%tag%stoptag
    ( name, tag, stoptag ) = target.split('%')
except ValueError:
    try:
        ( name, tag ) = target.split('%')
    except ValueError:
        raise SystemExit( "ERROR: final argument must be NAME%TAG[%STOPTAG]" )
    else:
        stoptag = None

# check TASK is a valid task ID
try:
    tid = TaskID( name + '%' + tag )
except TaskIDError, x:
    raise SystemExit(x)
else:
    name, tag = tid.splitstr()

if stoptag:
    # check if stoptag is cycling or asynchronous
    try:
        tid = TaskID( 'junk%' + stoptag )
    except TaskIDError, x:
        raise SystemExit('ERROR, invalid stop tag: ' + stoptag )
    else:
        junk, stop = tid.splitstr()
else:
    stop = None

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'command-interface' )
except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)

prompt( 'Insert ' + target + ' in ' + suite, options.force )
result = proxy.put( 'insert task', name + '%' + tag, stop )

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )

