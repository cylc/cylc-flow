#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os, re
import tempfile
import subprocess
from cylc.global_config import gcfg
from cylc.CylcOptionParsers import cop
from cylc.continuation_lines import join
from cylc.include_files import inline_for_viewing
from cylc.command_prep import prep_file

try:
    from cylc.Jinja2Support import Jinja2Process
except ImportError:
    jinja2_disabled = True
else:
    jinja2_disabled = False

parser = cop( """cylc [prep] view [OPTIONS] ARGS 

View a read-only temporary copy of suite NAME's suite.rc file, in your
editor, after optional include-file inlining and Jinja2 preprocessing.

The edit process is spawned in the foreground as follows:
  % <editor> suite.rc
Where <editor> is defined in the cylc site and user config files
($CYLC_DIR/conf/siterc/site.rc and $HOME/.cylc/user.rc).

For remote host or owner, the suite will be printed to stdout unless
the '-g,--gui' flag is used to spawn a remote GUI edit session.

See also 'cylc [prep] edit'.""")

parser.add_option( "--inline", "-i", 
        help="Inline any include-files.",
        action="store_true", default=False, dest="inline" )

parser.add_option( "--jinja2", "-j",
        help="View the suite after Jinja2 template processing. "
        "This necessarily implies '-i' as well.",
        action="store_true", default=False, dest="process" )

parser.add_option( "--mark", "-m", 
        help="(With '-i') Mark inclusions in the left margin.",
        action="store_true", default=False, dest="mark" )

parser.add_option( "--label", "-l", 
        help="(With '-i') Label file inclusions with the file name. "
        "Line numbers will not correspond to those reported by the parser.",
        action="store_true", default=False, dest="label" )

parser.add_option( "--single",
        help="(With '-i') Inline only the first instances of any "
        "multiply-included files. Line numbers will not correspond to "
        "those reported by the parser.",
        action="store_true", default=False, dest="single" )

parser.add_option( "--nojoin", "-n", 
        help="Do not join continuation lines (line numbers will "
        "not correspond to those reported by the parser).",
        action="store_true", default=False, dest="nojoin" )

parser.add_option( "--gui", "-g", 
        help="Force use of the configured GUI editor.",
        action="store_true", default=False, dest="geditor" )

parser.add_option( "--stdout", 
        help="Print the suite definition to stdout.",
        action="store_true", default=False, dest="stdout" )

( options, args ) = parser.parse_args()

suite, suiterc = prep_file( args[0], options ).execute()

cylc_tmpdir = gcfg.get_tmpdir()
if options.geditor:
    editor = gcfg.cfg['editors']['gui']
else:
    editor = gcfg.cfg['editors']['in-terminal']

global suitedir
suitedir = os.path.dirname(suiterc)

# read the suite.rc file
if os.path.isfile( suiterc ):
    h = open( suiterc, 'rb' )
    lines = h.readlines()
    h.close()

    if options.inline or options.process:
        # inline any include files
        lines = inline_for_viewing( suitedir, lines, options.mark, options.single, options.label )

    if options.process:
        if lines and re.match( '^#![jJ]inja2\s*', lines[0] ):
            # Jinja2 template processing, if first line is "#![jJ]inja2"
            if jinja2_disabled:
                print >> sys.stderr, 'ERROR: This is a "#!jinja2" suite, but Jinja2 is not installed'
                raise SystemExit( 'Aborting (Jinja2 required).')
            try:
                lines = Jinja2Process( lines, suitedir,
                options.templatevars,
                options.templatevars_file,
                verbose=False )
            except Exception, x:
                raise SystemExit(x)

    if not options.nojoin:
        # join any continuation lines
        lines = join( lines )
else:
    parser.error("File not found: " + suiterc )

# Add a warning to file
tmp = " WARNING: This is a READ-ONLY COPY of " + suiterc 
bot = re.sub( '.', '-', tmp )
warning = [
'#' + tmp + '\n', 
'#' + bot + '\n' ] 
newlines = warning + lines

if options.stdout:
    for line in lines:
        print line,
    sys.exit(0)

# write to a temporary file
viewfile = tempfile.mktemp( suffix = ".suite.rc", prefix = suite + '.', dir = cylc_tmpdir )
h = open( viewfile, 'wb' )
h.writelines( newlines )
h.close()

# set the file to be read only
os.chmod( viewfile, 0444 )

# capture the temp file's mod time in case the user edits it
# and overrides the readonly mode.
modtime1 = os.stat( viewfile ).st_mtime

# in case editor has options, e.g. 'emacs -nw':
command_list = re.split( ' ', editor )
command_list.append( viewfile )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, command, 'failed:', retcode
        sys.exit(1)
except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute:', command
    sys.exit(1)
 
# !!!VIEWING FINISHED!!!

# Did the user edit the file
modtime2 = os.stat( viewfile ).st_mtime

if modtime2 > modtime1:
    print
    print >> sys.stderr, 'WARNING: YOU HAVE EDITED A TEMPORARY READ-ONLY SUITE COPY:'
    print >> sys.stderr, viewfile
    print >> sys.stderr, 'In future use \'cylc [prep] edit\' to edit a suite.'
    print
# DONE
