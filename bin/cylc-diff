#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.config import config
from cylc.command_prep import prep_file

n_oone = 0
n_otwo = 0
n_diff = 0

def diffdict( one, two, oone, otwo, diff ):
    global n_oone, n_otwo, n_diff
    # Recursively difference two dictionaries in which any element
    # may be another dictionary, keeping items that appear only 
    # in one or the other, and items that appear in both but differ. 
    for key in one:
        if key not in two:
            oone[key] = one[key]
            n_oone += 1
        elif one[key] != two[key]:
            if isinstance( one[key], dict ):
                for item in oone, otwo, diff:
                    if key not in item:
                        item[key] = {}
                diffdict( one[key], two[key], oone[key], otwo[key], diff[key] )
            else:
                diff[key] = ( one[key], two[key] )
                n_diff += 1

    for key in two:
        if key not in one:
            otwo[key] = two[key]
            n_otwo += 1

def prdict( dct, arrow='<', section='', level=0, diff=False, nested=False ):
    # Recursively print, in pseudo 'diff' format, the contents of
    # one of the three dictionaries populated by the diffdict() function
    # above (any element may itself be a dictionary).

    count = 0

    if section != '':
        prfx = section + ' '
    else:
        prfx = ''

    if section == '':
        sctn = '(top)'
    else:
        sctn = section

    foo = False

    for key in dct:
        if isinstance( dct[key], dict ):
            lvl = level + 1
            if nested:
                pre = prfx + '\n' + '   '*lvl 
            else:
                pre = prfx
            prdict( dct[key], arrow, pre + '['*lvl + str(key) + ']'*lvl, lvl, diff, nested )
        else:
            if not foo:
                if nested:
                    print '  ', sctn
                else:
                    print '\n  ', sctn
                foo = True

            if diff:
                print ' <  ', key, '=', dct[key][0]
                print ' >  ', key, '=', dct[key][1]
            else:
                print ' ' + arrow + '  ', key, '=', dct[key]

parser = cop( """cylc [prep] diff|compare [OPTIONS] REG REG2

Compare two suite definitions and display any differences.

Differencing is done after parsing the suite.rc files so it takes
account of default values that are not explicitly defined, it disregards
the order of configuration items, and it sees any include-file content
after inlining has occurred.

Note that seemingly identical suites normally differ due to inherited
default configuration values (e.g. the default job submission log
directory.

Files in the suite bin directory and other sub-directories of the 
suite definition directory are not currently differenced.""", 
    argdoc=[('REG1', 'Suite name'), ('REG1', 'Suite name')] )

parser.add_option( "-n", "--nested", help="print suite.rc "
        "section headings in nested form.",
        action="store_true", default=False, dest="nested" )

(options, args) = parser.parse_args()

prep1 = prep_file( args[0], options )
prep2 = prep_file( args[1], options )

ver1 = prep1.get_version()
ver2 = prep2.get_version()

if ver1 != ver2:
    print >> sys.stderr, 'Suite cylc version spec:'
    print >> sys.stderr, ' ', args[0] + ':', ver1
    print >> sys.stderr, ' ', args[1] + ':', ver2
    # To Do: this may not matter - we should carry on with difference
    # here, but account for new or missing config items.
    raise SystemExit('ERROR: these suites require different cylc versions' )

suite1, suite1rc = prep1.execute()
suite2, suite2rc = prep2.get_suite()

try:
    print "Parsing", suite1
    config1 = config( suite1, suite1rc,
            template_vars=options.templatevars,
            template_vars_file=options.templatevars_file )
    print "Parsing", suite2
    config2 = config( suite2, suite2rc,
            template_vars=options.templatevars,
            template_vars_file=options.templatevars_file )
except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

if config1 == config2: # does this work, or do we need to do key by key comparison?
    print "Suite definitions " + suite1 + " and " + suite2 + " are identical."
    sys.exit(0)

print "Suite definitions " + suite1 + " and " + suite2 + " differ."

suite1_only = {}
suite2_only = {}
diff_1_2 = {}

diffdict( config1, config2, suite1_only, suite2_only, diff_1_2 )

if n_oone > 0:
    print
    msg = str(n_oone) + ' items only in ' + suite1 + ' (<)'
    print msg
    #print '-' * len(msg)
    prdict( suite1_only, '<', nested=options.nested )

if n_otwo > 0:
    print
    msg = str(n_otwo) + ' items only in ' + suite2 + ' (>)'
    print msg
    #print '-' * len(msg)
    prdict( suite2_only, '>', nested=options.nested )

if n_diff > 0:
    print
    msg = str(n_diff) + ' common items differ ' + suite1 + '(<) ' + suite2 + '(>)'
    print msg
    #print '-' * len(msg)
    prdict( diff_1_2, '', diff=True, nested=options.nested )

