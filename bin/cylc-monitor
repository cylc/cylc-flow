#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Display the state of all existing task proxy objects.

For color terminal ASCII escape codes, see
http://ascii-table.com/ansi-escape-sequences.php
"""

import sys
if '--use-ssh' in sys.argv[1:]:
    # requires local terminal
    sys.exit( "No '--use-ssh': this command requires a local terminal." )

import os, re
from copy import copy
from time import sleep
from cylc.cycle_time import ct, CycleTimeError
from cylc import cylc_pyro_client
from cylc.passphrase import SecurityError
from cylc.CylcOptionParsers import cop
from cylc.strftime import strftime
from cylc.task_state import task_state
from Pyro.errors import ProtocolError,TimeoutError,ConnectionClosedError
from cylc.command_prep import prep_pyro
import cylc.flags

compress = True

parser = cop( """cylc [info] monitor [OPTIONS] ARGS

A terminal-based suite monitor that updates the current state of all
tasks in real time. It is effective even for quite large suites if
'--align' is not used.""", pyro=True, noforce=True )

parser.add_option( "-a", "--align",
        help="Align columns by task name. This option "
        "is only useful for small suites.",
        action="store_true", default=False, dest="align_columns" )

( options, args ) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

states = task_state.legal

key = ''
for state in states:
    ctrl = task_state.ctrl[state]
    ctrl_end = task_state.ctrl_end
    key += ctrl + state + ctrl_end + ' '
key = key.rstrip()
header = ' ' * len(' '.join(states)) # must ignore ctrl chars

alerted = False
alerted2 = False
alerted3 = False

try:
    while True:
        # connect to remote state summary object
        try:
            proxy = cylc_pyro_client.client( suite, pphrase,
                    options.owner, options.host, options.pyro_timeout,
                    options.port ).get_proxy( 'state_summary' )
        except SecurityError, x:
            if cylc.flags.debug:
                raise
            raise SystemExit(x)
        except Exception, x:
            if not alerted:
                print "\n\033[1;37;41mfailed to connect" + ctrl_end
                print >> sys.stderr, x
                alerted = True
            #raise
            # if no connection, try again to connect
            sleep(1)
            continue
        else:
            # timeout (sec) determines max wait for an answer from proxy.
            proxy._setTimeout(60)

        alerted = False

        while True:
            # continual redisplay loop

            # get state summary, task names, cycle times
            try:
                [glbl, states, fam_states] = proxy.get_state_summary()

            except TimeoutError:
                if not alerted3:
                    print "\n\033[1;37;41mconnection timed out" + ctrl_end
                    alerted3 = True
                # if timed out, try again on same connection
                sleep(1)
                continue
                #break

            except ConnectionClosedError:
                if not alerted2:
                    print "\n\033[1;37;41mconnection closed" + ctrl_end
                    alerted2 = True
                sleep(1)
                # if connection lost, try to reconnect
                break

            except ProtocolError:
                if not alerted:
                    print "\n\033[1;37;41mfailed to connect" + ctrl_end
                    alerted = True
                #raise
                # wh'th'fu'?
                sleep(1)
                continue

            alerted2 = False
            alerted3 = False

            dt = glbl[ 'last_updated' ]
            run_mode = glbl[ 'run_mode' ]
            paused = glbl['paused']
            stopping = glbl['stopping']
            will_pause_at = glbl['will_pause_at']
            will_stop_at = glbl['will_stop_at']

            task_ids = states.keys()
            n_tasks_all = len( task_ids )
            task_ids.sort()

            seen_time = {}
            seen_name = {}
            c_time_list = []
            name_list = []

            for task_id in task_ids:

                name = states[ task_id ][ 'name' ]
                c_time = states[ task_id ][ 'label' ]

                if c_time not in seen_time.keys():
                    seen_time[ c_time ] = True
                    c_time_list.append( c_time )

                if name not in seen_name.keys():
                    seen_name[ name ] = True
                    name_list.append( name )

            n_task_types = len( name_list )
            name_list.sort()
            c_time_list.sort()

            # initialize a dict-of-dicts to store display information
            # for all tasks at each current cycle time
            #   task_info[ c_time ][ task_name ] = info
            task_info = {}
            for rt in c_time_list:
                task_info[ rt ] = {}
                for name in name_list:
                    # initialise with blank string of the same size as
                    # the real info that we will use below
                    tmp = name + '*'  # name plus abdication indicator
                    tmp = re.sub( '.', ' ', tmp )
                    task_info[ rt ][name] = tmp

            # now loop through all tasks in the suite and assign their
            # display info to the correct place in the task_info structure
            for task_id in task_ids:

                name = states[ task_id ][ 'name' ]
                asyncid = ''
                if 'asyncid' in states[ task_id ]:
                    asyncid = '(' + states[ task_id ][ 'asyncid' ] + ')'
                ctime = states[ task_id ][ 'label' ]

                name     =      states[ task_id ][ 'name' ]
                state    =      states[ task_id ][ 'state' ]

                if not states[ task_id ][ 'spawned' ]:
                    # identify any tasks that have not spawned yet
                    abd = '*'
                else:
                    # space of same length
                    abd = ' '

                # color displayed info according to run status
                ctrl_start = task_state.ctrl[state]
                # construct the display string for this task
                task_info[ ctime ][ name ] = ctrl_start + name + asyncid + ctrl_end + abd

            # construct an array of lines to blit to the screen

            # MONITOR HEADER and CURRENT TIME
            blit = []
            blitlines = {}
            # SUITE NAME, NUMBER OF TASKS, RUN MODE
            foo = header
            bar = suite + '", ' + str( n_task_types ) + ' types, ' + str( n_tasks_all ) + ' tasks)'
            foo = re.sub( '^.{' + str(len('cylc!')) + '}', 'cylc!', foo )
            foo = re.sub( '.{' + str(len(suite)) + '}$', suite, foo )

            blit.append( '\033[1;37;44m' + foo + ctrl_end )

            blit.append( key )

            # last time state summary was updated by cylc (only happens
            # when task processing is invoked).
            blit.append( 'suite state summary last updated at:                                          ' + '\033[1;38m' + dt.strftime( "%Y/%m/%d %H:%M:%S" ) + ctrl_end )

            foo = 'mode: ' + run_mode
            baz = header
            baz = re.sub( '^.{' + str(len(foo)) + '}', foo, baz )
            blit.append( baz )

            if stopping:
                foo = '__________________________________________________________________________________S_T_O_P_P_I_N_G'
            elif paused:
                foo = '______________________________________________________________________________________P_A_U_S_E_D'
            elif will_pause_at:
                foo = '___________________________________________________________________P_A_U_S_I_N_G__A_T__' + will_pause_at
            elif will_stop_at:
                foo = '_________________________________________________________________S_T_O_P_P_I_N_G__A_T__' + will_stop_at
            else:
                foo = '____________________________________________________________________________________R_U_N_N_I_N_G'

            #blit.append( '\033[1;33;44m' + foo + ctrl_end )
            blit.append( '\033[1;31m' + foo + ctrl_end )

            # construct a line of text to display for each cycle time
            for rt in c_time_list:
                line = ''

                try:
                    crt = ct(rt)
                except CycleTimeError:
                    line += rt
                    indx = rt
                    if asyncid:
                        line += ' ' + asyncid
                        indx = asyncid
                else:
                    indx = rt
                    # colour cycle time according to whether it has
                    # caught up to the current clock time or not.
                    rtdt = crt.get_datetime()
                    if dt > rtdt:
                        # behind
                        line = '\033[1;34m' + rt + ctrl_end
                    else:
                        # caught up
                        line = '\033[1;31m' + rt + ctrl_end

                # add info for each task to the line
                for name in name_list:
                    disp = task_info[rt][name]
                    if not options.align_columns and re.match( '^\s+$', disp ):
                        # don't add white space unless align_columns has
                        # been requested by the user
                        pass
                    else:
                        line = line + ' ' + disp

                #blit.append( line )
                blitlines[indx] = line

            # clear screen and blit the new information up
            os.system( "clear" )
            print '\n'.join( blit )
            indxs = blitlines.keys()
            indxs.sort(key=int)
            for ix in indxs:
                print blitlines[ix]
            # sleep here determines minimum display time before trying to
            # update the information and redisplay it (?).
            sleep(1)

        # sleep here determines how long to wait before trying to reconnect (?)
        sleep( 1 )

except KeyboardInterrupt:
    sys.exit(0)
