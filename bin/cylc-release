#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import PromptOptionParser
from cylc.port_scan import SuiteIdentificationError
from cylc.registration import dbgetter, RegistrationError
from cylc.version import compat

parser = PromptOptionParser( """cylc [control] release|unhold [options] SUITE [TASK]

Release a suite or a single task from a hold, allowing it run as normal.

Holding a SUITE stops it from submitting tasks that are ready to run,
until it is released. Holding a waiting TASK in a SUITE prevents it
from running or spawning successors, until it is released.  

See also 'cylc [control] hold'.""",
["""TASK                 Task to release (NAME%CYCLE)"""])

(options, args) = parser.parse_args()

if len(args) > 2:
    parser.error("too many arguments")

reg = parser.get_suite_name()
dbg = dbgetter()
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

compat( suite, suiterc ).execute( sys.argv )

task_only = False
if len(args) == 2:
    task_only = True
    task = args[1]
    try:
        tid = TaskID( task )
    except TaskIDError, x:
        raise SystemExit(x)
    else:
        task = tid.id

    if not parser.prompt( 'Release task ' + task + ' in'):
        sys.exit(0)
else:
    if not parser.prompt( 'Release suite ' ):
        sys.exit(0)

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if task_only:
    result = proxy.release_task( task )
else:
    result = proxy.resume()

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
