#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, re
import subprocess
from optparse import OptionParser
from cylc.global_config import globalcfg
from OrderedDict import OrderedDict

parser = OptionParser( """cylc [info] documentation|browse [OPTIONS]

This command provides easy access to cylc documentation. By default 
it just lists documentation file locations and URLs; use the command 
options to actually launch configured document viewers.""" )

globals = globalcfg()

# translate simplifed command option to globals.cfg['documentation'] keys:
docs = OrderedDict()
docs['files'] = {
        'html-index'   : 'html index',
        'pdf'          : 'pdf user guide',
        'html-multi'   : 'multi-page html user guide',
        'html-single'  : 'single-page html user guide' }


docs['urls'] = {
        'www-homepage' : 'internet homepage',
        'local-index'  : 'local index' }

parser.add_option( "--view",
        help="Open a document with a configured document viewer. "
        "DOC can be: " + ', '.join(docs['files'].keys()) + ", " + \
                ', '.join(docs['urls'].keys()) + ".", metavar='DOC',
        action="store", default=None, dest="view" )

( options, args ) = parser.parse_args()

if not options.view:
    for dtype in docs.keys():
        print dtype + ':'
        for key, val, in docs[dtype].items():
            print '  ', val, '=', globals.cfg['documentation'][dtype][val]

    print "Use --view=DOC to launch a document viewer"
    sys.exit(0)

if options.view:
    if options.view not in docs['files'].keys() + docs['urls'].keys():
        parser.error( "ERROR, illegal --view value: " + options.view )
    if options.view == 'pdf':
        viewer = globals.cfg['document viewers']['pdf']
    else:
        viewer = globals.cfg['document viewers']['html']
    if options.view in docs['urls']:
        dtype = 'urls'
    else:
        dtype = 'files'
    key = docs[dtype][options.view]
    target = globals.cfg['documentation'][dtype][key] 

if not target:
    print >> sys.stderr, 'ERROR: this item has not been configured'
    print >> sys.stderr, '(see your local cylc administrator)'
    sys.exit(0)

if options.view in docs['files']:
    if not os.path.isfile( target ):
        print >> sys.stderr, "ERROR, file not found: " + target
        print >> sys.stderr, """(if this is a repository version of cylc, the document may
not have been generated; see your local cylc administrator)"""
        sys.exit(1)
        
# viewer may have spaces (e.g. 'firefox --no-remote'):
command_list = re.split( ' ', viewer )
command_list.append( target )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        raise SystemExit( command + ' failed: ' + str( retcode ))
except OSError:
    # the command was not invoked
    raise SystemExit( 'ERROR: unable to execute: ' + command )

