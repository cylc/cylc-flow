#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, re
import subprocess
from optparse import OptionParser
from cylc.cfgspec.site import sitecfg

parser = OptionParser( """cylc [info] documentation|browse [OPTIONS]

By default this command opens the cylc documentation index in your
browser in file:// mode. Alternatively it can open the PDF Cylc User
Guide directly, or browse the cylc internet homepage, or - if your site
has a web server with access to the cylc documentation - an intranet
documentation URL. The browser and PDF reader to use, and the intranet
URL, is determined by cylc site/user configuration - for details see
  $ cylc site-config --help""" )

intranet = sitecfg.get( ['documentation','urls','local index'] )
internet = sitecfg.get( ['documentation','urls','internet homepage'] )

parser.add_option( "-p", "--pdf",
        help="Open the PDF User Guide directly",
        action="store_true", default=False, dest="pdf" )

parser.add_option( "-w", "--internet",
        help="Browse the cylc internet homepage",
        action="store_true", default=False, dest="www" )

if intranet:
    parser.add_option( "-x", "--intranet",
        help="Browse local cylc documentation",
        action="store_true", default=False, dest="xxx" )

( options, args ) = parser.parse_args()

http = False
if options.pdf:
    viewer = sitecfg.get( ['document viewers','pdf'] )
    target = sitecfg.get( ['documentation','files','pdf user guide'] )
elif options.www:
    http = True
    viewer = sitecfg.get( ['document viewers','html'] )
    target = sitecfg.get( ['documentation','urls','internet homepage'] )
elif intranet and options.xxx:
    http = True
    viewer = sitecfg.get( ['document viewers','html'] )
    target = sitecfg.get( ['documentation','urls','local index'] )
else:
    # default
    viewer = sitecfg.get( ['document viewers','html'] )
    target = sitecfg.get( ['documentation','files','html index'] )

if not http and not os.path.isfile( target ):
    print >> sys.stderr, "ERROR, file not found: " + target
    print >> sys.stderr, """(if you are running from a cylc repository the document
not have been generated; see your local cylc administrator)"""
    sys.exit(1)

# viewer may have spaces (e.g. 'firefox --no-remote'):
command_list = re.split( ' ', viewer )
command_list.append( target )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        raise SystemExit( command + ' failed: ' + str( retcode ))
except OSError:
    # the command was not invoked
    raise SystemExit( 'ERROR: unable to execute: ' + command )

