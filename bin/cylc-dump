#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    remrun().execute()

import os
from cylc import cylc_pyro_client, dump
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro

parser = cop( """cylc [info] dump [OPTIONS] ARGS

Print suite state information (e.g. the state of each task). For
small suites 'watch cylc [info] dump SUITE' is an effective non-GUI real
time monitor (but see also 'cylc monitor').

For more information about a specific task, such as the current state of
its prerequisites and outputs, see 'cylc [info] show'.

Examples:
 Display the state of all running tasks, sorted by cycle time:
 % cylc [info] dump --tasks --sort SUITE | grep running

 Display the state of all tasks in a particular cycle:
 % cylc [info] dump -t SUITE | grep 2010082406""", pyro=True )

parser.remove_option("-f" ) # don't need force

parser.add_option( "-g", "--global", help="Global information only.",
        action="store_true", default=False, dest="global_only" )

parser.add_option( "--tasks", help="Task states only.",
        action="store_true", default=False, dest="tasks_only" )

parser.add_option( "-s", "--sort", help="Task states only; "
        "sort by cycle time instead of name.",
        action="store_true", default=False, dest="sort_by_cycle" )

( options, args ) = parser.parse_args()

suite_is_dead = False

try:
    suite, pphrase = prep_pyro( args[0], options ).execute()
except:  # Trap SystemExit
    suite = args[0]
    pphrase = None
    suite_is_dead = True

# default: display all information
display_tasks = True
display_global = True
# check for restricted output
if options.global_only:
    display_tasks = False
if options.tasks_only:
    display_global = False

if suite_is_dead:
    [glbl, states, fam_states] = dump.get_stop_state_summary(
                      suite, options.owner, options.host)
else:
    try:
        proxy = cylc_pyro_client.client(
                     suite, pphrase, options.owner,
                     options.host, options.pyro_timeout, None,
                     options.verbose).get_proxy('state_summary' )
    except Exception, x:
        if options.debug:
            raise
        raise SystemExit(x)
    # get state summary, task names, cycle times
    [glbl, states, fam_states] = proxy.get_state_summary()

if display_global:
    print "suite : " + suite

    run_mode = glbl[ 'run_mode' ]
    if run_mode in ['simulation', 'dummy']:
        print 'SIM MODE (clock rate: ', glbl[ 'clock_rate' ], ')'
    elif run_mode == 'dead':
        print 'STOPPED'

    dt = glbl[ 'last_updated' ]
    print 'last summary update: ' +  dt.strftime( "%Y/%m/%d %H:%M:%S" )

    if glbl['paused']:
        print 'PAUSED'

    if glbl['stopping']:
        print 'STOPPING'

    pausing_at = glbl['will_pause_at']
    if pausing_at:
        print 'PAUSING AT ' + pausing_at

    stopping_at = glbl['will_stop_at']
    if stopping_at:
        print 'STOPPING AT ' + stopping_at

if display_tasks:
    lines = []
    #print 'TASK INFORMATION'
    task_ids = states.keys()
    #task_ids.sort()

    for id in task_ids:
        name  = states[ id ][ 'name' ]
        label = states[ id ][ 'label' ]
        state = states[ id ][ 'state' ]

        if states[ id ][ 'spawned' ]:
            spawned = 'spawned'
        else:
            spawned = 'unspawned'

        if options.sort_by_cycle:
            line = label + ', ' + name + ', '
        else:
            line = name + ', ' + label + ', '

        line += state + ', ' + spawned

        if 'asyncid' in states[id]:
            line += ', ' + states[id]['asyncid']

        lines.append( line )

    lines.sort()
    for line in lines:
        print line
