#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc.cycle_time import ct, CycleTimeError
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro

parser = cop( """cylc [control] stop|shutdown [OPTIONS] ARGS

1/ Shut down a suite when all currently running tasks have finished. 
   No other tasks will be submitted to run in the meantime.

2/ With [STOP], shut down a suite AFTER on of the following events:
    a/ all tasks have passed the TAG STOP (cycle time or async tag)
    b/ the clock time has reached STOP (YYYY/MM/DD-HH:mm)
    c/ the task STOP (TASK.TAG) has finished

3/ With [--now], shut down immediately, regardless of tasks still running.
   WARNING: beware of orphaning tasks that are still running at shutdown;
   these may need to be killed manually, and they will (by default) be
   resubmitted if the suite is restarted.""", pyro=True,
    argdoc=[ ("REG", "Suite name"), 
    ("[STOP]", """a/ task TAG (cycle time or integer), or
                        b/ YYYY/MM/DD-HH:mm (clock time), or
                        c/ TASK (task ID).""")] )

parser.add_option( "--now", 
        help="Shut down immediately; see WARNING above.",
        action="store_true", default=False, dest="shutdownnow" )

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

shutdown_at = False
if len( args ) == 2:
    shutdown_at = True
    shutdown_arg = args[1] 

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'command-interface' )
except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)

method = None
if shutdown_at:
    # STOP argument detected
    try:
        # is it a task ID?
        tid = TaskID( shutdown_arg )
    except TaskIDError:
        # not a task ID
        try:
            # is it a date time YYYY/MM/DD-HH:mm?
            date, time = shutdown_arg.split('-')
            yyyy, mm, dd = date.split('/')
            HH,MM = time.split(':')
        except:
            # not a task ID or a date time; 
            try:
                # is it a cycle time?
                ct(shutdown_arg)
            except CycleTimeError,x:
                # nope: is it an async integer tag?
                try:
                    int( shutdown_arg )
                except ValueError:
                    # nope: not task ID, date time, or TAG
                    raise SystemExit( "ERROR:, invalid STOP argument: " + shutdown_arg )
                else:
                    # is probably an async TAG
                    method = 'stop after tag'
                    #print 'async'
            else:
                # is a cycle time
                method = 'stop after tag'
                #print 'cycling'
        else:
            # is a date time
            method = 'stop after clock time'
            #print 'date-time'
    else:
        # is a task ID
        method = 'stop after task'
        #print 'task id'

    #print method

    prompt( 'Set shutdown ' + shutdown_arg + ' for ' + suite, options.force )
    result = proxy.put( method, shutdown_arg )

elif options.shutdownnow:
    prompt( 'Shut down ' + suite + ' NOW', options.force )
    result = proxy.put( 'stop now' )

else:
    prompt( 'Shut down ' + suite, options.force )
    result = proxy.put( 'stop cleanly' )

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )

