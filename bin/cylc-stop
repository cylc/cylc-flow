#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
import cylc.TaskID
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro
from cylc.command_polling import poller
from cylc.port_file import PortFileError
import cylc.flags

class stop_poller( poller ):
    """A polling object that checks if a suite has stopped yet."""

    def connect( self ):
        try:
            self.proxy = cylc_pyro_client.client(
                    self.args['suite'],
                    self.args['pphrase'],
                    self.args['owner'],
                    self.args['host'],
                    self.args['pyro_timeout'],
                    self.args['port'] ).get_proxy('suite-info')
        except Exception, x:
            print >> sys.stderr, x
            return False
        else:
            return True

    def check( self ):
        # return True if suite has stopped (success) else False
        try:
           self.proxy.get( 'ping suite' )
        except:
            # failed to ping - suite stopped
            return True
        else:
            # pinged - suite must be alive
            return False

parser = cop( """cylc [control] stop|shutdown [OPTIONS] ARGS

1/ cylc stop REG
   Clean shutdown - cease submitting tasks and shut down after current
submitted and running tasks have finished, and event handlers and job
poll and kill commands have executed.

2/ cylc stop --quick REG
   Quick shutdown - cease submitting tasks and shut down without waiting
for current submitted and running tasks to finish, but do wait for event
handlers and job poll and kill commands to be executed.

3/ cylc stop --now REG
   Immediate shut down - do not wait on current submitted and running
tasks, or on queued event handlers and job poll and kill commands.

4/ cylc stop --kill REG
   Do a clean shutdown after killing current submitted and running tasks.

5/ cylc stop REG STOP
   Do a clean shutdown after (a) all tasks have succeeded out to cycle
time STOP, or (b) task ID STOP has succeeded.

6/ cylc stop --wall-clock=DATETIME REG
    Do a clean shutdown after all tasks have succeeded out to wall clock time
    DATETIME (ISO 8601 date/time format e.g. CCYYMMDDThh:mm, CCYY-MM-DDThh,
    etc).

Note that cylc does not shut down automatically at a designated future
cycle point (either by the "final cycle point" in the suite definition, or
by usage case 5/ above) if any failed tasks are present in the suite.
This is to ensure that failed tasks do not go unnoticed.

The command exits immediately unless --max-polls is greater than zero
in which case it polls to wait for suite shutdown.""",
    pyro=True, argdoc=[ ("REG", "Suite name"),
    ("[STOP]", """a/ task POINT (cycle point), or
                        b/ ISO 8601 date-time (clock time), or
                        c/ TASK (task ID).""")] )

parser.add_option( "-k", "--kill",
        help="Shut down cleanly after killing any tasks currently "
        "in the submitted or running states.",
        action="store_true", default=False, dest="kill" )

parser.add_option( "-n", "--now",
        help="Shut down immediately.",
        action="store_true", default=False, dest="now" )

parser.add_option( "-Q", "--quick",
        help="Shut down after immediately after running any "
        "remaining event handlers and job poll/kill commands."
        "(see above).",
        action="store_true", default=False, dest="quick" )

parser.add_option( "-w", "--wall-clock", metavar="DATETIME",
        help="Do a clean shutdown after all tasks have succeeded out to wall"
        " clock DATETIME (ISO 8601 formatted)", action="store",
        dest="wall_clock" )

stop_poller.add_to_cmd_options( parser, d_max_polls=0 )

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

shutdown_at = False
if len( args ) == 2:
    shutdown_at = True
    shutdown_arg = args[1]
    if options.kill:
        print >> sys.stderr, "WARNING: ignoring --kill ( not compatible with [STOP])"
        options.kill = False

if options.kill and ( options.now or options.quick ):
    parser.error( "ERROR: --kill is not compatible with --now or --quick" )

if int(options.max_polls) > 0:
    # (test to avoid the "nothing to do" warning for # --max-polls=0)
    spoller = stop_poller( "suite stopped", options.interval, options.max_polls,
        args={
            'suite'   : suite,
            'pphrase' : pphrase,
            'owner'   : options.owner,
            'host'    : options.host,
            'pyro_timeout' : options.pyro_timeout,
            'port'    : options.port
            })
try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout,
            options.port ).get_proxy( 'command-interface' )
except PortFileError, x:
    print >> sys.stderr, x
    print "The suite is apparently not running"
    # (this is OK for the stop command)
    sys.exit(0)
except Exception, x:
    if cylc.flags.debug:
        raise
    raise SystemExit(x)


method = None
if options.wall_clock:
    method = 'stop after clock time'
    prompt_text = 'Set shutdown at wall clock ' + options.wall_clock
    shutdown_arg = options.wall_clock
elif shutdown_at:
    # STOP argument detected
    if not cylc.TaskID.is_valid_id( shutdown_arg ):
        # not a task ID
        # not a task ID or a date time;
        # TODO ISO - MOVE THIS LOGIC INTO SCHEDULER AND TEST
        try:
            # is it a cycle point?
            ##ct(shutdown_arg)
            pass
        except CycleTimeError,x:
            # nope: is it an async integer tag?
            try:
                int( shutdown_arg )
            except ValueError:
                # nope: not task ID, date time, or CYCLE_POINT
                raise SystemExit( "ERROR:, invalid STOP argument: " + shutdown_arg )
            else:
                # is probably an async CYCLE_POINT
                method = 'stop after tag'
                prompt_text = 'Set shutdown at cycle point ' + shutdown_arg
                #print 'async'
        else:
            # is a cycle point
            method = 'stop after tag'
            prompt_text = 'Set shutdown at cycle point ' + shutdown_arg
            #print 'cycling'
    else:
        # is a task ID
        method = 'stop after task'
        prompt_text = 'Set shutdown after task ' + shutdown_arg
        #print 'task id'

if method:
    prompt( prompt_text + ' for ' + suite, options.force )
    try:
        result = proxy.put( method, shutdown_arg )
    except Exception,x:
        if cylc.flags.debug:
            raise
        sys.exit(x)

elif options.now:
    prompt( 'Shut down ' + suite + ' now', options.force )
    try:
        result = proxy.put( 'stop now' )
    except Exception,x:
        if cylc.flags.debug:
            raise
        sys.exit(x)

elif options.quick:
    prompt( 'Shut down ' + suite + ' quickly', options.force )
    try:
        result = proxy.put( 'stop quickly' )
    except Exception,x:
        if cylc.flags.debug:
            raise
        sys.exit(x)

else:
    prompt( 'Shut down ' + suite, options.force )
    print "Telling the suite to shut down ..."
    try:
        result = proxy.put( 'stop cleanly', options.kill )
    except Exception,x:
        if cylc.flags.debug:
            raise
        sys.exit(x)

if result[0]:
    # command queued
    print result[1]
else:
    # (should not happen)
    sys.exit( result[1] )

if int(options.max_polls) > 0:
    # (test to avoid the "nothing to do" warning for # --max-polls=0)
    if not spoller.connect():
        print >> sys.stderr, "Could not connect to suite: it has apparently shut down already"
        sys.exit(0)
    if not spoller.poll():
        sys.exit(1)

