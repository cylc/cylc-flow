#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from optparse import OptionParser
from cylc.task_message import message

usage = """cylc [task] started [OPTIONS]

This command is part of the cylc task messaging interface, used by
running tasks to communicate progress to their parent suite.

The started command reports commencement of task execution (and it
acquires a task lock from the lockserver if necessary). It is
automatically written to the top of task job scripts by cylc and
therefore does not need to be called explicitly by task scripting.

Suite and task identity are determined from the task execution
environment supplied by the suite (or by the single task 'submit'
command, in which case case the message is just printed to stdout).

See also:
    cylc [task] message
    cylc [task] succeeded
    cylc [task] failed"""

parser = OptionParser( usage )

parser.add_option( "-v", "--verbose",
        help="Verbose output mode.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len( args ) != 0:
    parser.error( "Wrong number of arguments" )

debug = False
try:
    # from task execution environment
    if os.environ['CYLC_DEBUG'] == 'True':
        debug = True
except KeyError:
    pass

# send start message
try:
    message(verbose=options.verbose).send_started()
except Exception, x:
    if debug:
        raise
    print >> sys.stderr, 'ERROR: task messaging failure.'
    raise SystemExit(x)

