#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os, gtk
import warnings
warnings.filterwarnings('ignore', 'use the new', Warning)
from cylc.CylcOptionParsers import cop

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../lib')
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')

from cylc.global_config import globalcfg
from cylc.suite_logging import suite_log
from cylc.gui.db_viewer import MainApp

parser = cop( """cylc [db] dbviewer [OPTIONS]

This command launches a GUI for viewing your database of registered
suites. Right-click on suites or groups to operate on them (edit, copy,
launch gcylc etc.).

NOTE: to daemonize suites launched from the viewer use POSIX nohup command:
    $ nohup cylc dbviewer [OPTIONS] &""", argdoc=[])

parser.add_option( "--pyro-timeout", metavar='SEC',
        help="Set a timeout for the network connections "
        "used when scanning ports for running suites. "
        "The default is no timeout.",
        action="store", default=None, dest="pyro_timeout" )

( options, args ) = parser.parse_args()

# Make current working directory be $HOME. Otherwise (1) if the user
# attempts to start the dbviewer from a CWD that has been removed, Pyro
# will not be importable below; and (2) if the CWD gets removed later
# while dbviewer is running, subprocesses spawned by it will fail when
# they attempt to determine their CWD.
os.chdir(os.environ['HOME'])

globals = globalcfg()
tmpdir = globals.cfg['temporary directory']

app = MainApp( options.db, options.db_owner, tmpdir, options.pyro_timeout )
gtk.main()

