#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import re
from cylc.print_cfg import print_cfg
from cylc.config import config, SuiteConfigError
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_file

parser = cop( usage = """cylc [info] get-config [OPTIONS] REG

Print configuration settings parsed from a suite definition, after
runtime inheritance processing and including default values for items
that are not explicitly set in the suite.rc file.

Config items containing spaces must be quoted on the command line. If
a single item is requested only its value will be printed; otherwise the 
full nested structure below the requested config section is printed. 

Example, from a suite registered as foo.bar:
|# SUITE.RC
|[runtime]
|    [[modelX]]
|        [[[environment]]]
|            FOO = foo
|            BAR = bar

$ cylc get-config --item=[runtime][modelX][environment]FOO foo.bar
foo

$ cylc get-config --item=[runtime][modelX][environment] foo.bar 
FOO = foo
BAR = bar

$ cylc get-config --item=[runtime][modelX] foo.bar 
...
[[[environment]]]
    FOO = foo
    BAR = bar
...""" )

parser.add_option( "-i", "--item", metavar="[SEC...]ITEM", 
        help="Set a runtime item by broadcast. Can be used multiple "
        "times to broadcast several settings at once.",
        action="append", dest="item", default=[] )

parser.add_option( "-t", "--tasks",
        help="Print configured task list.",
        action="store_true", default=False, dest="tasks" )

parser.add_option( "-m", "--mark-up",
        help="Prefix output lines with '!cylc!' to aid "
        "in automated parsing (output can be contaminated by "
        "stdout from login scripts, for example, for remote "
        "invocation).",
        action="store_true", default=False, dest="markoutput" )

parser.add_option( "-p", "--python",
        help="Write out the config data structure in Python native format.",
        action="store_true", default=False, dest="pnative" )

parser.add_option( "--sparse",
        help="Only report [runtime] items  explicitly set in the suite.rc "
        "file, not underlying default settings.",
        action="store_true", default=False, dest="sparse" )

parser.add_option( "-o", "--one-line", 
        help="Combine the result from multiple --item requests onto "
        "one line, with internal spaces replaced by the '*' character. "
        "For single-value items only.",
        action="store_true", default=False, dest="oneline" )

parser.add_option( "-a", "--all-tasks",
        help="For [runtime] items (e.g. --item='command scripting') report "
        "values for all tasks prefixed by task name.",
        action="store_true", default=False, dest="alltasks" )

( options, args ) = parser.parse_args()
owner = options.db_owner

### To Do: check if owner should be/ is passed through to taskdefs 
### since the config-optimization changes.
suite, suiterc = prep_file( args[0], options ).execute()

try:
    config = config( suite, suiterc, 
            template_vars=options.templatevars,
            template_vars_file=options.templatevars_file,
            owner=owner )
except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

if options.markoutput:
    prefix = '!cylc!'
else:
    prefix = ''

if options.tasks:
    for task in config.get_task_name_list():
        print prefix + task
    sys.exit(0)

get_these = []
for i in options.item:
    # construct lists in item nest ordering from --item inputs, i.e.:
    # "[runtime][foo]command scripting" -> [runtime, foo, "command scripting"
    i = i.lstrip('[')
    i = i.rstrip(']')
    j = re.split( '\]\[*', i )
    get_these.append(j)

if options.alltasks:
    data = []
    for i in get_these:
        if i[0] == 'runtime':
            raise SystemExit( "ERROR: --all-tasks is only for items below '[runtime][NAME]'" )
        try:
            data.append( config.get_config_all_tasks( i, options.sparse ))
        except SuiteConfigError, x:
            raise SystemExit(x)

    tasks = data[0].keys()
    tasks.sort()

    for task in tasks:
        if options.oneline:
            try:
                print prefix + task, ' '.join( [ str(d[task]).replace(' ','*') for d in data ] )
            except AttributeError:
                raise SystemExit( "ERROR: -o is compatible with single-value items only" )
        else:
            for d in data:
                print prefix + task, d[task]
    sys.exit(0)

data = []
for i in get_these:
    try:
        data.append( config.get_config( i, options.sparse ))
    except SuiteConfigError, x:
        raise SystemExit(x)
    except KeyError, x:
        print >> sys.stderr, 'ERROR:', x
        raise SystemExit( 'ERROR, item not found: ' + ' -> '.join(i) )


if options.oneline:
    try:
        line = ' '.join( str(d).replace( ' ', '*' ) for d in data )
    except AttributeError, x:
        raise SystemExit( "ERROR: -o is compatible with single-value items only" )
    else:
        print prefix + line
else:
    for d in data:
        if isinstance( d, dict ):
            if options.pnative:
                print d
            else:
                print_cfg( d, level=len(args[1:]), prefix=prefix)
        else:
            print prefix + str(d)

