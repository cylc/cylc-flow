#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.config import config

parser = cop( """cylc [info|prep] list|ls [OPTIONS] ARGS 

Print runtime namespace names (tasks and families), the first-parent
inheritance graph, or actual tasks for a given cycle range.

The first-parent inheritance graph determines the primary task family
groupings that are collapsible in gcylc suite views and the graph
viewer tool. To visualize the full multiple inheritance hierarchy use:
  'cylc graph -n'.""", jset=True, prep=True )

parser.add_option( "-a","--all-tasks",
        help="Print all tasks, not just those used in the graph.",
        action="store_true", default=False, dest="all_tasks" )

parser.add_option( "-n","--all-namespaces",
        help="Print all runtime namespaces, not just tasks.",
        action="store_true", default=False, dest="all_namespaces" )

parser.add_option( "-m","--mro",
        help="Print the linear \"method resolution order\" for each namespace "
        "(the multiple-inheritance precedence order as determined by the "
        "C3 linearization algorithm).",
        action="store_true", default=False, dest="mro" )

parser.add_option( "-t","--tree",
        help="Print the first-parent inheritance hierarchy in tree form.",
        action="store_true", default=False, dest="tree" )

parser.add_option( "-b","--box",
        help="With -t/--tree, using unicode box characters. Your terminal "
        "must be able to display unicode characters.",
        action="store_true", default=False, dest="box" )

parser.add_option( "-w","--with-titles",
        help="Print namespaces titles too.",
        action="store_true", default=False, dest="titles" )

parser.add_option( "-c", "--cycles", 
        help="Print the task IDs of the tasks that would actually "
        "be created in the START [through STOP] cycles (or '1's "
        "for non-cycling tasks).",
        metavar="START[,STOP]", action="store", default=None,
        dest="crange" )

parser.add_option( "--cold", 
        help="With -c/--range, print tasks as if for a cold-start "
        "from the START cycle (default False).",
        action="store_false", default=True, dest="crange_raw" )

(options, args) = parser.parse_args()

suite, suiterc, junk = parser.get_suite()

if options.all_tasks and options.all_namespaces:
    parser.error("Choose either -a or -n")
if options.all_tasks:
    which = "all tasks"
elif options.all_namespaces:
    which = "all namespaces"
elif options.crange:
    which = "crange"
    try:
        tr_start, tr_stop = options.crange.split(',')
    except ValueError:
        tr_start = tr_stop = options.crange

else:
    which = "graphed tasks"

if options.tree:
    if os.environ['LANG'] == 'C' and options.box:
        print >> sys.stderr, "WARNING, ignoring -t/--tree: $LANG=C"
        options.tree = False

if options.titles and options.mro:
    parser.error( "Please choose --mro or --title, not both")

if options.tree and any( [options.all_tasks, options.all_namespaces, options.mro] ):
    print >> sys.stderr, "WARNING: -t chosen, ignoring non-tree options."

try:
    config = config( suite, suiterc, 
        template_vars=options.templatevars,
        template_vars_file=options.templatevars_file)
    if options.tree:
        config.print_first_parent_tree( pretty=options.box, titles=options.titles )
    elif options.crange:
        node_labels = config.get_node_labels( tr_start, tr_stop, raw=options.crange_raw )
        node_labels.sort()
        for nl in node_labels:
            print nl
    else:
        result = config.get_namespace_list( which )
        namespaces = result.keys()
        namespaces.sort()

        if ( options.mro or options.titles ):
            # compute padding
            maxlen = 0
            for ns in namespaces:
                if len(ns) > maxlen: maxlen = len(ns)
            padding = maxlen*' '

        for ns in namespaces:
            if options.mro:
                print ns, padding[0:len(padding)-len(ns)],
                for i in config.get_mro( ns ):
                    print i,
                print
            elif options.titles:
                print ns, padding[0:len(padding)-len(ns)],
                print result[ns]
            else:
                print ns

except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

