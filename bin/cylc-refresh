#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.registration import localdb, RegistrationError
from cylc.config import config, SuiteConfigError
from cylc.regpath import RegPath

parser = cop( usage = """cylc [db] refresh [OPTIONS] ARGS

Check a suite database for invalid registrations (no suite definition 
directory or suite.rc file) and refresh suite titles in case they have
changed since the suite was registered. Explicit wildcards must be 
used in the match pattern (e.g. 'f' will not match 'foo.bar' unless
you use 'f.*').""", 
argdoc=[('[REGEX]', 'Suite name match pattern')])

parser.add_option( "-u","--unregister",
        help="Automatically unregister invalid registrations.",
        action="store_true", default=False, dest="unregister" )

( options, args ) = parser.parse_args()

db = localdb(file=options.db, verbose=options.verbose)

if len(args) == 0:
    pattern = '.*'
else:
    pattern = args[0]
    # force explicit wildcards
    if not pattern.startswith( '^' ):
        pattern = '^' + pattern
    if not pattern.endswith( '$' ):
        pattern += '$'

invalid = []    # no suite.rc file
readerror = []  # can't read title (suite.rc parse error)
try:
    with db.lock():
        db.load_from_file()
        # check validity
        invalid = db.get_invalid()
        # refresh titles
        changed = []
        items = db.get_list( pattern ) 
        if len(items) == 0:
            if pattern:
                print 'No suites found to match', pattern
            else:
                print 'No suites found'
        for suite, dir, title in items:
            if suite in invalid:
                continue
            try:
                db.refresh_suite_title( suite )
            except (RegistrationError, SuiteConfigError), x:
                print >> sys.stderr, x
                readerror.append(suite)
        if len(invalid) > 0:
            print 'ERROR,', len(invalid), 'invalid registrations (no suite.rc file):'
            for i in invalid:
                if options.unregister:
                    db.unregister(i)
                else:
                    print ' -', i
        if len(readerror) > 0:
            print 'ERROR,', len(readerror), 'title parse failures (bad suite.rc file):'
            for i in readerror:
                print ' -', i
        db.dump_to_file()

except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)

