#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
import sys, os
from cylc.hostname import hostname
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import NoPromptOptionParser_u
from cylc.port_scan import SuiteIdentificationError
from cylc.TaskID import TaskID, InvalidTaskIDError, InvalidCycleTimeError
from cylc.registration import dbgetter, RegistrationError
from cylc.version import compat

parser = NoPromptOptionParser_u( """cylc [info] show [options] SUITE [NAME[%TAG]]

Print global or task-specific information from a running suite: title
and task list, task descriptions, current state of task prerequisites
and outputs and, for clock-triggered tasks, whether the delayed start
time is up yet.""",
["""NAME                 Name of a task type. 
   TAG                  Cycle time, or asynchronous tag 'a:INT'."""] )

(options, args) = parser.parse_args()

if options.owner != os.environ['USER'] or options.host != hostname:
    # can't check remote suite reg validity
    suite = args[0]
else:
    # check local suite reg validity
    reg = parser.get_suite_name()
    dbg = dbgetter()
    try:
        suite, suiterc = dbg.get_suite(reg)
    except RegistrationError, x:
        raise SystemExit(x)
    compat( suite, suiterc ).execute( sys.argv )

prnt_suite = False
prnt_name = False
prnt_id = False

if len(args) == 2:
    target = args[1]
    try:
        tid = TaskID( target )
    except InvalidTaskIDError:
        # must be a task name
        prnt_name = True
        name = target
    except InvalidCycleTimeError, x:
        raise SystemExit(x)
    else:
        # task ID
        prnt_id = True
        task_id = tid.id
        name = tid.name
else:
    prnt_suite = True
 
owner=options.owner 

try:
    proxy = cylc_pyro_client.client( suite, owner, host=options.host ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

title, defdir, username = proxy.get_suite_info()

if prnt_suite:
    print suite + ' (' + owner + ') --> ' + defdir
    print title

    for task in proxy.get_task_list():
        print ' + ', task

if prnt_name or prnt_id:
    info = proxy.get_task_info( [ name ] )
    idx = name
    if prnt_id:
        idx = task_id
    print 'TASK ' + idx + ' in suite ' + suite + ':' 
    for name in info.keys():
        print ' + ', info[name]

if prnt_id:
    # PREREQUISITES AND OUTPUTS
    result = proxy.get_task_requisites( [ task_id ] )

    if not result or id not in result:
        print "Task " + task_id + " not found in " + suite
        sys.exit(1)

    for task_id in result.keys():
        [ pre, out, extra_info ] = result[ task_id ]

        print 'PREREQUISITES (- => not satisfied):'
        if len( pre ) == 0:
            print '  (None)'
        for item in pre:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        print 'OUTPUTS (- => not completed):'
        if len( out ) == 0:
            print '  (None)'
        for item in out:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        if len( extra_info.keys() ) > 0:
            print 'Other:'
            for item in extra_info:
                print '  o ', item, '...', extra_info[ item ]
        print """
NOTE: for tasks that have triggered already, prerequisites are 
shown here in the state they were in at the time of triggering."""
