#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute():
        sys.exit(0)

from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop
from cylc.TaskID import TaskID, InvalidTaskIDError, InvalidCycleTimeError
from cylc.command_prep import prep_pyro

parser = cop( """cylc [info] show [OPTIONS] ARGS

Interrogate a running suite for its title and task list, task
descriptions, current state of task prerequisites and outputs and, for
clock-triggered tasks, whether or not the trigger time is up yet.""",
    pyro=True, noforce=True,
    argdoc=[('REG', 'Suite name'), ('[NAME['+TaskID.DELIM+'TAG]]', 'Task name or ID')])

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

prnt_suite = False
prnt_name = False
prnt_id = False

if len(args) == 2:
    target = args[1]
    try:
        tid = TaskID( target )
    except InvalidTaskIDError:
        # must be a task name
        prnt_name = True
        name = target
    except InvalidCycleTimeError, x:
        raise SystemExit(x)
    else:
        # task ID
        prnt_id = True
        task_id = tid.getstr()
        name, junk = tid.splitstr()
else:
    prnt_suite = True
 
try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'suite-info' )
    title, username = proxy.get( 'suite info' )
except Exception, x:
    if options.debug:
        raise
    sys.exit(x)

if prnt_suite:
    print suite + ' (' + options.owner + ')'
    print title

    try:
        for task in proxy.get( 'task list' ):
            print ' + ', task
    except Exception,x:
        if options.debug:
            raise
        sys.exit(x)

if prnt_name or prnt_id:
    try:
        info = proxy.get( 'task info', [ name ] )
    except Exception,x:
        if options.debug:
            raise
        sys.exit(x)
    idx = name
    if prnt_id:
        idx = task_id
    print '\nTASK ' + idx + ' in suite ' + suite + ':' 
    for name in info.keys():
        print ' ', info[name]

if prnt_id:
    # PREREQUISITES AND OUTPUTS
    try:
        result = proxy.get( 'task requisites', [ task_id ] )
    except Exception,x:
        if options.debug:
            raise
        sys.exit(x)

    if not result or task_id not in result:
        print "\nTask " + task_id + " not found in " + suite
        sys.exit(1)

    for task_id in result.keys():
        [ pre, out, extra_info ] = result[ task_id ]

        print '\nPREREQUISITES (- => not satisfied):'
        if len( pre ) == 0:
            print '  (None)'
        for item in pre:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        print '\nOUTPUTS (- => not completed):'
        if len( out ) == 0:
            print '  (None)'
        for item in out:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        if len( extra_info.keys() ) > 0:
            print '\nOther:'
            for item in extra_info:
                print '  o ', item, '...', extra_info[ item ]
        print """
NOTE: for tasks that have triggered already, prerequisites are 
shown here in the state they were in at the time of triggering."""

