#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

import os, re
from cylc.CylcOptionParsers import cop
from cylc.task_message import message
from cylc import cylc_pyro_client
from cylc.command_prep import prep_pyro
from cylc.cycle_time import ct, CycleTimeError
from cylc.print_tree import print_tree
from cylc.TaskID import TaskID
from cylc.config import coerce_runtime_values

def get_padding( settings, level=0, padding=0 ):
    level += 1
    for key,val in settings.items():
        tmp = level*2 + len(key)
        if tmp > padding:
            padding = tmp
        if isinstance( val, dict ):
            padding = get_padding( val, level, padding )
    return padding

def get_rdict( left, right=None ): 
    # left is [section]item, or just item
    rdict = {}
    m = re.match( '^\[(.*)\](.*)$', left )
    if m:
        # [sect]item = right
        sect, var = m.groups()
        if not var:
            rdict = { sect : right }
        else:
            rdict = { sect : { var : right }}
    else:
        # item = right
        rdict = { left : right }
    return rdict
 
usage = """cylc [control] broadcast|bcast [OPTIONS] REG

This command overrides [runtime] namespace settings in a running suite.

For settings affected by multiple broadcasts with respect to cycle time
and/or namespace, the precedence is as follows:
 1) specific cycles take precedence over all-cycle broadcasts; then
 2) the most specific namespace (farthest from root) takes precedence.

Broadcast settings persist across suite restarts.

Items with internal spaces must be quoted, e.g.:
  % cylc broadcast -s "[environment]VERSE = the quick brown fox" REG
  
To view current active broadcasts:
  % cylc broadcast --display REG
  % cylc broadcast --display-task=TASKID REG
 
To unset active broadcast:
  % cylc broadcast -n NAME -u 'command scripting' REG
  % cylc broadcast --clear REG # clear all broadcast settings
  
Broadcast settings are applied to tasks just before job submission.

LIMITATIONS: broadcast cannot change the runtime inheritance hierarchy.

See also 'cylc reload' - reload a modified suite definition at run time."""

parser = cop( usage, pyro=True )

parser.add_option( "-n", "--namespace", metavar="NAME", 
        help="Target runtime namespace, default root; can be used "
        "multiple times to target several namespaces at once.", 
        action="append", dest="namespaces", default=[] )

parser.add_option( "-t", "--tag", metavar="TAG",
        help="Cycle time or integer tag: target tasks with just this "
        "tag; can be used multiple times to target several cycles.", 
        action="append", dest="tags", default=[] )

parser.add_option( "-s", "--set", metavar="[SEC]ITEM=VALUE", 
        help="Set a runtime item by broadcast. Can be used multiple "
        "times to broadcast several settings at once.",
        action="append", dest="set", default=[] )

parser.add_option( "-u", "--unset", metavar="[SEC]ITEM", 
        help="Unset an active broadcast item. Can be used multiple "
        "times to broadcast several settings at once.",
        action="append", dest="unset", default=[] )

parser.add_option( "-c", "--clear", 
        help="clear all current broadcast settings.",
        action="store_true", dest="clear", default=False )

parser.add_option( "-d", "--display", 
        help="Display current active broadcast settings.",
        action="store_true", default=False, dest="show" )

parser.add_option( "-k", "--display-task", metavar="TASKID",
        help="Print current active broadcast for a particular task "
        "(NAME"+TaskID.DELIM+"TAG).", action="store", default=None, dest="showtask" )

parser.add_option( "-b", "--box",
        help="Use unicode box characters with -d, -k.",
        action="store_true", default=False, dest="unicode" )

parser.add_option( "-r", "--raw",
        help="Write out the raw Python config structure, with -d and -k ",
        action="store_true", default=False, dest="raw" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error("Wrong number of argumetns")

suite = args[0]

suite, pphrase = prep_pyro( suite, options ).execute()

debug = False
if options.debug:
    debug = True
else:
    try:
        # from task execution environment
        if os.environ['CYLC_DEBUG'] == 'True':
            debug = True
    except KeyError:
        pass

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'broadcast_receiver' )
except Exception, x:
    if debug:
        raise
    raise SystemExit(x)

if options.show or options.showtask:
    if options.showtask:
        try:
            name, tag = options.showtask.split(TaskID.DELIM)
        except ValueError:
            parser.error( "TASKID must be NAME"+TaskID.DELIM+"TAG" )
    try:
        settings = proxy.get( options.showtask )
    except Exception,x:
        if options.debug:
            raise
        sys.exit(x)
    padding = get_padding(settings) * ' '
    if options.raw:
        print str( settings )
    else:
        print_tree( settings, padding, options.unicode )
    sys.exit(0)

if options.clear:
    try:
        settings = proxy.clear()
    except Exception,x:
        if options.debug:
            raise
        sys.exit(x)
    else:
        sys.exit(0)

if len( options.set ) == 0 and len( options.unset ) == 0:
    parser.error( "No items to set or unset!" )

namespaces = options.namespaces
if not namespaces:
    namespaces = ["root"]

tags = options.tags
if not tags:
    tags = ["all"]

settings = []
for s in options.set:
    try:
        # left = val
        left, val = s.split('=')
        left = left.strip()
        val = val.strip()
        if left == 'inherit':
            raise SystemExit( "ERROR: Inheritance cannot be changed by broadcast" )
    except ValueError:
        raise SystemExit( "ERROR: --set requires a value" )
    rdict = get_rdict( left, val )
    coerce_runtime_values( rdict )
    settings.append( rdict )

for u in options.unset:
    if u == 'inherit':
        raise SystemExit( "ERROR: Inheritance cannot be changed by broadcast" )
    if '=' in u:
        raise SystemExit( "ERROR: --unset does not take a value" )
    settings.append( get_rdict( u ) )

try:
    success, msg = proxy.put( namespaces, tags, settings )
except Exception, x:
    if options.debug:
        raise
    sys.exit(x)
else:
    if not success:
        sys.exit(msg)

