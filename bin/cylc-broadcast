#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

import os, re
from cylc.CylcOptionParsers import cop
from cylc.task_message import message
from cylc import cylc_pyro_client
from cylc.command_prep import prep_pyro
from cylc.cycle_time import ct, CycleTimeError
from cylc.print_tree import print_tree
from cylc.TaskID import TaskID
from parsec.validate import validate
from cylc.cfgspec.suite import SPEC
import cylc.flags

def get_padding( settings, level=0, padding=0 ):
    level += 1
    for key,val in settings.items():
        tmp = level*2 + len(key)
        if tmp > padding:
            padding = tmp
        if isinstance( val, dict ):
            padding = get_padding( val, level, padding )
    return padding

def get_rdict( left, right=None ):
    # left is [section]item, or just item
    rdict = {}
    m = re.match( '^\[(.*)\](.*)$', left )
    if m:
        # [sect]item = right
        sect, var = m.groups()
        if not var:
            rdict = { sect : right }
        else:
            rdict = { sect : { var : right }}
    else:
        # item = right
        rdict = { left : right }
    return rdict

usage = """cylc [control] broadcast|bcast [OPTIONS] REG

Override [runtime] config in targeted namespaces in a running suite.

Uses for broadcast include making temporary changes to task behaviour,
and task-to-downstream-task communication via environment variables.

A broadcast can target any [runtime] namespace for all cycles or for a
specific cycle.  If a task is affected by specific-cycle and all-cycle
broadcasts at once, the specific takes precedence. If a task is affected
by broadcasts to multiple ancestor namespaces, the result is determined
by normal [runtime] inheritance. In other words, it follows this order:

all:root -> all:FAM -> all:task -> tag:root -> tag:FAM -> tag:task

Broadcasts persist, even across suite restarts, until they expire when
their target cycle time is older than the oldest current in the suite,
or until they are explicitly cancelled with this command.  All-cycle
broadcasts do not expire.

For each task the final effect of all broadcasts to all namespaces is
computed on the fly just prior to job submission.  The --cancel and
--clear options simply cancel (remove) active broadcasts, they do not
act directly on the final task-level result. Consequently, for example,
you cannot broadcast to "all cycles except Tn" with an all-cycle
broadcast followed by a cancel to Tn (there is no direct broadcast to Tn
to cancel); and you cannot broadcast to "all members of FAMILY except
member_n" with a general broadcast to FAMILY followed by a cancel to
member_n (there is no direct broadcast to member_n to cancel).

To broadcast a variable to all tasks (quote items with internal spaces):
  % cylc broadcast -s "[environment]VERSE = the quick brown fox" REG
To cancel the same broadcast:
  % cylc broadcast --cancel "[environment]VERSE" REG

Use -d/--display to see active broadcasts. Multiple set or cancel
options can be used on the same command line. Broadcast cannot change
[runtime] inheritance.

See also 'cylc reload' - reload a modified suite definition at run time."""

parser = cop( usage, pyro=True )

parser.add_option( "-t", "--tag", metavar="TAG",
        help="Target cycle time or tag. Defaults "
        "to 'all-cycles' with --set and --cancel, "
        "and nothing with --clear.",
        action="append", dest="tags", default=[] )

parser.add_option( "-n", "--namespace", metavar="NAME",
        help="Target namespace. Defaults to 'root' with "
        "--set and --cancel, and nothing with --clear.",
        action="append", dest="namespaces", default=[] )

parser.add_option( "-s", "--set", metavar="[SEC]ITEM=VALUE",
        help="A [runtime] config item and value to broadcast.",
        action="append", dest="set", default=[] )

parser.add_option( "-c", "--cancel", metavar="[SEC]ITEM",
        help="An item-specific broadcast to cancel.",
        action="append", dest="cancel", default=[] )

parser.add_option( "-C", "--clear",
        help="Cancel all broadcasts, or with -t/--tag, "
        "-n/--namespace, cancel all broadcasts to targeted "
        "namespaces and/or cycle times. Use '-C -t all-cycles' "
        "to cancel all all-cycle broadcasts without canceling "
        "all specific-cycle broadcasts.",
        action="store_true", dest="clear", default=False )

parser.add_option( "-e", "--expire", metavar="CYCLE",
        help="Cancel any broadcasts that target cycle "
        "times earlier than, but not inclusive of, CYCLE.",
        action="store", default=None, dest="expire" )

parser.add_option( "-d", "--display",
        help="Display active broadcasts.",
        action="store_true", default=False, dest="show" )

parser.add_option( "-k", "--display-task", metavar="TASKID",
        help="Print active broadcasts for a given task "
        "(NAME"+TaskID.DELIM+"TAG).",
        action="store", default=None, dest="showtask" )

parser.add_option( "-b", "--box",
        help="Use unicode box characters with -d, -k.",
        action="store_true", default=False, dest="unicode" )

parser.add_option( "-r", "--raw",
        help="With -d/--display or -k/--display-task, write out "
        "the broadcast config structure in raw Python form.",
        action="store_true", default=False, dest="raw" )

( options, args ) = parser.parse_args()

suite = args[0]

suite, pphrase = prep_pyro( suite, options ).execute()

debug = False
if cylc.flags.debug:
    debug = True
else:
    try:
        # from task execution environment
        if os.environ['CYLC_DEBUG'] == 'True':
            debug = True
    except KeyError:
        pass

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout,
            options.port ).get_proxy( 'broadcast_receiver' )
except Exception, x:
    if debug:
        raise
    raise SystemExit(x)

if options.show or options.showtask:
    if options.showtask:
        try:
            name, tag = options.showtask.split(TaskID.DELIM)
        except ValueError:
            parser.error( "TASKID must be NAME"+TaskID.DELIM+"TAG" )
    try:
        settings = proxy.get( options.showtask )
    except Exception,x:
        if debug:
            raise
        sys.exit(x)
    padding = get_padding(settings) * ' '
    if options.raw:
        print str( settings )
    else:
        print_tree( settings, padding, options.unicode )
    sys.exit(0)

if options.clear:
    try:
        settings = proxy.clear( options.namespaces, options.tags )
    except Exception,x:
        if debug:
            raise
        sys.exit(x)
    else:
        sys.exit(0)

if options.expire:
    try:
        settings = proxy.expire( options.expire )
    except Exception,x:
        if debug:
            raise
        sys.exit(x)
    else:
        sys.exit(0)

# implement namespace and tag defaults here
namespaces = options.namespaces
if not namespaces:
    namespaces = ["root"]
tags = options.tags
if not tags:
    tags = ["all-cycles"]

settings = []
for s in options.set:
    try:
        # left = val
        left, val = s.split('=')
        left = left.strip()
        val = val.strip()
        if left == 'inherit':
            raise SystemExit( "ERROR: Inheritance cannot be changed by broadcast" )
    except ValueError:
        raise SystemExit( "ERROR: --set requires a value" )
    settings.append( get_rdict( left, val ))

for u in options.cancel:
    if u == 'inherit':
        raise SystemExit( "ERROR: Inheritance cannot be changed by broadcast" )
    if '=' in u:
        raise SystemExit( "ERROR: --cancel does not take a value" )
    settings.append( get_rdict( u ) )

for setting in settings:
    try:
        # validate items and coerce values
        validate( setting, SPEC['runtime']['__MANY__'] )
    except Exception,x:
        if debug:
            raise
        sys.exit(x)

try:
    success, msg = proxy.put( namespaces, tags, settings )
except Exception, x:
    if debug:
        raise
    sys.exit(x)
else:
    if not success:
        sys.exit(msg)

