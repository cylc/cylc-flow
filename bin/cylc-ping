#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute():
        sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.command_prep import prep_pyro
from cylc.cfgspec.site import sitecfg
import cylc.flags

parser = cop( """cylc [discovery] ping [OPTIONS] ARGS

If suite REG (or task TASK in it) is running, exit (silently, unless
-v,--verbose is specified); else print an error message and exit with
error status. For tasks, success means the task proxy is currently in
the 'running' state.""",
    pyro=True,
    argdoc=[('REG', 'Suite name'),
            ('[TASK]', 'Task NAME'+TaskID.DELIM+'TAG (TAG is cycle time or integer)')])

parser.add_option( "--print-ports",
        help="Print the port range from the cylc site config file.",
        action="store_true",default=False, dest="print_ports" )

( options, args ) = parser.parse_args()

if options.print_ports:
    base = sitecfg.get( ['pyro','base port'] )
    range = sitecfg.get( ['pyro','maximum number of ports'] )
    print base, '<= port <=', base + range
    sys.exit(0)

suite, pphrase = prep_pyro( args[0], options ).execute()

# cylc ping SUITE
try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout,
            options.port ).get_proxy( 'suite-info' )
    proxy.get( 'ping suite' )
except Exception, x:
    if cylc.flags.debug:
        raise
    sys.exit(x)

if len(args) == 1:
    sys.exit(0)

# cylc ping SUITE TASKID
task_id = args[1]
try:
    tid = TaskID( task_id )
except TaskIDError,x:
    raise SystemExit(x)
else:
    task_id = tid.getstr()

try:
    result = proxy.get( 'ping task', task_id )
except Exception,x:
    if cylc.flags.debug:
        raise
    sys.exit(x)

if not result.success:
    sys.exit( 'ERROR: ' + result.reason )

