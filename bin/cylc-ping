#!/usr/bin/env python2

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2019 NIWA & British Crown (Met Office) & Contributors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc [discovery] ping [OPTIONS] ARGS

If suite REG is running or TASK in suite REG is currently running,
exit with success status, else exit with error status."""

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove('--use-ssh')
    from cylc.remote import remrun
    if remrun():
        sys.exit(0)

import cylc.flags
from cylc.option_parsers import CylcOptionParser as COP
from cylc.task_id import TaskID
from cylc.network.httpclient import SuiteRuntimeServiceClient


def main():
    parser = COP(
        __doc__, comms=True,
        argdoc=[('REG', 'Suite name'), ('[TASK]', 'Task ' + TaskID.SYNTAX)])

    (options, args) = parser.parse_args()
    suite = args[0]

    pclient = SuiteRuntimeServiceClient(
        suite, options.owner, options.host, options.port,
        options.comms_timeout, my_uuid=options.set_uuid,
        print_uuid=options.print_uuid,
        auth=SuiteRuntimeServiceClient.ANON_AUTH)

    # cylc ping SUITE
    pclient.get_info('ping_suite')  # (no need to check the result)
    if cylc.flags.verbose:
        sys.stdout.write("Running on %s:%s\n" % (pclient.host, pclient.port))
    if len(args) == 1:
        sys.exit(0)

    # cylc ping SUITE TASKID
    task_id = args[1]
    if not TaskID.is_valid_id(task_id):
        sys.exit("Invalid task ID: " + task_id)
    success, msg = pclient.get_info('ping_task', task_id=task_id)
    if not success:
        sys.exit('ERROR: ' + msg)


if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        if cylc.flags.debug:
            raise
        sys.exit(str(exc))
