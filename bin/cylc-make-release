#!/bin/bash

set -e; trap "echo ERROR" ERR

function usage {
cat <<eof
USAGE: cylc [admin] make-release [OPTIONS] [ARGUMENTS]

Make a cylc release tarball from the head of a repository branch
(default: current branch). This command must run in the top of a cylc
repository clone; it will fail in an unpacked release version.

This packages up the cylc source files; generates the Cylc User Guide
from LaTeX source in PDF, HTML single-page, and HTML multi-page formats; 
deletes the doucmentation source files and some development-only files;
and sets the release version number (e.g. 5.0.0) properly in several
places in the source and documentation.

The "release number" is automatically generated by 'git describe' which
references (a) the latest annotated tag, (b) the number of commits since
the tag, and (c)the hash ID of the latest commit. If the latest tag
points to the latest commit only (a) will be used, e.g. 5.1.0. 

How to apply an annotated tag to the repository:
 % git tag -a x.y.z -m 'Official cylc-x.y.z release.'

To generate the Cylc User Guide you must have LaTeX installed (for
'pdflatex') and TEX4ht (for 'htlatex'); else use [-n] or [-m] options.

Options:
 For official releases, the following options should not be used:
   -x            - DO NOT run automated cylc tests before proceeding.
   -n            - DO NOT generate the Cylc User Guide at all.
   -m            - DO NOT generate an HTML Cylc User Guide.

Arguments:
   [BRANCH-NAME] - Branch name (optional, defaults to current branch)
eof
}

for ARG in $@; do
    if [[ $ARG == '--help' || $ARG == "help" ]]; then
        usage
        exit 0
    fi
done

RUN_TESTS=true
RUN_LATEX=true
RUN_HTML=true
while getopts xnmh OPT; do
    case "$OPT" in
        h)
        usage
        exit 0
        ;;
        x)
        RUN_TESTS=false
        ;;
        n)
        RUN_LATEX=false
        ;;
        m)
        RUN_HTML=false
        ;;
    esac
done

shift $(( OPTIND-1 ))

unset BRANCH
if [[ $# == 1 ]]; then
    BRANCH=$1
elif [[ $# > 1 ]]; then
    usage
    exit 1
fi

VERSION=$( git describe )
RELEASE=cylc-$VERSION
TARBALL=${RELEASE}.tgz
BRANCH=${BRANCH:-$( git rev-parse --abbrev-ref HEAD )}
LOG=$( mktemp )

echo "GENERATING $RELEASE FROM $BRANCH"

echo " + extracting source"
mkdir -p $RELEASE
git archive $BRANCH | tar -x -C $RELEASE
cd $RELEASE

if $RUN_TESTS; then
    echo " + running tests (to watch: \"tail -F $LOG\")"
    echo "   - checking all example suites validate ..."
    cylc admin check-examples > $LOG 2>&1
    # run tests
    echo "   - registration db checks ..."
    cylc admin test-db >> $LOG 2>&1
    echo "   - suite test battery ..."
    cylc admin test-battery >> $LOG 2>&1
else
    echo "(WARNING: OMITTING CODE TESTS BY REQUEST)"
fi

echo " + setting version tag"
perl -pi -e "s/VERSION-TEMPLATE/$VERSION/" lib/cylc/version.py
perl -pi -e "s/VERSION-TEMPLATE/$VERSION/" README

if $RUN_LATEX; then
    echo " + generating User Guide (to watch: \"tail -F $LOG\")"
    # move to doc sub-directory
    cd doc
    if $RUN_HTML; then 
        make >> $LOG 2>&1
    else
        echo "   - (WARNING: PDF only, HTML disabled)"
        make pdf >> $LOG 2>&1
    fi
    echo " + cleaning documentation directory"
    mkdir tmp
    mv *.html *.css *.pdf images screenshots niwa-colour.png tmp/
    make clean
    mv tmp/* .
    rmdir tmp
    rm Makefile *.tex
    rm -r titlepic*
    # make a link to CylcUserGuide.pdf (for historical reasons)
    ln -s cug.pdf CylcUserGuide.pdf
    # move back to cylc top level
    cd ..
else
    echo " + WARNING: User Guide processing disabled"
    rm -rf doc
    mkdir doc
    cat > doc/README <<eof
The Cylc User Guide was not generated for this local release; please see
your cylc administrator for advice.
eof
fi

echo " + deleting dev directory"
rm -r dev

echo " + removing .pyc files"
find . -name '*.pyc' | xargs rm -f

cd .. 
echo " + creating tarball $TARBALL"
tar czf $TARBALL $RELEASE

echo "DONE"

