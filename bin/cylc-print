#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os, re
from cylc.CylcOptionParsers import cop
from cylc.registration import localdb
from cylc.print_tree import print_tree
from cylc.regpath import RegPath

def get_padding( reglist ):
    maxlen = 0
    for reg in reglist:
        items = RegPath(reg[0]).get_list()
        for i in range(0,len(items)):
            if i == 0:
                tmp = len(items[i])
            else:
                tmp = 2*i + 1 + len(items[i])
            if tmp > maxlen:
                maxlen = tmp
    return maxlen * ' '

parser = cop( usage = """cylc [db] print [OPTIONS] [REGEX]

Print suite database registrations.

Note on result filtering: 
  (a) The filter patterns are Regular Expressions, not shell globs, so
the general wildcard is '.*' (match zero or more of anything), NOT '*'.
  (b) For printing purposes there is an implicit wildcard at the end of
each pattern ('foo' is the same as 'foo.*'); use the string end marker
to prevent this ('foo$' matches only literal 'foo').""",
        argdoc=[('[REGEX]', 'Suite name regular expression pattern')])

parser.add_option( "-t","--tree",
        help="Print registrations in nested tree form.",
        action="store_true", default=False, dest="tree" )

parser.add_option( "-b", "--box",
        help="Use unicode box drawing characters in tree views.",
        action="store_true", default=False, dest="unicode" )

parser.add_option( "-a","--align",
        help="Align columns.",
        action="store_true", default=False, dest="align" )

parser.add_option( "-x",
        help="don't print suite definition directory paths.",
        action="store_true", default=False, dest="x" )

parser.add_option( "-y",
        help="Don't print suite titles.",
        action="store_true", default=False, dest="y" )

parser.add_option( "--fail",
        help="Fail (exit 1) if no matching suites are found.",
        action="store_true", default=False, dest="fail" )

( options, args ) = parser.parse_args()

if len(args) == 0:
    regfilter = None
elif len(args) == 1:
    regfilter = args[0]
else:
    parser.error( "Wrong number of arguments.")

db = localdb(file=options.db, verbose=options.verbose)
try:
    with db.lock():
        db.load_from_file()
    allsuites = db.get_list(regfilter)
    if options.fail and len(allsuites) == 0:
        raise SystemExit( 'ERROR: no suites matched.' )
    if not options.tree:
        if options.align:
            maxlen_suite = 0
            maxlen_title = 0
            for suite, dir, title in allsuites:
                if len(suite) > maxlen_suite:
                    maxlen_suite = len(suite)
                if len(title) > maxlen_title:
                    maxlen_title = len(title)
            spacer_suite = maxlen_suite * ' ' 
            spacer_title = maxlen_title * ' ' 
        for suite, dir, title in allsuites:
            dir = re.sub( '^' + os.environ['HOME'], '~', dir )
            if options.align:
                suite = suite + spacer_suite[ len(suite): ]
                title = title + spacer_title[ len(title): ]
            if not options.x and not options.y:
                line = suite + ' | ' + title + ' | ' + dir 
            elif not options.y:
                line = suite + ' | ' + title
            elif not options.x:
                line = suite + ' | ' + dir
            else:
                line = suite
            print line
    else:
        tree = {}
        if options.align:
            maxlen_title = 0
            for suite, dir, title in allsuites:
                if len(title) > maxlen_title:
                    maxlen_title = len(title)
            spacer_title = maxlen_title * ' ' 
 
        for suite, dir, title in allsuites:
            dir = re.sub( '^' + os.environ['HOME'], '~', dir )
            if options.align:
                title = title + spacer_title[ len(title): ]
            regpath = RegPath(suite).get_list()
            sub = tree
            for key in regpath[:-1]:
                if key not in sub:
                    sub[key] = {}
                sub = sub[key]
            if not options.x and not options.y:
                line = title + ' | ' + dir 
            elif not options.y:
                line = ' ' + title
            elif not options.x:
                line = ' ' + dir
            else:
                line = ''
            sub[regpath[-1]] = line

        pad = get_padding( allsuites )
        print_tree(tree, pad, options.unicode )

except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

