#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.registration import localdb, RegistrationError, DatabaseLockedError

parser = cop( usage = """cylc [db] alias [OPTIONS] ARGS

Register an alias REG2 for suite REG1. Using an alias is equivalent to
using the full suite name, except for the following caveat: aliases are
stored in your local suite db and aliased suites run under their full
name; therefore you can't interact with remote suites via an alias
unless you use '--use-ssh' (for [control] category commands), which
re-invokes the control command on the remote suite host (where the alias
is known).

  $ cylc alias global.ensemble.parallel.test3 bob
  $ cylc edit bob
  $ cylc run  bob
  $ cylc show bob # etc.""", 
    argdoc = [("REG1", "Target suite name"),
              ("REG2", "An alias for REG1")])

( options, args ) = parser.parse_args()

suite = args[0]
alias = args[1]

db = localdb( file=options.db, verbose=options.verbose )
try:
    db.lock()
    db.load_from_file()
    db.alias( suite, alias )
    db.dump_to_file()
    db.unlock()

except DatabaseLockedError, x:
    raise SystemExit(x)
except RegistrationError, x:
    print >> sys.stderr, x
    db.unlock()
    sys.exit(1)
except Exception, x:
    print >> sys.stderr, 'ERROR:', x
    db.unlock()
    sys.exit(1)

