#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import gtk
import gobject
import os, sys
from optparse import OptionParser

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../lib')

from cylc.gui.warning_dialog import warning_dialog
from cylc.gui.gcapture import gcapture, gcapture_tmpfile
from cylc.mkdir_p import mkdir_p

# This is a unit test for $CYLC_DIR/lib/cylc/gui/gcapture.py
# but it may be more generally useful.

parser = OptionParser( """gcapture [options] COMMAND
Run a command as a subprocess and capture the resulting stdout and
stderr to display in a dialog. Examples:
    $ capture "echo foo" &

Arguments:
   COMMAND    - the command line to run""")

parser.add_option( "--width", 
    help="dialog window width in pixels (default 400)", 
    metavar='INT', action="store", default=400, dest="width" )

parser.add_option( "--height", 
    help="dialog window height in pixels (default 200)", 
    metavar='INT', action="store", default=200, dest="height" )

parser.add_option( "--file", 
    help="(optional) capture stdout and stderr in FILE" 
    "(full path, e.g. /path/to/foo/output.txt).",
    metavar='FILE', action="store", default=None, dest="filep" )

parser.add_option( "--other",
    help="(optional) view the output (--prefix) of another gcapture process.",
    action="store_true", default=False, dest="other" )

(options, args) = parser.parse_args()

if options.other and not options.filep:
    parser.error( '--other requires --prefix' )

command = ' '.join(args)

if 'TMPDIR' in os.environ:
    tmpdir = os.environ['TMPDIR']
elif 'SCRATCH' in os.environ:
    tmpdir = os.environ['SCRATCH']
else:
    x = 'You must export $TMPDIR or $SCRATCH before running this command' 
    warning_dialog( x ).warn()
    sys.exit(1)

try:
    # create $TMPDIR if necessary
    mkdir_p( tmpdir )
except Exception,x:
    raise SystemExit(x)

if options.other:
    ignore_command = True
else:
    ignore_command = False

gobject.threads_init()
if options.filep:
    try:
        if ignore_command:
            # open existing file
            stdout = open( options.filep, 'rb' )
        else:
            stdout = open( options.filep, 'wb' )
    except IOError, x:
        raise SystemExit(x)
    gcapture( command, stdout, width=int(options.width), height=int(options.height), standalone=True, ignore_command=ignore_command ).run()
else:
    gcapture_tmpfile( command, tmpdir, width=int(options.width), height=int(options.height), standalone=True ).run()
gtk.main()
