#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import atexit
import os, sys
import gtk
from optparse import OptionParser
import shutil
from tempfile import mkdtemp

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../lib')

from cylc.hostname import hostname
from cylc.version import compat

# check Pyro is installed
try:
    import Pyro.constants
except Exception, x:
    raise SystemExit('ERROR: Pyro is not installed (or not accessible)')

from cylc import port_scan
from cylc.mkdir_p import mkdir_p
from cylc.passphrase import passphrase
from cylc.gui.gcylc import MainApp
from cylc.config import config, SuiteConfigError
from cylc.registration import dbgetter, RegistrationError

parser = OptionParser( """cylc gcylc [SUITE]
       gcylc [SUITE]

This is the cylc graphical user interface. It is functionally equivalent
to the command line interface ('cylc help') in most respects.

    1/ gcylc &
This invokes the gcylc main window, which displays suites in your
private registration database, and in the central database available to
all users. By right-clicking on suites or registration groups you can
gain access to all cylc functionality, from editing and graphing through
to suite control and monitoring.

    2/ gcylc [-g,--graph] SUITE &
This directly invokes a suite control and monitoring application for a
particular suite. Alternatively you can get this by right-clicking on 
the suite in the main gcylc suite database viewer (1/ above). Without
the -g option you'll get a filtered text treeview GUI; with it, a
dependency graph based GUI.

NOTE: daemonize important suites with the POSIX nohup command:
    $ nohup gcylc [options] SUITE &

Arguments:
    SUITE      Target suite.""")

#parser.add_option( "--host",
#        help="cylc suite host (defaults to localhost).",
#        metavar="HOST", action="store", default=hostname,
#        dest="host" )

parser.add_option( "-g", "--graph",
        help="With SUITE - invoked the new dependency graph based suite "
        "control and monitoring interface.",
        action="store_true", default=False, dest="depgraph" )

( options, args ) = parser.parse_args()

if len(args) != 0 and len(args) != 1:
    parser.error( "Wrong number of arguments" )

# tmpdir required for extensive use of the capture command in gcylc:
try:
    tmpdir = os.environ['CYLC_TMPDIR']
except KeyError:
    tmpdir = mkdtemp(prefix="gcylc-")
    atexit.register(lambda: shutil.rmtree(tmpdir))

# create tmpdir if necessary
try:
    mkdir_p( tmpdir )
except Exception,x:
    print >> sys.stderr, x
    print >> sys.stderr, 'ERROR, illegal tmpdir?', tmpdir
    sys.exit(1)

imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

#host = options.host
host = hostname
owner = os.environ["USER"]

if len( args ) == 1:
    if args[0] == 'help':
        parser.print_help()
        sys.exit(0)

if len( args ) == 0:
    app = MainApp( host, tmpdir, imagedir )
    gtk.main()
    sys.exit(0)

reg = args[0]

# get suite definition directory
dbg = dbgetter()
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

compat( suite, suiterc ).execute( sys.argv )

suite_dir = os.path.dirname(suiterc)

# get suite logging directory
try:
    conf = config( suite, suiterc )
except SuiteConfigError,x:
    raise SystemExit(x)

logging_dir = os.path.join( conf['cylc']['logging']['directory'] )

# scan for suite port
try:
    port = port_scan.get_port( suite )
except:
    port = None
    #print "Suite " + suite + " is not running"
else:
    print "Suite " + suite + " is running on port " + str(port)

# Export the suite's "cylc local environment" here - gcylc spawns
# external processes via the shell so the suite owner could want 
# variables to affect these processes. Example: the ssh process to 
# retrieve remote task output: 
#   ssh owner@foobar 'cat $HOME/path/to/log/file'
# owner is defined as "nwp_$SYS" and $SYS is computed from $HOME.
senv = conf['cylc']['environment']
for var in senv:
    os.environ[var] = os.path.expandvars(senv[var])

if options.depgraph:
    from cylc.gui.SuiteControlGraph import StandaloneControlGraphApp
    app = StandaloneControlGraphApp( suite, owner, host, port, suite_dir, logging_dir, imagedir, tmpdir )
else:
    from cylc.gui.SuiteControlTree import StandaloneControlTreeApp
    app = StandaloneControlTreeApp( suite, owner, host, port, suite_dir, logging_dir, imagedir, tmpdir )
gtk.main()
