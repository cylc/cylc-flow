#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2014 Hilary Oliver, NIWA
#C:
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from time import sleep, time
from cylc.remote import remrun
from cylc.task_state import task_state

if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.dbstatecheck import CylcSuiteDBChecker, DBNotFoundError
from cylc.cfgspec.site import sitecfg
from cylc.command_polling import poller
import cylc.flags

class suite_poller( poller ):
    """A polling object that checks suite state."""

    def connect( self ):
        """Connect to the suite db, polling if necessary in case the
        suite has not been started up yet."""

        # Returns True if connected, otherwise (one-off failed to
        # connect, or max number of polls exhausted) False
        connected = False

        if cylc.flags.verbose:
            sys.stdout.write("connecting to suite db for " +
                  self.args['run_dir'] + "/" + self.args['suite'])

        # Attempt db connection even if no polls for condition are
        # requested, as failure to connect is useful information.
        max_polls = self.max_polls or 1
        # max_polls*interval is equivalent to a timeout, and we
        # include time taken to connect to the run db in this...
        while not connected:
            self.n_polls += 1
            try:
                self.checker = CylcSuiteDBChecker(self.args['run_dir'], self.args['suite'])
                connected = True
                # ... but ensure at least one poll after connection:
                self.n_polls -= 1
            except DBNotFoundError:
                if cylc.flags.verbose:
                    sys.stdout.write('.')
                if self.n_polls >= max_polls:
                    break
                sleep(self.interval)
        if cylc.flags.verbose:
            sys.stdout.write('\n')
        return connected

    def check( self ):
        # return True if desired suite state achieved, else False
        if self.checker.task_state_met(
                self.args['task'],
                self.args['cycle'],
                self.args['status']):
            return True
        else:
            return False

parser = cop( usage = """cylc suite-state REG [OPTIONS]

Print task states retrieved from a suite database; or (with --task,
--cycle, and --status) poll until a given task reaches a given state.
Polling is configurable with --interval and --max-polls; for a one-off
check use --max-polls=1. The suite database does not need to exist at
the time polling commences but allocated polls are consumed waiting for
it (consider max-polls*interval as an overall timeout).

Note for non-cycling tasks --cycle=1 must be provided.

For your own suites the database location is determined by your
site/user config. For other suites, e.g. those owned by others, or
mirrored suite databases, use --run-dir=DIR to specify the location.

Example usage:
  cylc suite-state REG --task=TASK --cycle=CYCLE --status=STATUS
returns 0 if TASK.CYCLE reaches STATUS before the maximum number of
polls, otherwise returns 1.""")

parser.add_option( "-t", "--task",
        help="Specify a task to check the state of.",
        action="store", dest="task", default=None )

parser.add_option( "-c", "--cycle",
        help="Specify the cycle to check task states for.",
        action="store", dest="cycle", default=None )

parser.add_option( "-d", "--run-dir",
        help="The top level cylc run directory if non-standard. The "
        "database should be DIR/REG/cylc-suite.db. Use to interrogate "
        "suites owned by others, etc.; see note above.",
        metavar="DIR", action="store", dest="run_dir", default=None )

conds = ("Valid triggering conditions to check for include: '" +
         ("', '").join(sorted(CylcSuiteDBChecker.STATE_ALIASES.keys())[:-1]) +
         "' and '" + sorted(CylcSuiteDBChecker.STATE_ALIASES.keys())[-1] + "'. ")
states = ("Valid states to check for include: '" +
         ("', '").join(sorted(task_state.legal)[:-1]) + "' and '" +
         sorted(task_state.legal)[-1] + "'.")

parser.add_option( "-S", "--status",
        help="Specify a particular status or triggering condition to check for. " + conds + states,
        action="store", dest="status", default=None )

suite_poller.add_to_cmd_options(parser)
( options, args ) = parser.parse_args( remove_opts=["--db", "--debug"] )

suite = args[0]

# this only runs locally (use of --host or --user results in remote re-invocation).
run_dir = os.path.expandvars( \
          os.path.expanduser( \
          options.run_dir or sitecfg.get_host_item( 'run directory' )))

spoller = suite_poller( "requested state",
        options.interval, options.max_polls,
        args={
            'suite'   : suite,
            'run_dir' : run_dir,
            'task'    : options.task,
            'cycle'   : options.cycle,
            'status'  : options.status
            })

if not spoller.connect():
    sys.exit( "ERROR: cannot connect to the suite DB" )

if options.status:
    if options.status in task_state.legal or options.status in CylcSuiteDBChecker.STATE_ALIASES:
        pass
    else:
        sys.exit( "ERROR: invalid status '" + options.status + "'" )

if options.status and options.task and options.cycle:
    """check a task status"""
    spoller.condition = options.status
    if not spoller.poll():
        sys.exit(1)
else:
    """just display query results"""
    spoller.checker.display_maps(
            spoller.checker.suite_state_query(
                task=options.task,
                cycle=options.cycle,
                status=options.status))

