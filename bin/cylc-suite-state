#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2016 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc suite-state REG [OPTIONS]

Print task states retrieved from a suite database; or (with --task,
--point, and --status) poll until a given task reaches a given state.
Polling is configurable with --interval and --max-polls; for a one-off
check use --max-polls=1. The suite database does not need to exist at
the time polling commences but allocated polls are consumed waiting for
it (consider max-polls*interval as an overall timeout).

Note for non-cycling tasks --point=1 must be provided.

Important: cylc suite-state only works with task states and does not work with
task messages.

For your own suites the database location is determined by your
site/user config. For other suites, e.g. those owned by others, or
mirrored suite databases, use --run-dir=DIR to specify the location.

Example usages:
  cylc suite-state REG --task=TASK --point=POINT --status=STATUS
returns 0 if TASK.POINT reaches STATUS before the maximum number of
polls, otherwise returns 1.

  cylc suite-state REG --task=TASK --point=POINT --status=STATUS --offset=PT6H
adds 6 hours to the value of CYCLE for carrying out the polling operation.

  cylc suite-state REG --task=TASK --status=STATUS --task-point
uses CYLC_TASK_CYCLE_POINT environment variable as the value for the CYCLE
to poll. This is useful when you want to use cylc suite-state in a cylc task.
"""

import os
import sys
from time import sleep, time

from cylc.remote import remrun

if remrun().execute():
    sys.exit(0)

import cylc.flags
from cylc.option_parsers import CylcOptionParser as COP
from cylc.dbstatecheck import (
    CylcSuiteDBChecker, DBNotFoundError, DBOperationError)
from cylc.cfgspec.globalcfg import GLOBAL_CFG
from cylc.command_polling import Poller
from cylc.task_state import TASK_STATUSES_ORDERED

from isodatetime.parsers import TimePointParser, DurationParser


class SuitePoller(Poller):
    """A polling object that checks suite state."""

    def connect(self):
        """Connect to the suite db, polling if necessary in case the
        suite has not been started up yet."""

        # Returns True if connected, otherwise (one-off failed to
        # connect, or max number of polls exhausted) False
        connected = False

        if cylc.flags.verbose:
            sys.stdout.write(
                "connecting to suite db for " +
                self.args['run_dir'] + "/" + self.args['suite'])

        # Attempt db connection even if no polls for condition are
        # requested, as failure to connect is useful information.
        max_polls = self.max_polls or 1
        # max_polls*interval is equivalent to a timeout, and we
        # include time taken to connect to the run db in this...
        while not connected:
            self.n_polls += 1
            try:
                self.checker = CylcSuiteDBChecker(
                    self.args['run_dir'], self.args['suite'])
                connected = True
                # ... but ensure at least one poll after connection:
                self.n_polls -= 1
            except (DBOperationError, DBNotFoundError):
                if self.n_polls >= max_polls:
                    raise
                if cylc.flags.verbose:
                    sys.stdout.write('.')
                sleep(self.interval)
        if cylc.flags.verbose:
            sys.stdout.write('\n')
        return connected

    def check(self):
        # return True if desired suite state achieved, else False
        if self.checker.task_state_met(
                self.args['task'],
                self.args['cycle'],
                self.args['status']):
            return True
        else:
            return False


def main():
    parser = COP(__doc__)

    parser.add_option(
        "-t", "--task", help="Specify a task to check the state of.",
        action="store", dest="task", default=None)

    parser.add_option(
        "-p", "--point",
        help="Specify the cycle point to check task states for.",
        action="store", dest="cycle", default=None)

    parser.add_option(
        "-T", "--task-point",
        help="Use the CYLC_TASK_CYCLE_POINT environment variable as the "
             "cycle point to check task states for. "
             "Shorthand for --point=$CYLC_TASK_CYCLE_POINT",
        action="store_true", dest="use_task_point", default=False)

    parser.add_option(
        "--template", metavar="TEMPLATE",
        help="Cyclepoint template string, used to reformat cyclepoints for "
             "querying suites",
        action="store", dest="template")

    parser.add_option(
        "-d", "--run-dir",
        help="The top level cylc run directory if non-standard. The "
             "database should be DIR/REG/cylc-suite.db. Use to interrogate "
             "suites owned by others, etc.; see note above.",
        metavar="DIR", action="store", dest="run_dir", default=None)

    parser.add_option(
        "-s", "--offset",
        help="Specify an offset to add to the targetted cycle point",
        action="store", dest="offset", default=None)

    conds = ("Valid triggering conditions to check for include: '" +
             ("', '").join(
                 sorted(CylcSuiteDBChecker.STATE_ALIASES.keys())[:-1]) +
             "' and '" + sorted(
                 CylcSuiteDBChecker.STATE_ALIASES.keys())[-1] + "'. ")
    states = ("Valid states to check for include: '" +
              ("', '").join(TASK_STATUSES_ORDERED[:-1]) +
              "' and '" + TASK_STATUSES_ORDERED[-1] + "'.")

    parser.add_option(
        "-S", "--status",
        help="Specify a particular status or triggering condition to "
             "check for. " + conds + states,
        action="store", dest="status", default=None)

    SuitePoller.add_to_cmd_options(parser)
    (options, args) = parser.parse_args(remove_opts=["--db", "--debug"])

    suite = args[0]

    if options.use_task_point and options.cycle:
        sys.exit(
            "ERROR: cannot specify a cycle point and use environment variable")

    if options.use_task_point:
        if "CYLC_TASK_CYCLE_POINT" in os.environ:
            options.cycle = os.environ["CYLC_TASK_CYCLE_POINT"]
        else:
            sys.exit("ERROR: CYLC_TASK_CYCLE_POINT is not defined")

    if options.offset and not options.cycle:
        sys.exit("ERROR: You must target a cycle point to use an offset")

    # Attempt to apply specified offset to the targetted cycle
    if options.offset:
        my_parser = TimePointParser()
        my_target_point = my_parser.parse(options.cycle, dump_as_parsed=True)
        my_offset_parser = DurationParser()

        oper = "+"
        if options.offset.startswith("-") or options.offset.startswith("+"):
            oper = options.offset[0]
            options.offset = options.offset[1:]
        if options.offset.startswith("P"):
            try:
                my_shift = my_offset_parser.parse(options.offset)
            except ValueError:
                sys.exit("ERROR: Cannot parse offset: %s" % options.offset)
            if oper == "-":
                my_target_point -= my_shift
            else:
                my_target_point += my_shift
        else:
            sys.exit("ERROR: Unrecognised offset: %s" % options.offset)

        options.cycle = str(my_target_point)

    # Reformat cycle point for querying targetted suite
    if options.template:
        if options.cycle:
            my_parser = TimePointParser()
            my_target_point = my_parser.parse(options.cycle,
                                              dump_format=options.template)
            options.cycle = str(my_target_point)
        else:
            sys.exit("ERROR: No cycle point to reformat using template")

    # this only runs locally (use of --host or --user results in remote
    # re-invocation).
    run_dir = os.path.expandvars(
        os.path.expanduser(
            options.run_dir or GLOBAL_CFG.get_host_item('run directory')))

    spoller = SuitePoller(
        "requested state",
        options.interval, options.max_polls,
        args={'suite': suite,
              'run_dir': run_dir,
              'task': options.task,
              'cycle': options.cycle,
              'status': options.status
              })

    if not spoller.connect():
        sys.exit("ERROR: cannot connect to the suite DB")

    if options.status:
        if (options.status in TASK_STATUSES_ORDERED or
                options.status in CylcSuiteDBChecker.STATE_ALIASES):
            pass
        else:
            sys.exit("ERROR: invalid status '" + options.status + "'")

    if options.status and options.task and options.cycle:
        """check a task status"""
        spoller.condition = options.status
        if not spoller.poll():
            sys.exit(1)
    else:
        """just display query results"""
        spoller.checker.display_maps(
            spoller.checker.suite_state_query(
                task=options.task,
                cycle=options.cycle,
                status=options.status))


if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        if cylc.flags.debug:
            raise
        sys.exit(str(exc))
