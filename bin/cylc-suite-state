#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from time import sleep, time
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.dbstatecheck import CylcSuiteDBChecker, DBNotFoundError
from cylc.global_config import get_global_cfg
from cylc.poll import poller

class suite_poller( poller ):
    """A polling object that checks suite state."""

    def connect( self, poll=True, verbose=False ):
        """Connect to the suite db, polling if necessary in case the
        suite has not been started up yet."""

        # Returns True if connected, otherwise (one-off failed to
        # connect, or timed out polling) False
        connected = False
        
        if verbose:
            print ("Trying to connect to database for: " + 
                  self.args['run_dir'] + "/" + self.args['suite'])
        
        while not ( connected or self._timed_out()):
            try:
                self.checker = CylcSuiteDBChecker(self.args['run_dir'], self.args['suite'])
                connected = True
            except DBNotFoundError:
                if verbose:
                    print >> sys.stderr, "Suite database not found"
                if not poll:
                    break
                else:
                    sleep(self.interval)
        return connected

    def check( self ):
        # return True if desired suite state achieved, else False
        if self.checker.task_state_met(
                self.args['task'],
                self.args['cycle'],
                self.args['status']):
            return True
        else:
            return False

parser = cop( usage = """cylc suite-state REG [OPTIONS]

Print task states retrieved from a suite database, or query if a task
has reached a particular state (by using the task, cycle, and status
options). In polling mode the command will wait until the requested 
state is achieved, with an optional timeout abort. The suite database
does not need to exist at the time polling commences.

Example usage:

cylc suite-state REG \
--task=TASK --cycle=CYCLE --run-dir=CYLC-RUN --status=STATUS

Returns 0 if TASK at CYCLE has reached STATUS, 1 otherwise.

The command can be run in polling mode with the --wait option.""")

gcfg = get_global_cfg()
default_run_dir = gcfg.get_host_item( 'run directory', replace=True )

parser.remove_option("--db")
parser.remove_option("--debug")

parser.add_option( "-t", "--task", 
        help="Specify a task to check the state of.",
        action="store", dest="task", default=None )

parser.add_option( "-c", "--cycle", 
        help="Specify the cycle to check task states for.",
        action="store", dest="cycle", default=None )

parser.add_option( "-d", "--run-dir", 
        help="Specify the top level cylc run directory. Defaults "
        "to the local site/user config: " + default_run_dir + ".",
        action="store", dest="run_dir", default=default_run_dir )

parser.add_option( "-S", "--status", 
        help="Specify a particular status to check for.",
        action="store", dest="status", default=None )
        
suite_poller.add_to_cmd_options( parser )

( options, args ) = parser.parse_args()

suite = args[0]

# this only runs locally (use of --host or --owner results in
# re-invocation on the db host account).
run_dir = os.path.expandvars( os.path.expanduser( options.run_dir ))

spoller = suite_poller( "requested state", options.timeout,
        options.interval, args={
            'suite'   : suite,
            'run_dir' : run_dir,
            'task'    : options.task,
            'cycle'   : options.cycle,
            'status'  : options.status
            })

if not spoller.connect(verbose=options.verbose):
    sys.exit( "ERROR: cannot connect to the suite DB" )

if options.status and options.task and options.cycle:
    """check a task status"""
    if options.wait:
        if not spoller.poll():
            sys.exit(1)
    else:
        if not spoller.check_once():
            sys.exit(1)
else:
    """just display query results"""
    spoller.checker.display_maps(
            spoller.checker.suite_state_query(
                task=options.task,
                cycle=options.cycle,
                status=options.status))

