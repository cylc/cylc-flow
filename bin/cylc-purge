#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc.cycle_time import ct, CycleTimeError
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro

# NOTE: it is not clear that this command does the right thing for
# asynchronous tasks - testing needed if purge is required for such.

parser = cop( """cylc [control] purge [OPTIONS] ARGS

Remove an entire tree of dependent tasks, over multiple cycles into the
future, from a running suite. The purge top task will be forced to
spawn and will then be removed, then so will every task that depends on
it, and every task that depends on those, and so on until the given stop
cycle time.

WARNING: THIS COMMAND IS DANGEROUS but in case of disaster you can
restart the suite from the automatic pre-purge state dump (the filename
will be logged by cylc before the purge is actioned.)

UNDERSTANDING HOW PURGE WORKS: cylc identifies tasks that depend on 
the top task, and then on its downstream dependents, and then on
theirs, etc., by simulating what would happen if the top task were to
trigger: it artificially sets the top task to the "succeeded" state
then negotatiates dependencies and artificially sets any tasks whose
prerequisites get satisfied to "succeeded"; then it negotiates
dependencies again, and so on until the stop cycle is reached or nothing
new triggers. Finally it marks "virtually triggered" tasks for removal.
Consequently:
 * Dependent tasks will only be identified as such, and purged, if they
   have already spawned into the top cycle - so let them catch up first.
 * You can't purge a tree of tasks that has already triggered, because
   the algorithm relies on detecting new triggering.
Note also the suite runahead limit must be large enough to bridge the
purge gap or runahead-held tasks may prevent the purge completing fully.

[development note: post cylc-3.0 we could potentially use the suite
graph to determine downstream tasks to remove, without doing this
internal triggering simulation.]""",
    pyro=True, argdoc=[("REG", "Suite name"), 
                ("TASK", "Task (NAME%CYCLE) to start purge"),
                ("STOP", "Cycle (inclusive!) to stop purge")])

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

target = args[1]
stoptag = args[2]

try:
    tid = TaskID( target )
except TaskIDError, x:
    raise SystemExit(x)
else:
    task_id, (name, start) = tid.getstr(), tid.splitstr()

stopid = 'junk%' + stoptag
try:
    tid = TaskID( stopid )
except TaskIDError, x:
    raise SystemExit( 'ERROR, invalid purge stop tag: ' + stoptag )
else:
    junk, stop = tid.splitstr()

try:
    proxy = cylc_pyro_client.client( suite, pphrase, options.owner,
            options.host, options.pyro_timeout, options.port,
            options.verbose ).get_proxy( 'command-interface' )
except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)

prompt( 'Purge from ' + task_id + ' to ' + stop + ' in ' + suite, options.force )
result = proxy.put( 'purge tree', target, stop )

if result[0]:
    print result[1]
else:
    sys.exit( result[1] )

