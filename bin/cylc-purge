#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, re
from cylc.cycle_time import ct, CycleTimeError
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import PromptOptionParser
from cylc.port_scan import SuiteIdentificationError
from cylc.registration import dbgetter, RegistrationError
from cylc.version import compat

# NOTE: it is not clear that this command does the right thing for
# asynchronous tasks - testing needed if purge is required for such.

parser = PromptOptionParser( """cylc [control] purge [options] SUITE TASK STOP

Remove an entire tree of dependent tasks from a running suite. The root
task will be forced to spawn and will then be removed, then so will
every task that depends on it, and every task that depends on those, and
so on until the given stop cycle time.

WARNING: THIS COMMAND IS DANGEROUS but in case of disaster you can
restart the suite from the automatic pre-purge state dump (the filename
will be logged by cylc before the purge is actioned.)

UNDERSTANDING HOW PURGE WORKS: cylc identifies tasks that depend on 
the root task, and then on its downstream dependents, and then on
theirs, etc., by simulating what would happen if the root task were to
trigger: it artificially sets the root task to the "succeeded" state
then negotatiates dependencies and artificially sets any tasks whose
prerequisites get satisfied to "succeeded"; then it negotiates
dependencies again, and so on until the stop cycle is reached or nothing
new triggers. Finally it marks "virtually triggered" tasks for removal.
Consequently:
 * Dependent tasks will only be identified as such if they have already
   spawned into the root cycle, otherwise they will be missed by the
   purge. To avoid this, wait until all tasks that depend on the root
   have caught up to it before purging.
 * If you purge a task that has already finished, only it and its own
   successors will be purged (other downstream tasks will already have
   triggered if they were able to).
[development note: post cylc-3.0 we should be able to identify tasks
that depend on the purge root by using the suite dependency graph, even
if they have not spawned into the cycle time of the root yet.]""",
["TASK                 Task (NAME%CYCLE) at which to start the purge.",
 "STOP                 Cycle time (inclusive!) at which to stop purging."] )

(options, args) = parser.parse_args()

if len( args ) != 3:
    parser.error( "suite name, task ID, and stop cycle required." )

target = args[1]
stoptag = args[2]

try:
    tid = TaskID( target )
except TaskIDError, x:
    raise SystemExit(x)
else:
    task_id, name, start = tid.id, tid.name, tid.tag
 
if re.match( '^a:', stoptag ):
    stop = stoptag[2:]
else:
    try:
        stop = ct(stoptag).get()
    except CycleTimeError,x:
        raise SystemExit(x)

reg = parser.get_suite_name()
dbg = dbgetter()
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

compat( suite, suiterc ).execute( sys.argv )

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Purge from ' + task_id + ' to ' + stop + ' in'):
    sys.exit(0)

result = proxy.purge( target, stop )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
