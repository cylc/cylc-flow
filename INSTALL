
Cylc can run from an unpacked release tree (at a particular version) or
a git repository clone (which can be updated to the latest version at
will).

Consider installing into version-labelled sub-directories to enable
parallel installation of new cylc versions as they are released, e.g.:

/home/cylcadmin/cylc/
                 cylc-5.2.0/
                 cylc-5.3.0/
                 cylc-5.3.1/
                 cylc.git/              # repository
                 latest -> cylc-5.3.1   # symlink

Once installed just put the cylc bin directory in your $PATH variable: 
  % export PATH=/home/cylcadmin/latest/bin:$PATH

INSTALLING FROM A SOURCE TARBALL:

  % tar xzf cylc-x.y.z.tar.gz
  % cd cylc-x.y.z
  % make

The 'make' process does the following:

  1) a VERSION file is created containing the cylc version string, e.g.
  5.1.0. This is taken from the name of the parent directory - DO NOT
  CHANGE THE NAME OF THE UNPACKED SOURCE TREE before running 'make'.  

  2) the Cylc User Guide is generated from LaTeX source files in doc/:
   * if you have pdflatex installed, a PDF version is generated
   * if you have tex4ht and ImageMagick convert installed, two HTML
     versions (single- and multi-page) are generated
   * a doc/index.html is created with links to the generated docs.

  3) The "orrdereddict" Python module will be built from its C language
  source files, in ext/ordereddict-0.4.5. This is not essential - a
  Python implementation will be used by cylc if necessary. Currently, 
  if the build is successful you must install the module yourself into 
  your $PYTHONPATH.

You may want to maintain successive versions of cylc under the same top
level directory:
    TOP/cylc-5.1.0/
    TOP/cylc-5.2.3.
    # etc.

INSTALLING FROM A GIT REPOSITORY CLONE:

  1) To get a clone that can track the official repository:

     % git clone git://github.com/cylc/cylc.git
     % cd cylc
     % make  # build ordereddict and User Guide (as above)
  To pull in the latest changes:
     % git pull origin master
     % make # remake documentation in case of changes

  2) To participate in cylc development: fork cylc on github, clone your
  own fork locally, commit changes in a feature branch and then push it  
  to your fork and issue a pull request to the cylc maintainer.

