#!/bin/bash
#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# NAME
#     test_header
#
# SYNOPSIS
#     . $CYLC_DIR/t/lib/bash/test_header
#
# DESCRIPTION
#     Interface for constructing tests under a TAP harness (the "prove"
#     command).
#
# FUNCTIONS
#     set_test_number N
#         echo a total number of tests for TAP to read.
#     ok TEST_NAME
#         echo a TAP OK message for TEST_NAME.
#     fail TEST_NAME
#         echo a TAP fail message for TEST_NAME.
#     run_ok TEST_NAME COMMAND ...
#         Run COMMAND with any following options/arguments and store stdout
#         and stderr in TEST_NAME.stdout and TEST_NAME.stderr.
#         This is expected to have a return code of 0, which ok's the test.
#     run_fail TEST_NAME COMMAND ...
#         Run COMMAND with any following options/arguments and store stdout
#         and stderr in TEST_NAME.stdout and TEST_NAME.stderr.
#         This is expected to have a non-zero return code, which ok's the test.
#     cmp_ok FILE_TEST [FILE_CONTROL]
#         Compare FILE_TEST with a file or stdin given by FILE_CONTROL
#         (stdin if FILE_CONTROL is "-" or missing). If $TEST_DEBUG_CMP
#         is set, show differences using xxdiff.
#     grep_ok PATTERN FILE
#         Run "grep -q PATTERN FILE".
#     init_suite SUITE_NAME
#         Create a suite called '__cylc__test__${SUITE_NAME}__' in $TEST_DIR.
#     purge_suite SUITE_NAME
#         Tidy up test directories for SUITE_NAME.
#-------------------------------------------------------------------------------
set -eu

FAILURES=0
SIGNALS="EXIT INT"
TEST_DIR=
function FINALLY() {
    for S in $SIGNALS; do
        trap '' $S
    done
    if [[ -n $TEST_DIR ]]; then
        cd ~
        rm -rf $TEST_DIR
    fi
    if [[ $FAILURES -gt 0 ]]; then
        echo -e "\n    stdout and stderr stored in: $TEST_LOG_DIR" > /dev/tty
    fi
}
for S in $SIGNALS; do
    trap "FINALLY $S" $S
done

TEST_NUMBER=0

function set_test_number() {
    echo "1..$1"
}

function ok() {
    echo "ok $((++TEST_NUMBER)) - $@"
}

function fail() {
    ((++FAILURES))
    echo "not ok $((++TEST_NUMBER)) - $@"
}

function run_ok() {
    local TEST_NAME=$1
    shift 1
    if ! "$@" 1>$TEST_NAME.stdout 2>$TEST_NAME.stderr; then
        fail $TEST_NAME
        mkdir -p $TMPDIR/cylc-tests/$(basename $TEST_SOURCE_DIR)
        cp $TEST_NAME.stdout $TEST_LOG_DIR/$TEST_NAME.stdout
        cp $TEST_NAME.stderr $TEST_LOG_DIR/$TEST_NAME.stderr
        return
    fi
    ok $TEST_NAME
}

function run_fail() {
    local TEST_NAME=$1
    shift 1
    if "$@" 1>$TEST_NAME.stdout 2>$TEST_NAME.stderr; then
        fail $TEST_NAME
        mkdir -p $TMPDIR/cylc-tests/$(basename $TEST_SOURCE_DIR)
        cp $TEST_NAME.stdout $TEST_LOG_DIR/$TEST_NAME.stdout
        cp $TEST_NAME.stderr $TEST_LOG_DIR/$TEST_NAME.stderr
        return
    fi
    ok $TEST_NAME
}

function suite_run_ok() {
    local TEST_NAME=$1
    shift 1
    if ! "$@" 1>$TEST_NAME.stdout 2>$TEST_NAME.stderr; then
        fail $TEST_NAME
        SUITE_LOG_DIR=$(cylc get-global-config --print-run-dir)/$SUITE_NAME/log/suite
        cp $TEST_NAME.stdout $SUITE_LOG_DIR/out
        cp $TEST_NAME.stderr $SUITE_LOG_DIR/err
        return
    fi
    ok $TEST_NAME
}

function suite_run_fail() {
    local TEST_NAME=$1
    shift 1
    if "$@" 1>$TEST_NAME.stdout 2>$TEST_NAME.stderr; then
        fail $TEST_NAME
        SUITE_LOG_DIR=$(cylc get-global-config --print-run-dir)/$SUITE_NAME/log/suite
        cp $TEST_NAME.stdout $SUITE_LOG_DIR/out
        cp $TEST_NAME.stderr $SUITE_LOG_DIR/err
        return
    fi
    ok $TEST_NAME
}


function cmp_ok() {
    local FILE_TEST=$1
    local FILE_CONTROL=${2:--}
    local TEST_NAME=$(basename $FILE_TEST)-cmp-ok
    local CMP_COMMAND="cmp"
    if [[ -n ${TEST_DEBUG_CMP:-} ]]; then
        CMP_COMMAND="xxdiff -D"
    fi
    if $CMP_COMMAND $FILE_TEST $FILE_CONTROL; then
        ok $TEST_NAME
        return
    fi
    fail $TEST_NAME
}

function grep_ok() {
    local BRE=$1
    local FILE=$2
    local TEST_NAME=$(basename $FILE)-grep-ok
    if grep -q -e "$BRE" $FILE; then
        ok $TEST_NAME
        return
    fi
    fail $TEST_NAME
}

function init_suite() {
    SUITE_NAME=$(date -u +%Y%m%d%H%M)_cylc_test_$(basename $TEST_SOURCE_DIR)_${1}
    mkdir $TEST_DIR/$SUITE_NAME/ 2>&1 
    cat >$TEST_DIR/$SUITE_NAME/suite.rc
    cylc unregister $SUITE_NAME 2>&1
    cylc register $SUITE_NAME $TEST_DIR/$SUITE_NAME 2>&1
    cd $TEST_DIR/$SUITE_NAME 2>&1
}

function install_suite() {
    SUITE_NAME=$(date -u +%Y%m%d%H%M)_cylc_test_$(basename $TEST_SOURCE_DIR)_${1}
    mkdir $TEST_DIR/$SUITE_NAME/ 2>&1 
    cp -r $TEST_SOURCE_DIR/${2}/* $TEST_DIR/$SUITE_NAME 2>&1
    cylc unregister $SUITE_NAME 2>&1
    cylc register $SUITE_NAME $TEST_DIR/$SUITE_NAME 2>&1
    cd $TEST_DIR/$SUITE_NAME 2>&1
}

function purge_suite() {
    if [[ $FAILURES -eq 0 ]]; then
        while [ $(lsof | grep $(cylc get-global-config --print-run-dir)/$SUITE_NAME | wc -l) -gt 0 ]
        do
            sleep 1
        done    
        rm -rf $(cylc get-global-config --print-run-dir)/$SUITE_NAME
    fi
    cd $TEST_DIR
    if [[ -n ${SUITE_NAME:-} ]]; then
        cylc unregister $SUITE_NAME || true
        if [[ -n ${TEST_DIR:-} ]]; then
            rm -rf $TEST_DIR/$SUITE_NAME/
        fi
    fi
}

CYLC_DIR=${CYLC_DIR:-$(cd $(dirname $BASH_SOURCE)/../../.. && pwd)}
PATH=$CYLC_DIR/bin:$PATH

TEST_NAME_BASE=$(basename $0 .t)
TEST_SOURCE_DIR=$(cd $(dirname $0) && pwd)
TEST_DIR=$(mktemp -d)
cd $TEST_DIR
TEST_LOG_DIR=$TMPDIR/cylc-tests/$(basename $TEST_SOURCE_DIR)

set +e
