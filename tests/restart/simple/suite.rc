#!jinja2
[cylc]
{%- set HOST = environ['CYLC_LL_TEST_TASK_HOST'] %}
{%- set SITE_DIRECTIVES = environ['CYLC_LL_TEST_SITE_DIRECTIVES'] %}
{%- set TEST_DIR = environ['TEST_DIR'] %}
{%- set USE_LOADLEVELER = false %}
[scheduling]
    initial cycle time = 2013092300
    final cycle time   = 2013092306
    runahead limit = 2
    [[dependencies]]
        [[[0,6,12,18]]]
            graph = """
                restart_tidy[T-6] => PRE_RESTART_TASKS
                failed_task:fail => force_restart
                succeed_task:succeed => force_restart
                submit_fail_task:submit-fail => force_restart
                send_a_broadcast_task => force_restart
                retrying_task:start => force_restart
                running_task:start => force_restart
                force_restart => restart_ok
                restart_ok => POST_RESTART_TASKS
                POST_RESTART_TASKS:finish-all & running_task => restart_tidy
                send_a_broadcast_task => broadcast_task
                
                runahead_task
            """
[runtime]
    [[root]]
        command scripting = "sleep 1"
    [[RESTART_TASKS]]
        {%- if USE_LOADLEVELER %}
        [[[job submission]]]
            method = loadleveler
        [[[directives]]]
            class            = serial
            job_type         = serial
            wall_clock_limit = '120,60'
            {{ SITE_DIRECTIVES }}
        [[[remote]]]
            host = {{ HOST }}
        {%- endif %}
    [[PRE_RESTART_TASKS]]
        inherit = RESTART_TASKS
    [[send_a_broadcast_task]]
        inherit = PRE_RESTART_TASKS
        command scripting = """
            cylc broadcast -n broadcast_task -t $CYLC_TASK_CYCLE_TIME -s "[environment]MY_TIME=$CYLC_TASK_CYCLE_TIME" $CYLC_SUITE_REG_NAME
            cylc broadcast -d $CYLC_SUITE_REG_NAME
        """
        description = "Broadcast setup task"
    [[failed_task]]
        inherit = PRE_RESTART_TASKS
        command scripting = "exit 1"
        description = "Failed state task for restart"
    [[succeed_task]]
        inherit = PRE_RESTART_TASKS
        description = "Succeeded state task for restart"
    [[submit_fail_task]]
        inherit = PRE_RESTART_TASKS
        description = "Submit-fail state task for restart"
        [[[job submission]]] 
            method = at
            # 'yesterday' is an invalid at time!
            command template = at yesterday -f %s %s %s
    [[retrying_task]]
        inherit = PRE_RESTART_TASKS
        command scripting = """
            if [[ $CYLC_TASK_TRY_NUMBER -le 3 ]]; then
                exit 1
            fi
        """
        description = "Retrying state task for restart"
        retry delays = 0.5, 0.01, 0.01
    [[running_task]]
        inherit = PRE_RESTART_TASKS
        command scripting = """
            if [[ $CYLC_TASK_CYCLE_TIME -eq $CYLC_SUITE_INITIAL_CYCLE_TIME ]]; then
                # Needs to still be running on suite restart
                cylc suite-state --interval=1 --task=restart_ok --cycle=$CYLC_TASK_CYCLE_TIME \
                --wait --timeout=60 --status=succeeded $CYLC_SUITE_REG_NAME
                sleep 10
            else
                # Needs to run only until shutdown (no --now)
                sleep 15
            fi
        """
        description = "Running state task for restart (with shutdown --now)"
    [[POST_RESTART_TASKS]]
        inherit = RESTART_TASKS
    [[waiting_task]]
        inherit = POST_RESTART_TASKS
        description = "Waiting state task for restart (runs after restart)"
    [[broadcast_task]]
        inherit = POST_RESTART_TASKS
        command scripting = """
            if [[ $MY_TIME -ne $CYLC_TASK_CYCLE_TIME ]]; then
                echo $MY_TIME should be the same as $CYLC_TASK_CYCLE_TIME
                exit 1
            fi
        """
        description = "Broadcast-recipient task (runs after restart)"
        [[[environment]]]
            MY_TIME=2000010100
    [[force_restart]]
        pre-command scripting = """
            # We need to make sure that the results stay consistent.
            cylc suite-state --interval=1 --task=retrying_task --cycle=$CYLC_TASK_CYCLE_TIME \
                --wait --status=retrying $CYLC_SUITE_REG_NAME
            sleep 2
            sqlite3 $CYLC_SUITE_RUN_DIR/cylc-suite.db \
                "select name, cycle, submit_num, try_num, status
                 from task_states
                 order by name, cycle;" > {{ TEST_DIR }}/states-db-pre-restart-$CYLC_TASK_CYCLE_TIME
            cp $CYLC_SUITE_RUN_DIR/state/state {{ TEST_DIR }}/state-pre-restart-$CYLC_TASK_CYCLE_TIME
            if [[ $CYLC_TASK_CYCLE_TIME -eq $CYLC_SUITE_INITIAL_CYCLE_TIME ]]; then
                cd $CYLC_SUITE_RUN_DIR && \
                    cylc shutdown --now --wait $CYLC_SUITE_REG_NAME && \
                    cylc restart $CYLC_SUITE_REG_NAME &&
                    touch $CYLC_SUITE_SHARE_DIR/restart-done-$CYLC_TASK_CYCLE_TIME &
            else
                cd $CYLC_SUITE_RUN_DIR && \
                    cylc shutdown --wait $CYLC_SUITE_REG_NAME && \
                    cylc restart $CYLC_SUITE_REG_NAME &&
                    touch $CYLC_SUITE_SHARE_DIR/restart-done-$CYLC_TASK_CYCLE_TIME &
            fi
        """
        description = "Force a shutdown and restart of the suite"
    [[restart_ok]]
        command scripting = """
            while [[ ! -e $CYLC_SUITE_SHARE_DIR/restart-done-$CYLC_TASK_CYCLE_TIME ]]; do
                sleep 0.1
            done
            cylc suite-state --interval=1 --task=restart_ok --cycle=$CYLC_TASK_CYCLE_TIME \
                --wait --timeout=10 --status=running $CYLC_SUITE_REG_NAME
            sleep 5  # Wait a few typical loops so that the states make it into the database.
            sqlite3 $CYLC_SUITE_RUN_DIR/cylc-suite.db \
                "select name, cycle, submit_num, try_num, status
                 from task_states
                 order by name, cycle;" > {{ TEST_DIR }}/states-db-post-restart-$CYLC_TASK_CYCLE_TIME
            cp $CYLC_SUITE_RUN_DIR/state/state {{ TEST_DIR }}/state-post-restart-$CYLC_TASK_CYCLE_TIME
        """
        description = "Wait for the restart to complete"
    [[restart_tidy]]
        command scripting = """
            cylc reset -f -v -v -s succeeded $CYLC_SUITE_REG_NAME '.*fail.*task' $CYLC_TASK_CYCLE_TIME
            if [[ $CYLC_TASK_CYCLE_TIME -eq $CYLC_SUITE_FINAL_CYCLE_TIME ]]; then
                touch {{ TEST_DIR }}/suite-stopping
            fi
            # Remove the following block once retrying initial tasks are fixed.
            if [[ $CYLC_TASK_CYCLE_TIME -eq $CYLC_SUITE_INITIAL_CYCLE_TIME ]]; then
                if grep -q 'retrying_task.*status=waiting' <<< $(cylc cat-state $CYLC_SUITE_REG_NAME); then
                    cylc reset -f -v -v -s succeeded $CYLC_SUITE_REG_NAME 'retrying_task' $CYLC_TASK_CYCLE_TIME
                fi
            fi
            sleep 5
        """
        description = "Tidy up the cycle so that the next can start"
