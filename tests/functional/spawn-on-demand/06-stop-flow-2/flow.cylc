# Check that a specified flow can be stopped without affecting the main flow.
# Here baz triggers a new flow then waits for the second baz to finish.
# Meanwhile the second bar stops its own flow. So order events should be:
# 1.  foo => bar => baz (flow a)
# 2.  foo => bar (flow b)
# 3.  qux (flow a)
[scheduler]
    allow implicit tasks = True
[scheduling]
    [[graph]]
        R1 = "foo => bar => baz => qux"
[runtime]
    [[bar]]
         script = """
if (( CYLC_TASK_SUBMIT_NUMBER == 2 )); then
   eval $(cylc cat-log -f j -s 2 "${CYLC_SUITE_NAME}" foo.1 | grep CYLC_TASK_FLOW_LABEL)
   cylc stop --flow=${CYLC_TASK_FLOW_LABEL} ${CYLC_SUITE_NAME}
   cylc__job__poll_grep_suite_log "Command succeeded: stop(.*flow_label=$CYLC_TASK_FLOW_LABEL"
fi
         """
    [[baz]]
         script = """
if (( CYLC_TASK_SUBMIT_NUMBER == 1 )); then
   cylc trigger --reflow ${CYLC_SUITE_NAME} foo.1
   cylc__job__poll_grep_suite_log "\[bar\.1\].*succeeded.*job(02)"
fi
         """
