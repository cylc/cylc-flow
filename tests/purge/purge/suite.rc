title = "Old Cylc Admin Test Suite"

#        B[-PT6H]-> B -> E
#                / \
#  X & A[-PT6H]-> A   -> D
#                \ /
#        C[-PT6H]-> C -> F
#

[cylc]
    cycle point format = %Y%m%d%H # (for old-style reference log)
    [[reference test]]
        required run mode = live
        expected task failures = X.2010010112
        live mode suite timeout = 1.5 # minutes

[scheduling]
    # This test suite only needs a start time;
    # the first task sets a stop time.
    initial cycle time = 2010010106

    [[special tasks]]
        cold-start       = ColdA, ColdB, ColdC
        clock-triggered  = X(1)

    [[dependencies]]
        [[[R1]]]
            graph = "prep => X & ColdA & ColdB & ColdC"
        [[[T00,T06,T12,T18]]]
            graph = """
      prep[^] => X => A => B => E
      A => C => F
      B & C => D

      Warm[-PT6H]:succeed-all & Post[-PT6H]:succeed-all & X:fail => recover
      Warm:succeed-all & Post:succeed-all => !recover

      ColdA | A[-PT6H] => A
      ColdB | B[-PT6H] => B
      ColdC | C[-PT6H] => C
                    """
[runtime]
    [[root]]
        command scripting = ${CYLC_TASK_NAME}.sh
        [[[environment]]]
            #TASK_EXE_SECONDS = $( cylc rnd 1 15 )
            TASK_EXE_SECONDS = 0 # fast
            WORKSPACE  = /tmp/$USER/$CYLC_SUITE_REG_NAME/common
            RUNNING    = $WORKSPACE/running
            INPUT_DIR  = $WORKSPACE
            OUTPUT_DIR = $WORKSPACE

    [[Model]]
        description = "Model task"
        [[[environment]]]
            RUNNING_DIR = $RUNNING/$CYLC_TASK_NAME

    [[Cold]]
        inherit = Model
        description = "Model cold start task"
      [[[environment]]]
            # Needs the corresponding model running dir
            RUNNING_DIR = "$RUNNING/${CYLC_TASK_NAME#Cold}"

    [[Warm]]
        inherit = Model
        description = "Model warm start task"

    [[Post]]
        description = "Post processing task"

    [[prep]]
        description = "Clean out the suite workspace for a new run"
        command scripting = """
clean-workspace.sh $WORKSPACE
STOP=$( cylc cycletime --offset-hours=24 )
cylc message "Setting stop cycle $STOP"
cylc stop -f $CYLC_SUITE_REG_NAME $STOP
# set a runahead limit big enough to cross the purge gap
cylc set-runahead -f $CYLC_SUITE_REG_NAME 30"""

    [[X]]
        description = "Retrieve real time data for model A"
        pre-command scripting = """
#sleep 10
CYCLE2=$( cylc cycletime --offset-hours=6 $CYLC_SUITE_INITIAL_CYCLE_TIME )
if (( CYLC_TASK_CYCLE_TIME == CYCLE2 )); then
    echo "This task ABORTS in the 2nd cycle!"
    /bin/false
fi"""

    [[A,B,C]]
        inherit = Warm

    [[D,E,F]]
        inherit = Post

    [[ColdA,ColdB,ColdC]]
        inherit = Cold

    [[recover]]
        command scripting = """
# insert ColdA:
AT=$( cylc cycletime --offset-hours=18 )
cylc insert -f $CYLC_SUITE_REG_NAME ColdA ${AT}
# purge tasks that cannot run:
TO=$( cylc cycletime --offset-hours=12 )
cylc purge -f $CYLC_SUITE_REG_NAME X.$CYLC_TASK_CYCLE_TIME ${TO}
# when the new A task is finished, trigger B and C manually
# (they write out restart files to T+24)
cylc suite-state $CYLC_SUITE_REG_NAME -t A -c $AT -S succeeded --interval=1 --max-polls=30
cylc trigger $CYLC_SUITE_REG_NAME B $AT
cylc trigger $CYLC_SUITE_REG_NAME C $AT
echo DONE"""

[visualization]
    default node attributes = "style=filled"
    [[node attributes]]
        Model = "shape=septagon"
        Post   = "style=", "shape=rectangle"
        Cold   = "shape=egg", "fillcolor=slateblue"
        X   = "shape=box", "fillcolor=lawngreen"
        A      = "fillcolor=red"
        B      = "fillcolor=magenta3"
        C      = "fillcolor=orange"
        D      = "style=bold", "color=green4"
        E      = "style=bold", "color=blue"
        F      = "style=bold", "color=red"

