name: Sync PR

on:
  schedule:
    - cron: '33 15 * * 1-5'  # 15:33 UTC Mon-Fri
  workflow_dispatch:
    inputs:
      branch:
        description: Branch to merge into master
        required: false
  # push:
  #   branches:
  #     - master
  #     - '8.*.x'

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      BRANCH: ${{ inputs.branch || '8.1.x' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure git
        uses: cylc/release-actions/configure-git@v1

      - name: Check branch name
        run: |
          git show-branch "origin/${BRANCH}"

          DECONFLICT_BRANCH="${BRANCH}-deconflict"
          echo "DECONFLICT_BRANCH=${DECONFLICT_BRANCH}" >> $GITHUB_ENV

      - name: Check for existing PR
        id: check-pr
        shell: python
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import os
          import json
          import subprocess
          import sys

          for env_var in ('BRANCH', 'DECONFLICT_BRANCH'):
            branch = os.environ[env_var]
            cmd = f'gh pr list -B master -H {branch} -s open --json url'
            ret = subprocess.run(
              cmd, shell=True, check=True, capture_output=True, text=True
            )
            print(ret.stdout)
            if ret.stderr:
              print(f"::warning::{ret.stderr}")
            if json.loads(ret.stdout):
              print(f"::notice::Found existing PR for {branch}")
              sys.exit(0)

          print("No open PRs found")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write('continue=true')

      - name: Attempt merge
        id: merge
        if: steps.check-pr.outputs.continue
        continue-on-error: true
        run: git merge "origin/${BRANCH}"

      - name: Diff
        id: diff
        if: steps.merge.outcome == 'success'
        run: |
          if [[ "$(git rev-parse HEAD)" == "$GITHUB_SHA" ]]; then
            echo "::notice::master is up to date with $BRANCH"
            exit 0
          fi
          if git diff HEAD^ --exit-code --stat; then
            echo "::notice::No diff between master and $BRANCH"
            exit 0
          fi
          echo "continue=true" >> $GITHUB_OUTPUT

      - name: Create deconflict branch
        if: steps.merge.outcome == 'failure'
        run: |
          git merge --abort
          git checkout -b "$DECONFLICT_BRANCH" "origin/${BRANCH}"
          git push origin "$DECONFLICT_BRANCH"
          echo "BRANCH=${DECONFLICT_BRANCH}" >> $GITHUB_ENV

      - name: Open PR
        if: steps.merge.outcome == 'failure' || steps.diff.outputs.continue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --head "$BRANCH" \
            --title "ðŸ¤– Merge ${BRANCH} into master" \
            --body "Please do a **normal merge**, not squash merge\n\n---\n\nTriggered by ${GITHUB_EVENT_NAME}"

          gh pr edit "$BRANCH" --add-label "sync" || true
