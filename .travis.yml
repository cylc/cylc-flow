# Configuration for the Travis continuous integration system
# ==========================================================
# 
# Travis is a free service for running automatic tests on Github repositories.
# This file configures Travis for Cylc, telling it how to install Cylc and run
# the test battery.
# 
# Test results get posted back to Github. By default Travis will run tests on any
# pull requests, adding a comment on the pull request page to say if the tests
# pass or fail, it will also test any new commits, showing the test results on
# the branch page, e.g. https://github.com/cylc/cylc-flow/branches.
# 
# Connecting a Cylc branch
# ------------------------
# 
# To make use of Travis you will first need to create a fork of Cylc in Github.
# Log in to https://travis-ci.org using your Github credentials, it will ask for
# permission to see your repositories, set the status of branches (whether the
# build passes or fails tests) and create hooks so Travis gets notified of new
# commits.
# 
# Travis will create a list of all of your public Github repositories, you can
# enable automatic tests for a repository using the switches in this list.
# 
# More information for Travis can be found at http://docs.travis-ci.com/user/getting-started/

---
language: python
python: "2.7"
cache: pip
virtualenv:
  # we need system packages in Travis-CI's virtualenv in order to access pygtk, installed via apt-get
  system_site_packages: true
dist: xenial
addons:
  apt:
    # instruct travis-ci to always run apt-get before each build
    update: true
# disabling the shallow-cloning so that it works with Cylc 7 cylc version (uses git commit and tag)
git:
  depth: false

stages:
- unit-test
- test

env:
  global:
  - PATH="${TRAVIS_BUILD_DIR}/bin:$PATH"
  # Only run the generic tests on Travis CI.
  - CYLC_TEST_RUN_PLATFORM=false
  # Custom diff command to ignore Xlib errors (xvfb has not RANDR extension).
  - CYLC_TEST_DIFF_CMD="diff -I Xlib -u"
  # This coverage RC file is created under the script task
  - COVERAGE_PROCESS_START="/tmp/.coveragerc"
  matrix:
  - CHUNK="1/4"
  - CHUNK="2/4"
  - CHUNK="3/4"
  - CHUNK="4/4"

# this is the default test stage, which is used for functional-tests
install: .travis/install.sh functional-tests docs
script:
- export PYTHONPATH="${TRAVIS_BUILD_DIR}/.travis"
# When we run cylc commands, there are processes being forked, that get a
# new working directory. As .coveragerc contains relatives paths, it fails
# to produce the correct coverage, unless we use absolute paths. The `sed`
# call below tries to define the data_file, and sources locations for Travis.
- sed -e "s|data_file=.coverage|data_file=${TRAVIS_BUILD_DIR}/.coverage|g; s|./bin|${TRAVIS_BUILD_DIR}/bin|g; s|./lib|${TRAVIS_BUILD_DIR}/lib|g" .coveragerc > /tmp/.coveragerc
# And some tests fail if we touch files in the git working directory, due
# to Cylc's version appearing with the "dirty" suffix. To avoid this, we
# are using a new coveragerc created under the temporary directory.
- coverage run .travis/cover.py
- unset PYTHONPATH
after_script: .travis/after_script.sh
after_success:
# Report metrics, such as coverage
- coverage combine --append
- coverage xml --ignore-errors
- bash <(curl -s https://codecov.io/bash)

jobs:
  include:
  - stage: unit-test
    install:
    - .travis/install.sh unit-tests functional-tests
    script:
    - pycodestyle --ignore=E402,W503,W504 lib/cylc lib/Jinja2Filters/*.py lib/parsec/*.py $(grep -l '#!.*\<python\>' bin/*)
    - PYTHONPATH=$(pwd -P)/lib/ pytest --cov-append --cov=lib/cylc --cov=lib/parsec
    after_script: true
