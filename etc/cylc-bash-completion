#!/bin/bash
#------------------------------------------------------------------------------
# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) NIWA & British Crown (Met Office) & Contributors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#------------------------------------------------------------------------------
# USAGE
#     Sets up bash auto-completion for cylc commands.
#
#     Users should source this file in their ~/.bashrc, using something
#     like this:
#     if [[ $- =~ i && -f /path/to/cylc-bash-completion ]]; then
#         . /path/to/cylc-bash-completion
#     fi
#     where /path/to/cylc-bash-completion is replaced by the path to
#     this file.
#
#     Administrators may want to place this file in the
#     /etc/bash_completion.d/ (or equivalent) directory.
#------------------------------------------------------------------------------

# hash (detects Cylc version changes when the wrapper script used)
_CYLC_ENV_HASH='recompute me'

# cached values (recomputed for version changes)
_CYLC7_COMPLETION_COMPAT=
_CYLC_VERSION=
_CYLC_CMDS=

_cylc_env_hash() {
    # generate a version hash (to efficiently detect changes in Cylc version)
    # shellcheck disable=SC2153
    echo "${CYLC_VERSION}${CYLC_ENV_NAME}${CYLC_HOME}"
}

_cylc_version_compat () {
    # determine the version of Cylc currently activated
    local _new_cylc_env_hash
    _new_cylc_env_hash="$(_cylc_env_hash)"
    if [[ "${_CYLC_ENV_HASH}" != "${_new_cylc_env_hash}" ]]; then
        _CYLC_VERSION="$(cylc version --long)"
        if [[ "${_CYLC_VERSION}" = 8* ]]; then
            # Cylc 8 - not compatible with this script
            _CYLC7_COMPLETION_COMPAT=false
        else
            # Otherwise assume Cylc 7 (harder to detect)
            _CYLC7_COMPLETION_COMPAT=true
            local cylc_dir
            cylc_dir=$(sed "s/.*(\(.*\))/\1/" <<< "$_CYLC_VERSION")
            _CYLC_CMDS=$(
                cd "${cylc_dir}/bin" \
                    && echo cylc-* \
                    | sed 's/cylc-//g'
            )
        fi
        _CYLC_ENV_HASH="${_new_cylc_env_hash}"
    fi
}

_cylc() {
    # check Cylc version compatibility with this completion script
    _cylc_version_compat
    if ! ${_CYLC7_COMPLETION_COMPAT}; then
        return 0
    fi

    local cur sec opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    sec="${COMP_WORDS[1]}"
    suite_cmds="broadcast|bcast|cat-log|log|cat-state|check-versions|checkpoint|diff|compare|documentation|browse|dump|edit|ext-trigger|external-trigger|get-directory|get-suite-config|get-config|get-suite-version|get-cylc-version|graph|graph-diff|gui|hold|insert|kill|list|ls|ls-checkpoints|monitor|nudge|ping|poll|register|release|unhold|reload|remove|report-timings|reset|restart|run|start|search|grep|set-verbosity|show|spawn|stop|shutdown|submit|single|suite-state|trigger|upgrade-run-dir|validate|view"

    if [[ ${COMP_CWORD} -eq 1 ]]; then
        # complete Cylc command names
        COMPREPLY=($(compgen -W "${_CYLC_CMDS}" -- "${cur}"))
    elif [[ ${sec} =~ ^($suite_cmds)$ ]]; then
        # complete Cylc suite IDs
        opts="$(cylc print -x -y 2>/dev/null)"
        COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
    fi
    return 0
}

complete -o bashdefault -o default -o nospace -F _cylc cylc
